import{r as Yn,s as xt,n as bt,c as Zn,A as eo,B as to,C as no,D as oo,o as lo,h as $e,b as ze,I as Ke}from"./scheduler.DK_yUdRf.js";import{l as wt,n as gt,S as kt,i as _t,e as o,A as Wn,E as io,c as l,d as e,y as d,h as mt,g as t,u as St,s as i,t as sn,v as Tt,f as a,a as Gt,b as rn,w as Pt,j as un,x as Mt,z as ao,F as r,B as ln,H as Vt,q as Kt}from"./index.BH5W4qoH.js";import{p as so}from"./stores.CcNnm2Om.js";import{b as Xt,w as Fn}from"./entry.Bbu27X80.js";import{_ as ro}from"./preload-helper.C1FmrZbK.js";function Rn(m){return(m==null?void 0:m.length)!==void 0?m:Array.from(m)}function ma(m,n){wt(m,1,1,()=>{n.delete(m.key)})}function ya(m,n,f,p,h,s,u,c,he,O,b,xe){let U=m.length,k=s.length,we=U;const j={};for(;we--;)j[m[we].key]=we;const _=[],pe=new Map,ee=new Map,P=[];for(we=k;we--;){const de=xe(h,s,we),E=f(de);let S=u.get(E);S?P.push(()=>S.p(de,n)):(S=O(E,de),S.c()),pe.set(E,_[we]=S),E in j&&ee.set(E,Math.abs(we-j[E]))}const ge=new Set,q=new Set;function C(de){gt(de,1),de.m(c,b),u.set(de.key,de),b=de.first,k--}for(;U&&k;){const de=_[k-1],E=m[U-1],S=de.key,He=E.key;de===E?(b=de.first,U--,k--):pe.has(He)?!u.has(S)||ge.has(S)?C(de):q.has(He)?U--:ee.get(S)>ee.get(He)?(q.add(S),C(de)):(ge.add(He),U--):(he(E,u),U--)}for(;U--;){const de=m[U];pe.has(de.key)||he(de,u)}for(;k;)C(_[k-1]);return Yn(P),_}function Ht(m,n){const f={},p={},h={$$scope:1};let s=m.length;for(;s--;){const u=m[s],c=n[s];if(c){for(const he in u)he in c||(p[he]=1);for(const he in c)h[he]||(f[he]=c[he],h[he]=1);m[s]=c}else for(const he in u)h[he]=1}for(const u in p)u in f||(f[u]=void 0);return f}function Ze(m){return typeof m=="object"&&m!==null?m:{}}const uo="https://www.spyder-ide.org/",an=uo,ho="Spyder",po="The Python IDE that scientists and data analysts deserve",co="Designed by the community, for the community",wa="Spyder Website Contributors",fo="Get the ease of use of Jupyter along with many advanced features found in PyCharm and VSCode in a single programming environment",ga=`${an}assets/media/website_screenshot.png`,va=["Python","IDE","Spyder","Matplotlib","iPython","Jupyter","Science","Data-Science","Data-Analytics","Programming"],ba="Welcome to Spyder's Blog",xa=fo,Gn="blog",mo="og",yo=`${an}assets/media/blog_screenshot.png`,ka=[[{text:"Download",href:`${Xt}/download/`,target:"_self"},{text:"About",href:`${Xt}/about/`,target:"_self"},{text:"Blog",href:`${Xt}/${Gn}/`,target:"_self"},{text:"Docs",href:"https://docs.spyder-ide.org/",target:"_blank"}]],wo={github:"https://github.com/spyder-ide/spyder",twitter:"https://twitter.com/spyder_ide",facebook:"https://www.facebook.com/SpyderIDE/",mastodon:"https://fosstodon.org/@Spyder",instagram:"https://instagram.com/spyderide",rss:`${Xt}/blog/feed.xml`},_a={title:po,description:co},Ca={dark:`${Xt}/assets/media/screenshot_dark.webp`,light:`${Xt}/assets/media/screenshot_light.webp`},Sa={highlight:!1,icon:"github",text:"Checkout on GitHub",href:"https://github.com/spyder-ide/spyder/"},Ta={windows:{x64:{name:"Windows 10+",link:"https://github.com/spyder-ide/spyder/releases/latest/download/Spyder-Windows-x86_64.exe"}},linux:{x64:{name:"Linux",link:"https://github.com/spyder-ide/spyder/releases/latest/download/Spyder-Linux-x86_64.sh"}},mac:{arm64:{name:"macOS 14.0+ (M1)",link:"https://github.com/spyder-ide/spyder/releases/latest/download/Spyder-macOS-arm64.pkg"},x64:{name:"macOS 12.0+ (Intel)",link:"https://github.com/spyder-ide/spyder/releases/latest/download/Spyder-macOS-x86_64.pkg"}}},Pa="Connect with us on";function Nn(m){let n;return{c(){n=o("link"),this.h()},l(f){n=l(f,"LINK",{rel:!0,href:!0}),this.h()},h(){d(n,"rel","stylesheet"),d(n,"href",Xt+"/assets/vendor/prism/prism-nord.css")},m(f,p){t(f,n,p)},d(f){f&&e(n)}}}function go(m){let n,f,p,h,s,u,c,he,O,b,xe,U,k,we,j,_,pe,ee,P,ge,q,C,de,E,S,He,N,M,Le,I,x,Te,ye;document.title=n=m[1].title;let A=m[0]&&Nn();return{c(){f=o("meta"),h=o("meta"),u=o("meta"),he=o("link"),O=o("link"),b=o("meta"),xe=o("meta"),U=o("meta"),we=o("meta"),_=o("meta"),ee=o("meta"),ge=o("meta"),q=o("meta"),C=o("meta"),de=o("meta"),E=o("meta"),S=o("meta"),N=o("meta"),Le=o("meta"),x=o("meta"),A&&A.c(),ye=Wn(),this.h()},l(Ee){const ue=io("svelte-ez8xnx",document.head);f=l(ue,"META",{name:!0,content:!0}),h=l(ue,"META",{name:!0,content:!0}),u=l(ue,"META",{name:!0,content:!0}),he=l(ue,"LINK",{rel:!0,href:!0}),O=l(ue,"LINK",{rel:!0,type:!0,title:!0,href:!0}),b=l(ue,"META",{property:!0,content:!0}),xe=l(ue,"META",{property:!0,content:!0}),U=l(ue,"META",{property:!0,content:!0}),we=l(ue,"META",{property:!0,content:!0}),_=l(ue,"META",{property:!0,content:!0}),ee=l(ue,"META",{property:!0,content:!0}),ge=l(ue,"META",{property:!0,content:!0}),q=l(ue,"META",{property:!0,content:!0}),C=l(ue,"META",{name:!0,content:!0}),de=l(ue,"META",{name:!0,content:!0}),E=l(ue,"META",{name:!0,content:!0}),S=l(ue,"META",{name:!0,content:!0}),N=l(ue,"META",{name:!0,content:!0}),Le=l(ue,"META",{name:!0,content:!0}),x=l(ue,"META",{name:!0,content:!0}),A&&A.l(ue),ye=Wn(),ue.forEach(e),this.h()},h(){d(f,"name","description"),d(f,"content",p=m[1].description),d(h,"name","keywords"),d(h,"content",s=m[1].keywords),d(u,"name","author"),d(u,"content",c=m[1].author),d(he,"rel","canonical"),d(he,"href",m[3]),d(O,"rel","alternate"),d(O,"type","application/rss+xml"),d(O,"title","Spyder's Blog"),d(O,"href",an+Gn+"/feed.xml"),d(b,"property","og:type"),d(b,"content","website"),d(xe,"property","og:url"),d(xe,"content",m[3]),d(U,"property","og:title"),d(U,"content",k=m[1].title),d(we,"property","og:description"),d(we,"content",j=m[1].description),d(_,"property","og:image"),d(_,"content",pe=m[1].image),d(ee,"property","og:image:secure_url"),d(ee,"content",P=m[1].image),d(ge,"property","og:locale"),d(ge,"content","en_US"),d(q,"property","og:site_name"),d(q,"content","Spyder IDE"),d(C,"name","twitter:card"),d(C,"content","summary_large_image"),d(de,"name","twitter:site"),d(de,"content",m[2]),d(E,"name","twitter:creator"),d(E,"content",m[2]),d(S,"name","twitter:title"),d(S,"content",He=m[1].title),d(N,"name","twitter:description"),d(N,"content",M=m[1].description),d(Le,"name","twitter:image"),d(Le,"content",I=m[1].image),d(x,"name","twitter:image:alt"),d(x,"content",Te=m[1].title)},m(Ee,ue){mt(document.head,f),mt(document.head,h),mt(document.head,u),mt(document.head,he),mt(document.head,O),mt(document.head,b),mt(document.head,xe),mt(document.head,U),mt(document.head,we),mt(document.head,_),mt(document.head,ee),mt(document.head,ge),mt(document.head,q),mt(document.head,C),mt(document.head,de),mt(document.head,E),mt(document.head,S),mt(document.head,N),mt(document.head,Le),mt(document.head,x),A&&A.m(document.head,null),mt(document.head,ye)},p(Ee,[ue]){ue&2&&n!==(n=Ee[1].title)&&(document.title=n),ue&2&&p!==(p=Ee[1].description)&&d(f,"content",p),ue&2&&s!==(s=Ee[1].keywords)&&d(h,"content",s),ue&2&&c!==(c=Ee[1].author)&&d(u,"content",c),ue&2&&k!==(k=Ee[1].title)&&d(U,"content",k),ue&2&&j!==(j=Ee[1].description)&&d(we,"content",j),ue&2&&pe!==(pe=Ee[1].image)&&d(_,"content",pe),ue&2&&P!==(P=Ee[1].image)&&d(ee,"content",P),ue&2&&He!==(He=Ee[1].title)&&d(S,"content",He),ue&2&&M!==(M=Ee[1].description)&&d(N,"content",M),ue&2&&I!==(I=Ee[1].image)&&d(Le,"content",I),ue&2&&Te!==(Te=Ee[1].title)&&d(x,"content",Te),Ee[0]?A||(A=Nn(),A.c(),A.m(ye.parentNode,ye)):A&&(A.d(1),A=null)},i:bt,o:bt,d(Ee){e(f),e(h),e(u),e(he),e(O),e(b),e(xe),e(U),e(we),e(_),e(ee),e(ge),e(q),e(C),e(de),e(E),e(S),e(N),e(Le),e(x),A&&A.d(Ee),e(ye)}}}function vo(m,n,f){let p;Zn(m,Xn,c=>f(1,p=c));const h=`@${wo.twitter.split("/").pop()}`,s=p.url.replace(/\/+$/,"");let{prism:u=!1}=n;return m.$$set=c=>{"prism"in c&&f(0,u=c.prism)},[u,p,h,s]}class bo extends kt{constructor(n){super(),_t(this,n,vo,go,xt,{prism:0})}}function Bn(m,n,f){const p=m.slice();return p[2]=n[f],p}function Qn(m){let n,f,p;return{c(){n=o("img"),this.h()},l(h){n=l(h,"IMG",{class:!0,src:!0,alt:!0}),this.h()},h(){d(n,"class","w-24 h-24 rounded-full object-cover"),$e(n.src,f=m[2].src)||d(n,"src",f),d(n,"alt",p=m[2].name)},m(h,s){t(h,n,s)},p(h,s){s&8&&!$e(n.src,f=h[2].src)&&d(n,"src",f),s&8&&p!==(p=h[2].name)&&d(n,"alt",p)},d(h){h&&e(n)}}}function Jn(m){let n,f,p,h=m[2].name+"",s,u,c=m[2].src&&Qn(m);return{c(){n=o("div"),c&&c.c(),f=i(),p=o("div"),s=sn(h),u=i(),this.h()},l(he){n=l(he,"DIV",{class:!0});var O=Gt(n);c&&c.l(O),f=a(O),p=l(O,"DIV",{class:!0});var b=Gt(p);s=rn(b,h),b.forEach(e),u=a(O),O.forEach(e),this.h()},h(){d(p,"class","font-light text-center w-36"),d(n,"class","flex flex-col items-center gap-2")},m(he,O){t(he,n,O),c&&c.m(n,null),mt(n,f),mt(n,p),mt(p,s),mt(n,u)},p(he,O){he[2].src?c?c.p(he,O):(c=Qn(he),c.c(),c.m(n,f)):c&&(c.d(1),c=null),O&8&&h!==(h=he[2].name+"")&&un(s,h)},d(he){he&&e(n),c&&c.d()}}}function xo(m){let n,f,p,h,s,u,c,he,O=Kn(m[1])+"",b,xe,U,k,we,j,_;n=new bo({props:{prism:!0}});let pe=Rn(m[3]),ee=[];for(let q=0;q<pe.length;q+=1)ee[q]=Jn(Bn(m,pe,q));const P=m[11].default,ge=eo(P,m,m[10],null);return{c(){St(n.$$.fragment),f=i(),p=o("article"),h=o("div"),s=o("h1"),u=sn(m[0]),c=i(),he=o("div"),b=sn(O),xe=i(),U=o("div"),k=o("div");for(let q=0;q<ee.length;q+=1)ee[q].c();we=i(),j=o("div"),ge&&ge.c(),this.h()},l(q){Tt(n.$$.fragment,q),f=a(q),p=l(q,"ARTICLE",{class:!0});var C=Gt(p);h=l(C,"DIV",{class:!0});var de=Gt(h);s=l(de,"H1",{class:!0});var E=Gt(s);u=rn(E,m[0]),E.forEach(e),c=a(de),he=l(de,"DIV",{class:!0});var S=Gt(he);b=rn(S,O),S.forEach(e),xe=a(de),U=l(de,"DIV",{class:!0});var He=Gt(U);k=l(He,"DIV",{class:!0});var N=Gt(k);for(let Le=0;Le<ee.length;Le+=1)ee[Le].l(N);N.forEach(e),He.forEach(e),de.forEach(e),we=a(C),j=l(C,"DIV",{class:!0});var M=Gt(j);ge&&ge.l(M),M.forEach(e),C.forEach(e),this.h()},h(){d(s,"class","text-2xl md:text-4xl lg:tracking-tight xl:text-6xl text-center font-light md:font-extralight tracking-tight text-balance text-mine-shaft-600 dark:text-mine-shaft-200"),d(he,"class","text-neutral-500 text-center text-xl mt-4"),d(k,"class","flex gap-8"),d(U,"class","max-w-[72ch] mx-auto flex flex-col items-center gap-4 mt-20"),d(h,"class","my-20 xl:mt-32 xl:mb-20"),d(j,"class","prose prose-lg prose-headings:text-red-berry-900 dark:prose-headings:text-mine-shaft-200 dark:prose-invert prose-headings:font-medium prose-p:font-light prose-p:text-pretty prose-li:font-light max-w-[72ch] mx-auto"),d(p,"class","container")},m(q,C){Pt(n,q,C),t(q,f,C),t(q,p,C),mt(p,h),mt(h,s),mt(s,u),mt(h,c),mt(h,he),mt(he,b),mt(h,xe),mt(h,U),mt(U,k);for(let de=0;de<ee.length;de+=1)ee[de]&&ee[de].m(k,null);mt(p,we),mt(p,j),ge&&ge.m(j,null),_=!0},p(q,[C]){if((!_||C&1)&&un(u,q[0]),(!_||C&2)&&O!==(O=Kn(q[1])+"")&&un(b,O),C&8){pe=Rn(q[3]);let de;for(de=0;de<pe.length;de+=1){const E=Bn(q,pe,de);ee[de]?ee[de].p(E,C):(ee[de]=Jn(E),ee[de].c(),ee[de].m(k,null))}for(;de<ee.length;de+=1)ee[de].d(1);ee.length=pe.length}ge&&ge.p&&(!_||C&1024)&&to(ge,P,q,q[10],_?oo(P,q[10],C,null):no(q[10]),null)},i(q){_||(gt(n.$$.fragment,q),gt(ge,q),_=!0)},o(q){wt(n.$$.fragment,q),wt(ge,q),_=!1},d(q){q&&(e(f),e(p)),Mt(n,q),ao(ee,q),ge&&ge.d(q)}}}function ko(m,n,f){let p;Zn(m,so,pe=>f(9,p=pe));let{$$slots:h={},$$scope:s}=n,{data:u}=n,{form:c}=n,{title:he}=n,{pub_date:O}=n,{author:b}=n,{tags:xe}=n,{category:U}=n,{summary:k}=n,we=[];const j=p.url.pathname.replace(`/${Gn}`,"").replaceAll("/",""),_=`${an}assets/${mo}/${j}.png`;return lo(async()=>{const pe=Array.isArray(b)?b:b?[b]:[];f(3,we=await na(pe))}),m.$$set=pe=>{"data"in pe&&f(4,u=pe.data),"form"in pe&&f(5,c=pe.form),"title"in pe&&f(0,he=pe.title),"pub_date"in pe&&f(1,O=pe.pub_date),"author"in pe&&f(2,b=pe.author),"tags"in pe&&f(6,xe=pe.tags),"category"in pe&&f(7,U=pe.category),"summary"in pe&&f(8,k=pe.summary),"$$scope"in pe&&f(10,s=pe.$$scope)},m.$$.update=()=>{m.$$.dirty&973&&Xn.setMetadata({title:`${ho} | ${he}`,description:k,keywords:`${xe}, ${U}`,author:we.map(pe=>pe.name).join(", ")||b||"",url:p.url.href,image:_||yo})},[he,O,b,we,u,c,xe,U,k,p,s,h]}class It extends kt{constructor(n){super(),_t(this,n,ko,xo,xt,{data:4,form:5,title:0,pub_date:1,author:2,tags:6,category:7,summary:8})}}function _o(m){let n,f=`<a href="https://www.stxnext.com" rel="nofollow" class="link">STX Next</a>, one of Europe’s largest Python development companies, has shared with us how Spyder has been a powerful tool for them when performing data analysis.
It is a pleasure for us on the Spyder team to work every day to improve the workflow of developers, scientists, engineers and data analysts.
We are very glad to receive and share a STX Next testimonial about Spyder, along with an interview with one of their developers, <a href="https://github.com/Michael-Wisniewski" rel="nofollow" class="link">Michael Wiśniewski</a>, who has found Spyder very useful in his job.`,p,h,s,u,c,he="What Michael Wiśniewski says about Spyder",O,b,xe=`In an era of a continuously growing demand for analysis of vast amounts of data, we are facing increasingly complex tasks to perform.
Sure, we are not alone—there are many great tools designed for scientists and data analysts.
We have NumPy, SciPy, Matplotlib, Pandas, and others.
But, wouldn’t it be nice to have one extra tool that could combine all the required packages into one compact working environment? Asking this question is precisely how my journey with Spyder began.`,U,k,we=`In my opinion, Spyder is the go-to-solution that helps to speed up the data analysis processes.
For me, the biggest strength of this IDE is that it has all the benefits of Matlab/RStudio and makes them available to the Pythonista community.
It provides us with an easy-to-organize workspace that accommodates code, visualizations and shell in just one window.
Besides, the pane called variable explorer allows direct access to all data placed in the memory.`,j,_,pe=`Another cool feature is the tool’s integration with Jupyter notebooks.
Just open and browse different notebooks without thinking about server-side and file paths.
Want to run a single line of code or quickly check a chart update? IPython is on board and ready by default.`,ee,P,ge="Michael Wiśniewski’s interview",q,C,de,E,S,He=`<em>I’m Michael Wiśniewski and I’ve been working at STX Next as a full-stack developer for over a year.
During this time, I was involved in various projects from many different areas—from typical web applications where I used Python and JavaScript to implementing ML solutions for image recognition on the nVidia Jetson platform.
After hours, my colleagues and I run a machine learning community of practice. Today, I’d like to share my thoughts on using Spyder.</em>`,N,M,Le="<em>How long have you been using Spyder?</em>",I,x,Te="I discovered Spyder around a year ago, at the time it was transitioning from version 3 to the current one.",ye,A,Ee="<em>How many people in your company use Spyder?</em>",ue,Z,We=`In my department, three of my colleagues use Spyder on a daily basis.
Some of them use it for commercial projects, while others use it for personal research.
The number is growing, since most people try Spyder out after their first contact with it.`,te,F,Re="<em>What kind of projects have you done using Spyder?</em>",Y,G,Be=`I’ve found applications for Spyder in many different areas.
One time, I used it for a project that relied on machine learning algorithms to assess risk based on documents provided by a user.
Since Spyder aggregates out-of-the-box the most <a href="https://www.stxnext.com/blog/most-popular-python-scientific-libraries/" rel="nofollow" class="link">popular scientific Python packages</a>, it was used during the whole development process, from data pre-processing and visualization to assessment of the final solution.`,ke,re,Ve=`Another time, Spyder proved to be very helpful in a project involving the analysis of ancient religious texts.
The task was to create a script that would check file integrity and the correctness of the texts themselves.
Because of the large size of the data sets, the script had to be efficient and able to handle a lot of edge cases.
A built-in ipdb debugger and script profiler (together with the Spyder-memory-profiler plugin) was very helpful in achieving this goal.`,_e,ie,Qe=`To me, this IDE is also a great tool for conducting workshops.
The ability to discuss algorithms while visualizing their results in a separate plot panel, without the need to switch windows, greatly facilitates presentations.`,Ce,ae,Je="<em>What are the Spyder features that you like the most?</em>",T,H,Ye=`One of my personal favorites is the Variable Explorer and its integration withJupyter notebooks through the Spyder-notebook plugin.
I also greatly appreciate the way that plugin automatically handles Jupyter server management.`,X,Q,tt="Integration with Kite is also a great feature that makes it easier to use dozens of packages without the need to memorize all their methods and dependencies.",ne,oe,nt="I also highly enjoy the ability to manage Spyder’s window layouts, especially when using large/many displays.",Ge,me,ot="<em>How does Spyder make your workflow better?</em>",qe,fe,lt=`The possibility to work on code, track its performance, debug it, and analyze visualized data at the same time is invaluable.
It saves time and helps me to stay focused longer.`,J,le,it=`The great thing about Spyder is that it allows you to compare several solutions side by side.
We can easily test several sets of given parameter values and examine how that affects a given function by observing charts.`,Oe,ve,at=`Interactive window tools often simplify and speed up code analysis.
For example, checking class inheritance via the new object explorer is clearer and immediately gives more information than when doing it through the editor.`,Ue,be,st="<em>What features would you like to see in the future in Spyder?</em>",W,se,rt=`Possibly further integration with Git services would be a good idea.
Personally, I like to use Git directly from the Spyder-terminal plugin together with the Gitk repository browser.
However, many users prefer to have some features like comparing file versions, conflict solving, and auto update changes to the repository built into the IDE.`,v,L,pt="Closing remarks",Xe,De,ht=`We would like to thank Michael Wiśniewski, Milosz Galganek and all the STX Next team for sharing their experiences with Spyder.
It is very important for us to provide a scientific tool that can make a positive impact on the amazing work our users are doing, and Michael’s testimony gives us great insight on how Spyder is making a difference in the real world and how to make it better for the future.`,et,Fe,ut=`If you have your own stories about how Spyder is helping you with a cool programming project, conduct critical scientific research, or use data to improve your community, we’d love to feature it here!
Feel free to reach out to us on <a href="https://github.com/spyder-ide/spyder" rel="nofollow" class="link">Github</a>, <a href="https://gitter.im/spyder-ide/public" rel="nofollow" class="link">Gitter</a>, <a href="https://twitter.com/spyder_ide" rel="nofollow" class="link">Twitter</a>, <a href="https://www.facebook.com/SpyderIDE/" rel="nofollow" class="link">Facebook</a> or our other platforms linked below if you’re interested.
We’re looking forward to hearing about what Spyder means to you! Happy Spydering!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("img"),u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("h2"),P.textContent=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.innerHTML=He,N=i(),M=o("h3"),M.innerHTML=Le,I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("h3"),A.innerHTML=Ee,ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("h3"),F.innerHTML=Re,Y=i(),G=o("p"),G.innerHTML=Be,ke=i(),re=o("p"),re.textContent=Ve,_e=i(),ie=o("p"),ie.textContent=Qe,Ce=i(),ae=o("h3"),ae.innerHTML=Je,T=i(),H=o("p"),H.textContent=Ye,X=i(),Q=o("p"),Q.textContent=tt,ne=i(),oe=o("p"),oe.textContent=nt,Ge=i(),me=o("h3"),me.innerHTML=ot,qe=i(),fe=o("p"),fe.textContent=lt,J=i(),le=o("p"),le.textContent=it,Oe=i(),ve=o("p"),ve.textContent=at,Ue=i(),be=o("h3"),be.innerHTML=st,W=i(),se=o("p"),se.textContent=rt,v=i(),L=o("h2"),L.textContent=pt,Xe=i(),De=o("p"),De.textContent=ht,et=i(),Fe=o("p"),Fe.innerHTML=ut,this.h()},l(g){n=l(g,"P",{"data-svelte-h":!0}),r(n)!=="svelte-kews3d"&&(n.innerHTML=f),p=a(g),h=l(g,"IMG",{src:!0,alt:!0}),u=a(g),c=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-fds9bo"&&(c.textContent=he),O=a(g),b=l(g,"P",{"data-svelte-h":!0}),r(b)!=="svelte-tls944"&&(b.textContent=xe),U=a(g),k=l(g,"P",{"data-svelte-h":!0}),r(k)!=="svelte-11gdkg3"&&(k.textContent=we),j=a(g),_=l(g,"P",{"data-svelte-h":!0}),r(_)!=="svelte-f7p1p0"&&(_.textContent=pe),ee=a(g),P=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-tyqqpr"&&(P.textContent=ge),q=a(g),C=l(g,"IMG",{src:!0,alt:!0,style:!0}),E=a(g),S=l(g,"P",{"data-svelte-h":!0}),r(S)!=="svelte-r3tlcv"&&(S.innerHTML=He),N=a(g),M=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-1u0qnka"&&(M.innerHTML=Le),I=a(g),x=l(g,"P",{"data-svelte-h":!0}),r(x)!=="svelte-kb9g40"&&(x.textContent=Te),ye=a(g),A=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-3h0xdv"&&(A.innerHTML=Ee),ue=a(g),Z=l(g,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1ftru3t"&&(Z.textContent=We),te=a(g),F=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(F)!=="svelte-qx6ucj"&&(F.innerHTML=Re),Y=a(g),G=l(g,"P",{"data-svelte-h":!0}),r(G)!=="svelte-fxaik2"&&(G.innerHTML=Be),ke=a(g),re=l(g,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1nrra0"&&(re.textContent=Ve),_e=a(g),ie=l(g,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-zabeqe"&&(ie.textContent=Qe),Ce=a(g),ae=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(ae)!=="svelte-15n1h4"&&(ae.innerHTML=Je),T=a(g),H=l(g,"P",{"data-svelte-h":!0}),r(H)!=="svelte-18chqp3"&&(H.textContent=Ye),X=a(g),Q=l(g,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1govvtq"&&(Q.textContent=tt),ne=a(g),oe=l(g,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1gpnatq"&&(oe.textContent=nt),Ge=a(g),me=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(me)!=="svelte-t88324"&&(me.innerHTML=ot),qe=a(g),fe=l(g,"P",{"data-svelte-h":!0}),r(fe)!=="svelte-ql0rbr"&&(fe.textContent=lt),J=a(g),le=l(g,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1g3s3gx"&&(le.textContent=it),Oe=a(g),ve=l(g,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-xt4eh4"&&(ve.textContent=at),Ue=a(g),be=l(g,"H3",{class:!0,"data-svelte-h":!0}),r(be)!=="svelte-of4y7"&&(be.innerHTML=st),W=a(g),se=l(g,"P",{"data-svelte-h":!0}),r(se)!=="svelte-yme7yj"&&(se.textContent=rt),v=a(g),L=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(L)!=="svelte-1mvchr8"&&(L.textContent=pt),Xe=a(g),De=l(g,"P",{"data-svelte-h":!0}),r(De)!=="svelte-p7lgn8"&&(De.textContent=ht),et=a(g),Fe=l(g,"P",{"data-svelte-h":!0}),r(Fe)!=="svelte-iukeoi"&&(Fe.innerHTML=ut),this.h()},h(){$e(h.src,s="stxnext.jpg")||d(h,"src",s),d(h,"alt","The Company"),d(c,"class","section"),d(P,"class","section"),$e(C.src,de="profile.png")||d(C,"src",de),d(C,"alt","Michael Wiśniewski"),ln(C,"margin-top","0.5em"),ln(C,"width","200px"),ln(C,"margin-right","1em"),ln(C,"float","left"),d(M,"class","subsection"),d(A,"class","subsection"),d(F,"class","subsection"),d(ae,"class","subsection"),d(me,"class","subsection"),d(be,"class","subsection"),d(L,"class","section")},m(g,z){t(g,n,z),t(g,p,z),t(g,h,z),t(g,u,z),t(g,c,z),t(g,O,z),t(g,b,z),t(g,U,z),t(g,k,z),t(g,j,z),t(g,_,z),t(g,ee,z),t(g,P,z),t(g,q,z),t(g,C,z),t(g,E,z),t(g,S,z),t(g,N,z),t(g,M,z),t(g,I,z),t(g,x,z),t(g,ye,z),t(g,A,z),t(g,ue,z),t(g,Z,z),t(g,te,z),t(g,F,z),t(g,Y,z),t(g,G,z),t(g,ke,z),t(g,re,z),t(g,_e,z),t(g,ie,z),t(g,Ce,z),t(g,ae,z),t(g,T,z),t(g,H,z),t(g,X,z),t(g,Q,z),t(g,ne,z),t(g,oe,z),t(g,Ge,z),t(g,me,z),t(g,qe,z),t(g,fe,z),t(g,J,z),t(g,le,z),t(g,Oe,z),t(g,ve,z),t(g,Ue,z),t(g,be,z),t(g,W,z),t(g,se,z),t(g,v,z),t(g,L,z),t(g,Xe,z),t(g,De,z),t(g,et,z),t(g,Fe,z)},p:bt,d(g){g&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe))}}}function Co(m){let n,f;const p=[m[0],dn];let h={$$slots:{default:[_o]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(dn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const dn={title:"STX Next, Python development company, uses Spyder to improve their workflow",author:"juanis2112",tags:"Spyder4",category:"Spyder",pub_date:"2020-07-25T00:00:00.000Z",summary:"STX Next, one of Europe's largest Python development companies, has shared with us how Spyder has been a powerful tool for them when performing data analysis. It is a pleasure for us on the Spyder team to work every day to improve the workflow of developers, scientists, engineers and data analysts. We are very glad to receive and share a STX Next testimonial about Spyder, along with an interview with one of their developers, Michael Wiśniewski, who has found Spyder very useful in his job."};function So(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let To=class extends kt{constructor(n){super(),_t(this,n,So,Co,xt,{})}};const Po=Object.freeze(Object.defineProperty({__proto__:null,default:To,metadata:dn},Symbol.toStringTag,{value:"Module"}));function Mo(m){let n,f=`For the last several years, Spyder has offered standalone installers for Windows and macOS which isolate Spyder’s runtime environment from users’ development environments.
This provides a more stable user experience than traditional conda or pip installation methods.
However, these standalone installers did not allow implementing desirable features, such as automatic incremental updates or installing external Spyder plugins like Spyder-Notebook and Spyder-Unittest.
Additionally, these standalone applications were limited to Windows and macOS.`,p,h,s=`Our new installers will provide a more consistent experience for users across all platforms, including Linux, while maintaining the benefits of an isolated runtime environment for Spyder.
Additionally, they are fully compatible with incremental updates and external plugin management.
Look for future announcements about these and other features!`,u,c,he=`So, what will you see with these new installers?
If you are a Windows user, you will continue to have a graphical interface guiding you through the installation process, and will likely not notice any difference from the previous experience.`,O,b,xe,U,k,we=`If you are a macOS user, you will now have a <code>.pkg</code> package installer instead of a <code>.dmg</code> disk image.
Rather than drag-and-drop the application to the <code>Applications</code> folder, the <code>.pkg</code> installer provides a graphical interface that will guide you through the installation process with more flexibility.`,j,_,pe,ee,P,ge=`If you are a Linux user, you will have an interactive shell script guiding you through the installation process.
This ensures it is compatible with as many distributions and desktop environments as possible.`,q,C,de,E,S,He=`In all cases, you will not need to have Anaconda installed, nor do you need an existing Python environment; in fact, you don’t even need a preexisting Python installation!
These installers are completely self-contained.
Spyder will continue to include popular packages such as NumPy, SciPy, Pandas and Matplotlib so you can start coding out-of-the-box.
However, you will still be able to use Spyder with your existing conda, venv, Python.org, and other Python installers and environments as before.
Furthermore, only Spyder and its critical dependencies will be updated on each new release, which will make getting the latest version a lean and frictionless process.`,N,M,Le="The Spyder team is really excited about these new installers and the new features they will make possible, and we hope you enjoy them too!";return{c(){n=o("p"),n.textContent=f,p=i(),h=o("p"),h.textContent=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("img"),U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("img"),ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.textContent=Le,this.h()},l(I){n=l(I,"P",{"data-svelte-h":!0}),r(n)!=="svelte-17k8m9n"&&(n.textContent=f),p=a(I),h=l(I,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1xb2iod"&&(h.textContent=s),u=a(I),c=l(I,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1hp8xla"&&(c.textContent=he),O=a(I),b=l(I,"IMG",{src:!0,alt:!0}),U=a(I),k=l(I,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1gj7hcv"&&(k.innerHTML=we),j=a(I),_=l(I,"IMG",{src:!0,alt:!0}),ee=a(I),P=l(I,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1rk3wa0"&&(P.textContent=ge),q=a(I),C=l(I,"IMG",{src:!0,alt:!0}),E=a(I),S=l(I,"P",{"data-svelte-h":!0}),r(S)!=="svelte-d1uzh2"&&(S.textContent=He),N=a(I),M=l(I,"P",{"data-svelte-h":!0}),r(M)!=="svelte-6951fz"&&(M.textContent=Le),this.h()},h(){$e(b.src,xe="windows.png")||d(b,"src",xe),d(b,"alt","Windows installer"),$e(_.src,pe="macos.png")||d(_,"src",pe),d(_,"alt","macOS installer"),$e(C.src,de="linux.png")||d(C,"src",de),d(C,"alt","Linux installer")},m(I,x){t(I,n,x),t(I,p,x),t(I,h,x),t(I,u,x),t(I,c,x),t(I,O,x),t(I,b,x),t(I,U,x),t(I,k,x),t(I,j,x),t(I,_,x),t(I,ee,x),t(I,P,x),t(I,q,x),t(I,C,x),t(I,E,x),t(I,S,x),t(I,N,x),t(I,M,x)},p:bt,d(I){I&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M))}}}function Ho(m){let n,f;const p=[m[0],hn];let h={$$slots:{default:[Mo]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(hn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const hn={title:"Spyder 6 will get a new installer for all platforms and a standalone application for Linux!",author:"mrclary",pub_date:"2024-04-11T00:00:00.000Z",category:"Announcement",tags:"milestone, new-feature, installers",summary:"Spyder 6 will introduce new conda-based installers for Windows, macOS, and Linux. While Windows and macOS have had installers for some time, this new development will provide a more consistent and reliable user experience across all platforms, including Linux. Additionally, the new installers lay the foundation for several exciting new Spyder features."};function Io(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Lo=class extends kt{constructor(n){super(),_t(this,n,Io,Ho,xt,{})}};const jo=Object.freeze(Object.defineProperty({__proto__:null,default:Lo,metadata:hn},Symbol.toStringTag,{value:"Module"}));function $o(m){let n,f=`During the last few years, Spyder has positioned itself as a popular data science IDE by combining interactive computing and ease of use with robust programming tools.
However, limited remote development support compared to some other IDEs has hindered adoption, as many users would like to work with data and code on high performance computing (HPC) clusters or cloud providers like AWS, GCP or DigitalOcean while developing on their personal computers. Adding such features would open up many new research possibilities by enabling the scientific community to tackle data and compute-intensive programming tasks from the ease and efficiency of their local development environments. Thanks to a two-year grant from the <a href="https://chanzuckerberg.com/" rel="nofollow" class="link">Chan Zuckerberg Initiative</a>, we will be now able to address this shortcoming.`,p,h,s=`Right now, users have two main options to work remotely using a local IDE (aside from a purely web browser-based approach, which is sometimes not available or desirable):
They can either edit and execute their files in a terminal, which is not user-friendly; or start their IDE on the server and display it locally, which is typically slow, resource-intensive and difficult to set up. Furthermore, scientists typically find it difficult to sync remote files to the local machine and version control their code on the remote one, so remote changes are often lost, out of sync or difficult to integrate with code developed locally.`,u,c,he=`To address this situation, we will add and enhance support for local Spyder installations to run code and sync files on remote servers and clusters.
The first step in that direction is to enhance the existing remote code execution features in Spyder, as the current workflow is error-prone and quite cumbersome.
It requires users to install the Spyder-Kernels package on the remote machine, manually start a kernel on it and provide the kernel connection file to the local machine.`,O,b,xe,U,k,we="Since Spyder does not currently have a way to identify and store state changes, users currently have to repeat this costly setup process if there are any configuration modifications on the remote machine. Our plan is to fully automate this procedure so that Spyder can start and connect to a remote kernel automatically, with the user only needing to provide their SSH credentials and specify the Python environment they want to use.",j,_,pe='After that is implemented, we will add support to create and manage remote Python environments, explore the remote filesystem in the <a href="https://docs.spyder-ide.org/current/panes/fileexplorer.html" rel="nofollow" class="link">Files pane</a>, and edit remote files in the <a href="https://docs.spyder-ide.org/current/panes/editor.html" rel="nofollow" class="link">Editor</a>. This will make most of the core Spyder functionality work when developing code remotely. In addition, users will be able to easily start system shells connected to the server once we implement that capability in <a href="https://github.com/spyder-ide/spyder-terminal" rel="nofollow" class="link">Spyder-Terminal</a>. This will allow the remote execution of any operating system-level command or program, such as Git commit and push instructions.',ee,P,ge='Finally, we want to announce that we’re hiring for this project! We are looking for a Python developer with solid networking knowledge to help us implement the backend infrastructure that will power the features described above. This is a part time position to work as a contractor through <a href="https://numfocus.org/" rel="nofollow" class="link">NumFOCUS</a>; it does not require experience with PyQt (although some would be beneficial) and it lasts until the end of the year, with the possibility to renew the contract for the next. Interested? <a href="mailto:ccordoba12@gmail.com" class="link">Contact me</a> to talk more about it!',q,C,de="We hope you will be as thrilled as we are by this fantastic news, and are looking forward to sharing more with you on this project in the near future!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.textContent=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("img"),U=i(),k=o("p"),k.textContent=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("p"),C.textContent=de,this.h()},l(E){n=l(E,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1g1hb0u"&&(n.innerHTML=f),p=a(E),h=l(E,"P",{"data-svelte-h":!0}),r(h)!=="svelte-17bxxnw"&&(h.textContent=s),u=a(E),c=l(E,"P",{"data-svelte-h":!0}),r(c)!=="svelte-5icbhl"&&(c.textContent=he),O=a(E),b=l(E,"IMG",{src:!0,alt:!0}),U=a(E),k=l(E,"P",{"data-svelte-h":!0}),r(k)!=="svelte-11hbk73"&&(k.textContent=we),j=a(E),_=l(E,"P",{"data-svelte-h":!0}),r(_)!=="svelte-16qirh4"&&(_.innerHTML=pe),ee=a(E),P=l(E,"P",{"data-svelte-h":!0}),r(P)!=="svelte-dehezw"&&(P.innerHTML=ge),q=a(E),C=l(E,"P",{"data-svelte-h":!0}),r(C)!=="svelte-17tyvcv"&&(C.textContent=de),this.h()},h(){$e(b.src,xe="remote-kernel-connection.png")||d(b,"src",xe),d(b,"alt","Dialog to create a connection to a remote kernel")},m(E,S){t(E,n,S),t(E,p,S),t(E,h,S),t(E,u,S),t(E,c,S),t(E,O,S),t(E,b,S),t(E,U,S),t(E,k,S),t(E,j,S),t(E,_,S),t(E,ee,S),t(E,P,S),t(E,q,S),t(E,C,S)},p:bt,d(E){E&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C))}}}function Eo(m){let n,f;const p=[m[0],pn];let h={$$slots:{default:[$o]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(pn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const pn={title:"Spyder gets CZI grant to add remote development features, and a new job opening!",author:"ccordoba12",pub_date:"2023-06-08T00:00:00.000Z",category:"Announcement",tags:"grant",summary:"Spyder has received a two-year grant from the Chan Zuckerberg Initiative to add remote development capabilities to our beloved IDE. This means you'll be able to easily take advantage of the vast resources offered by HPC clusters or the cloud to execute your code, while working from the comfort of your personal computer. And if you're interested in helping us implement that, we may have just the job opportunity for you!"};function Ao(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let zo=class extends kt{constructor(n){super(),_t(this,n,Ao,Eo,xt,{})}};const Do=Object.freeze(Object.defineProperty({__proto__:null,default:zo,metadata:pn},Symbol.toStringTag,{value:"Module"}));function Fo(m){let n,f,p,h,s=`The Spyder team hosted a Birds of a Feather (BoF) session, <a href="https://cfp.scipy.org/2024/talk/VWMV7B/" rel="nofollow" class="link">What do you want to see from your scientific IDE?</a>, at <a href="https://www.scipy2024.scipy.org/" rel="nofollow" class="link">SciPy 2024</a>.
The focus was on users’ experiences, both positive and negative, with IDEs and other scientific interfaces, and how their developers (like us) can make them better for everyone.
We along with the community recorded <a href="https://hackmd.io/@CAM-Gerlach/Scipy-2024-IDE-BoF" rel="nofollow" class="link">collaborative notes from the meeting</a>, which you’re welcome to check out for the full details!
Here, we’ll focus on summarizing the points raised at the session and our insights from them.`,u,c,he=`Around 40 people attended, comprising a diverse mix between interface/IDE developers, users and external stakeholders.
In a brief, informal survey of the room, many hands went up when asked how many people used VSCode, and about as many for Jupyter. Perhaps a half dozen to a dozen identified as Spyder users, and a handful mentioned other IDEs and platforms, such as RStudio, PyCharm and Emacs.`,O,b,xe=`In addition to myself, attending the session we had <a href="https://pierreraybaut.github.io/" rel="nofollow" class="link">Pierre Raybaut</a>, the original creator of Spyder (who also gave a great <a href="https://www.youtube.com/watch?v=MKPUuV1LEqk" rel="nofollow" class="link">talk on Spyder’s history and his current work</a>), as well as another former Spyder developer.
What’s more, to our delight there were also multiple representatives from both <a href="https://posit.co/" rel="nofollow" class="link">Posit/RStudio</a> and <a href="https://jupyter.org/" rel="nofollow" class="link">Jupyter</a>, perhaps the two other best known and most used interfaces aimed specifically at scientists and engineers.
We were hoping to have the discussion focus more broadly on many different IDEs and tools and to have leaders from other communities present to give their input as well, and it certainly did not disappoint.`,U,k,we="Generative AI in scientific research",j,_,pe="Unsurprisingly given its recent surge in popularity in the programming world, generative AI, the challenges it faces and how and whether IDEs should offer it was a popular topic of discussion.",ee,P,ge=`Participants empathized that scientific coding is different from other forms of programming, and that the “Copilots of the world” may not help with the former.
Indeed, they would not necessarily be expected to assist with properly designing valid digital experiments, correctly implementing appropriate scientific algorithms, ensuring the analysis techniques used are valid for the data, and choosing appropriate metrics and statistics to  interpret the results.
Rather, unless both specifically trained and high performing in these tasks, they may lull newer students or even veteran PIs into a false sense of security in code that ultimately outputs subtly invalid results, feeding the present reproducibility crisis.`,q,C,de=`Attendees also commented that LLMs, particularly general-purpose examples like ChatGPT, generated code that breaks “a lot” when actually used.
This has also been the author’s experience, particularly with systems not specialized in actually generating correct, best-practice code, and is also supported by research in the literature.
In response to the question one participant posed to the room, as to whether there are any LLMs that work well out of the box for scientific programming, only silence was the answer.`,E,S,He=`However, it was also mentioned that specialized systems can be quite helpful, with a particularly high amount of interest in GitHub Copilot.
We mentioned that we are currently working with GitHub and others about a potential optional integration in Spyder, specialized for scientific tasks.`,N,M,Le=`One participant shared that their large scientific organization was very reticent to use Jupyter AI because it was effectively a blackbox, and they needed to be able to show where their code comes from.
They expressed the desire for an AI that generates citations, to help address this issue.
Responding to their question of whether others were interested in the same, attendees stated that they’d still need to go and verify the generated citation, and were unsure it would save them much time overall.
Another participant added that more so than citations for code, the most important thing AI would help with is tests that verify that the code does what it is supposed to do.
Others agreed, saying that AI tend to do much better iterating on existing code than writing brand new code, and recommended that people try asking LLMs to write tests for existing code and examining the results.
They also found that AIs tend to do much better on code that has proper variable names and literate structure, which is certainly a benefit to everyone but very much not always found in scientific scripts.`,I,x,Te="Overall, attitudes in the room toward LLMs and generative AI varied quite a bit, but there was a general consensus that while scientists were open to considering the technology as an aid, it had to be reasonably correct and verifiable, which is a rather difficult challenge for the current AI state of the art.",ye,A,Ee="Interactive computation with diverse data types",ue,Z,We="Another common theme was a desire for scientific IDEs to allow users to visualize and interact with more of the diverse array of data types and structures used in scientific computation.",te,F,Re=`One participant in the geospatial field mentioned that interactivity with these data is limited with IDEs, and that they generally like notebooks but there are workflows where an IDE would be nice.
THey also expressed a desire for IDEs having native support for interactive map displays like in QGIS or ArcGIS rather than just static Matplolib images, which would make for more rapid prototyping.`,Y,G,Be=`Another attendee shared their focus on using dataframes and other rich data structures backed by a database instead of instead of just plain CSVs, asking if IDEs can add a “database browser” instead of just a way to view a single Pandas table.
They described how their data lives in databases, possibly remote or in the cloud, rather than flat files on their filesystem, and have made this the norm at their institution.
Their solution supports any database type that pandas does, with the simplest interface to it, so it feels like a CSV file, and would like IDEs to support that workflow.
In response, an audience member following on Slack mentioned that Ibis covers a lot of territory for exploring tabular data in many different data storage backends, and this might be a path to database exploration in IDEs.`,ke,re,Ve=`Other participants shared their challenges when debugging large datasets, saying this led to slow stepping through the code (of around 30 seconds per step) when a very large variable needs to be refetched at every step.
This, they related, resulted from a lack of a facility to do “lazy data loading” in Python; everything needs a wrapper.
They’d like to see a streaming wrapper plugin that data types can implement lazy loading in, which could be then used in all IDEs and notebooks.
In response, other attendees mentioned that the main challenge here was creating a way to indicate to consumers that data is expensive to generate a <code>repr</code>, which is where the costs really come in.`,_e,ie,Qe=`Finally, a PyCharm user shared how the xarray/pandas data types and their extension systems and data accessors were all opaque to that IDE’s autocomplete, at least without further tagging or augmentation in the IDE or the code.
They expressed that to address this, IDEs should be better aware of extensions such as these.
Others, including ourselves, mentioned in response that using customizable LSP servers can help make editors better aware of extensible syntaxes like this, which is indeed what Spyder and other IDEs do (and the Spyder team maintains the <a href="https://github.com/python-lsp/python-lsp-server" rel="nofollow" class="link">de-facto standard pluggable Python implementation of</a>).`,Ce,ae,Je="While user needs here varied, there was a clear theme that users greatly value being able to interactively view, edit and analyze a diverse array of data types right within their IDE, as Spyder continues to particularly focus on.",T,H,Ye="Desktop vs web-based IDEs",X,Q,tt="A popular point of discussion was the merits of desktop versus web-based interfaces and IDEs for science research, which saw some mixed opinions on the topic.",ne,oe,nt=`Posing the question directly, we asked people to share their opinions on a web-based vs. desktop applications, and on a true desktop programs versus those just with a webview as a UI.
One participant stated that a web browser can help them be effective for collaboration, but may not be as useful for single-user situations as a native application would be.
Another had concerns with the usability of Zoom screen sharing, as sharing a desktop application just shared that application, while sharing a web-based IDE shared the user’s entire web browser.
A third suggested <a href="https://vscode.dev/" rel="nofollow" class="link">vscode.dev</a>, which runs in a browser and which can be self-hosted, but stated that Python support is not “fully on par” with the desktop version.
A final point discussed was the possibility of running desktop IDEs inside a web-based container to improve security and ease of deployment, particularly using Python’s new WASM support.`,Ge,me,ot=`On a related note, an attendee shared that they support a small statistics group, and their biggest challenge is helping students learn scientific computing.
They have a rather “rugged individualist culture”, and feel they need to learn how to share knowledge with others, asking the audience how they could accomplish that with IDEs.
This prompted others to relate how, where they work, platforms for accessing data require a lot of authentication.
This entails using JupyterHub as their default IDE/platform, with very little flexibility in the matter.
They would like a platform for other IDEs to be able to connect to a shared JupyterHub environment, which is exactly what we are working on for Spyder 6.1 and beyond.`,qe,fe,lt="GPU compute integration",J,le,it=`One fairly specific topic that got a disproportionate amount of attention was incorporating better support for GPU computing (e.g. CUDA) within IDEs and interfaces, thanks to Nvidia representatives in the room posing the initial question.
They stated that Nvidia was “getting serious” about Python and CUDA, and they would love to “hear people’s gripes about developing GPU apps in Python, what tooling you use and what problems you face and how do you debug them”.
They also asked for people’s experiences working in Python together with native code (C++).`,Oe,ve,at=`Responding first to the question on native code, one participant described how they had to compile a Fortran module and import it from Python.
They just used <code>f2py</code> and the workflow was already in there and worked: they’d change the native code, recompile and rinse and repeat.
However, they said it would be nice to offer a workflow to shorten that development loop.
It was mentioned that this was particularly a problem with two separate codebases, where changes in one can affect the other, which is difficult to conceptualize and work with the coupling between them.
The Nvidia representatives then asked them how they would like to have a debugger with the ability to step into their code from Python to Fortran but still able to inspect your variables on the Python side, to which they replied “Sounds awesome!“.`,Ue,be,st=`Another attendee supervises a postdoc using a bunch of A100 GPUs, and asked the postdoc how he knew he was getting the most performance out of it.
The postdoc’s reply, which the attendee found rather telling, was that “PyTorch [just] runs”: it was painful enough for them to just get it running. so they were not particularly interested in spending even more time optimizing it further.
The participant now has new students doing JAX and expect the same thing to happen, since diving into hardware level optimization is something that students really won’t do and can be very intimidating.
They have students who don’t know how to use the 4 CPUs in their laptop, much less the GPUs in a supercomputer center.
When asked what they feel is the main problem causing this, such as documentation or tooling, the researcher replied it was courage on the student’s part to actually “go down there” and dig into the low-level code.
The postdoc clearly likes the platform and bought 40 new A100s, and is fine with the platform abstracting that for him.
However, the attendee expressed concern that this poses a real sociological challenge to get students used to using—much less optimizing—GPUs.`,W,se,rt=`Finally, it was asked what IDEs could do to make GPU workflows more convenient.
In reply, participants suggested better integration with NVSMI or an integrated dashboard of GPU usage, which would allow users to see that, for instance, a particular kernel crunching data is too big to use the full potential of the GPU.
The Nvidia folks mentioned that they do have a profiling tool that could potentially address some of those concerns, gives visibility on GPU utilization, bottlenecks and efficiency, and for interested folks to follow up with them directly.
In response to people asking about support for such tools in a VSCode extension, they shared that these tools have their own UI but could explore IDE integration.
They mentioned that tooling in Python tends to be “pretty thin” as users often don’t go looking for tools and use the ones that are there, whereas their profiler can be really intimidating and throws a lot of information at such users, potentially putting them off.`,v,L,pt=`All told, there was a surprising amount of interest and discussion around this once-niche topic, signaling that GPU computing has become something much closer to a mainstream need in the scientific space.
Thus, while the discussion is of course of most interest to GPU companies like Nvidia, it suggests an IDE plugin to support this profiling tooling and other GPU integration features might be of significant benefit to the wider user community.`,Xe,De,ht="Spyder feedback",et,Fe,ut=`While most of the discussion focused on topics applicable to broader categories of IDEs, there were a few specific bits of Spyder feedback.
In particular, attendees praised Spyder’s plotting functionality, though some expressed a preference for the non-default mode of displaying plots in separate windows over the Plots pane.
Others mentioned that the one killer feature for them that it was missing was multi-line editing, a common request over the years and something we plan to work on for forthcoming Spyder versions, along with support for collaborative editing.`,g,z,ct=`A particularly salient comment was one of the attendees’ request that “We need RStudio for Python”, with another replying that Spyder fills most of that gap.
Perhaps the main RStudio feature not built in is Quarto/RMarkdown, though we are currently exploring the possibility of helping develop a plugin supporting that.
Other comments, such as a desire for GitHub Copilot, better data exploration and visualization capabilities, and support for connecting to remote JupyterHub instances, are also features we already offer or are developing or exploring.`,dt,Ne,ft="Next steps",R,ce,yt=`Overall, the broader learnings gained here for IDE and interface developers were perhaps less in the detailed specifics of each comment, but rather the common themes users focused the most on.
Perhaps the least surprising was interest in generative AI, suggesting that IDE developers should continue to explore integration possibilities, but keeping a critical eye while doing so.
By contrast, the most surprising was the extensive discussion about GPU computing and how IDEs and tools can help with that, which seems to indicate that IDE plugins for assisting in this regard might be valuable.`,y,w,Ae=`Another area of user emphasis was the importance of interactive data exploration for a variety of formats and structures.
While a subset of such could be built into an IDE (as we have with Spyder’s Variable Explorer), given the diversity of scientific data types across fields this suggests the need for a more pluggable/extensible approach to variable exploration.
Finally, the consensus was unresolved on desktop versus web-based IDEs, though participants did identify a need for a common framework to connect local IDEs to remote platforms like JupyterHub.
To that end, we’re working to provide those facilities in Spyder 6.1, and could eventually be developed into such an common interface.`,vt,Ct,qt=`Thanks to everyone for attending and sharing such great ideas and insights, and we look forward to continuing to learn from the community and hear more in the future.
And until then, as always, happy Spydering!`;return{c(){n=o("img"),p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("h2"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.textContent=Le,I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("h2"),A.textContent=Ee,ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("p"),F.textContent=Re,Y=i(),G=o("p"),G.textContent=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("p"),ae.textContent=Je,T=i(),H=o("h2"),H.textContent=Ye,X=i(),Q=o("p"),Q.textContent=tt,ne=i(),oe=o("p"),oe.innerHTML=nt,Ge=i(),me=o("p"),me.textContent=ot,qe=i(),fe=o("h2"),fe.textContent=lt,J=i(),le=o("p"),le.textContent=it,Oe=i(),ve=o("p"),ve.innerHTML=at,Ue=i(),be=o("p"),be.textContent=st,W=i(),se=o("p"),se.textContent=rt,v=i(),L=o("p"),L.textContent=pt,Xe=i(),De=o("h2"),De.textContent=ht,et=i(),Fe=o("p"),Fe.textContent=ut,g=i(),z=o("p"),z.textContent=ct,dt=i(),Ne=o("h2"),Ne.textContent=ft,R=i(),ce=o("p"),ce.textContent=yt,y=i(),w=o("p"),w.textContent=Ae,vt=i(),Ct=o("p"),Ct.textContent=qt,this.h()},l(B){n=l(B,"IMG",{src:!0,alt:!0}),p=a(B),h=l(B,"P",{"data-svelte-h":!0}),r(h)!=="svelte-lu0ydx"&&(h.innerHTML=s),u=a(B),c=l(B,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1bc3olv"&&(c.textContent=he),O=a(B),b=l(B,"P",{"data-svelte-h":!0}),r(b)!=="svelte-3dovr9"&&(b.innerHTML=xe),U=a(B),k=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-eielu3"&&(k.textContent=we),j=a(B),_=l(B,"P",{"data-svelte-h":!0}),r(_)!=="svelte-n8xz0g"&&(_.textContent=pe),ee=a(B),P=l(B,"P",{"data-svelte-h":!0}),r(P)!=="svelte-16hm2os"&&(P.textContent=ge),q=a(B),C=l(B,"P",{"data-svelte-h":!0}),r(C)!=="svelte-blg16k"&&(C.textContent=de),E=a(B),S=l(B,"P",{"data-svelte-h":!0}),r(S)!=="svelte-akno4u"&&(S.textContent=He),N=a(B),M=l(B,"P",{"data-svelte-h":!0}),r(M)!=="svelte-1uh015v"&&(M.textContent=Le),I=a(B),x=l(B,"P",{"data-svelte-h":!0}),r(x)!=="svelte-5pud6u"&&(x.textContent=Te),ye=a(B),A=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-rw6uso"&&(A.textContent=Ee),ue=a(B),Z=l(B,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-ivcgfv"&&(Z.textContent=We),te=a(B),F=l(B,"P",{"data-svelte-h":!0}),r(F)!=="svelte-159wy01"&&(F.textContent=Re),Y=a(B),G=l(B,"P",{"data-svelte-h":!0}),r(G)!=="svelte-1vmnk07"&&(G.textContent=Be),ke=a(B),re=l(B,"P",{"data-svelte-h":!0}),r(re)!=="svelte-142f6na"&&(re.innerHTML=Ve),_e=a(B),ie=l(B,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-inh8qo"&&(ie.innerHTML=Qe),Ce=a(B),ae=l(B,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-19ni7j5"&&(ae.textContent=Je),T=a(B),H=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-137rydu"&&(H.textContent=Ye),X=a(B),Q=l(B,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1jpx7cl"&&(Q.textContent=tt),ne=a(B),oe=l(B,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1c4v8vo"&&(oe.innerHTML=nt),Ge=a(B),me=l(B,"P",{"data-svelte-h":!0}),r(me)!=="svelte-i91zzh"&&(me.textContent=ot),qe=a(B),fe=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(fe)!=="svelte-1x703ch"&&(fe.textContent=lt),J=a(B),le=l(B,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1onr3au"&&(le.textContent=it),Oe=a(B),ve=l(B,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-f22fkw"&&(ve.innerHTML=at),Ue=a(B),be=l(B,"P",{"data-svelte-h":!0}),r(be)!=="svelte-g7zuo6"&&(be.textContent=st),W=a(B),se=l(B,"P",{"data-svelte-h":!0}),r(se)!=="svelte-1hk25dq"&&(se.textContent=rt),v=a(B),L=l(B,"P",{"data-svelte-h":!0}),r(L)!=="svelte-y1j6uc"&&(L.textContent=pt),Xe=a(B),De=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(De)!=="svelte-zsclc2"&&(De.textContent=ht),et=a(B),Fe=l(B,"P",{"data-svelte-h":!0}),r(Fe)!=="svelte-19n26lb"&&(Fe.textContent=ut),g=a(B),z=l(B,"P",{"data-svelte-h":!0}),r(z)!=="svelte-1u8ft65"&&(z.textContent=ct),dt=a(B),Ne=l(B,"H2",{class:!0,"data-svelte-h":!0}),r(Ne)!=="svelte-18hazx0"&&(Ne.textContent=ft),R=a(B),ce=l(B,"P",{"data-svelte-h":!0}),r(ce)!=="svelte-dqx381"&&(ce.textContent=yt),y=a(B),w=l(B,"P",{"data-svelte-h":!0}),r(w)!=="svelte-10mksgn"&&(w.textContent=Ae),vt=a(B),Ct=l(B,"P",{"data-svelte-h":!0}),r(Ct)!=="svelte-1etodbu"&&(Ct.textContent=qt),this.h()},h(){$e(n.src,f="scipy-2024-bof-ide-ui-ux.jpg")||d(n,"src",f),d(n,"alt","Photo of the Spyder BoF, showing a room full of attendees engaging with a moderator"),d(k,"class","section"),d(A,"class","section"),d(H,"class","section"),d(fe,"class","section"),d(De,"class","section"),d(Ne,"class","section")},m(B,Me){t(B,n,Me),t(B,p,Me),t(B,h,Me),t(B,u,Me),t(B,c,Me),t(B,O,Me),t(B,b,Me),t(B,U,Me),t(B,k,Me),t(B,j,Me),t(B,_,Me),t(B,ee,Me),t(B,P,Me),t(B,q,Me),t(B,C,Me),t(B,E,Me),t(B,S,Me),t(B,N,Me),t(B,M,Me),t(B,I,Me),t(B,x,Me),t(B,ye,Me),t(B,A,Me),t(B,ue,Me),t(B,Z,Me),t(B,te,Me),t(B,F,Me),t(B,Y,Me),t(B,G,Me),t(B,ke,Me),t(B,re,Me),t(B,_e,Me),t(B,ie,Me),t(B,Ce,Me),t(B,ae,Me),t(B,T,Me),t(B,H,Me),t(B,X,Me),t(B,Q,Me),t(B,ne,Me),t(B,oe,Me),t(B,Ge,Me),t(B,me,Me),t(B,qe,Me),t(B,fe,Me),t(B,J,Me),t(B,le,Me),t(B,Oe,Me),t(B,ve,Me),t(B,Ue,Me),t(B,be,Me),t(B,W,Me),t(B,se,Me),t(B,v,Me),t(B,L,Me),t(B,Xe,Me),t(B,De,Me),t(B,et,Me),t(B,Fe,Me),t(B,g,Me),t(B,z,Me),t(B,dt,Me),t(B,Ne,Me),t(B,R,Me),t(B,ce,Me),t(B,y,Me),t(B,w,Me),t(B,vt,Me),t(B,Ct,Me)},p:bt,d(B){B&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne),e(R),e(ce),e(y),e(w),e(vt),e(Ct))}}}function Go(m){let n,f;const p=[m[0],cn];let h={$$slots:{default:[Fo]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(cn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const cn={title:"Scientific IDE UX Birds of a Feather session at SciPy 2024",author:"camgerlach",pub_date:"2024-09-18T00:00:00.000Z",category:"News",tags:"community, outreach, media, team",summary:"The Spyder team hosted a Birds of a Feather session at SciPy 2024, this time on the topic of users' experiences (good and bad) with the UI/UX of scientific interfaces and IDEs, and how their developers can better serve users. Here, we share what we learned from the session, as well as a link to the full detailed community notes."};function qo(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Oo=class extends kt{constructor(n){super(),_t(this,n,qo,Go,xt,{})}};const Uo=Object.freeze(Object.defineProperty({__proto__:null,default:Oo,metadata:cn},Symbol.toStringTag,{value:"Module"}));function Wo(m){let n,f='<em><a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan Sebastian Bautista</a>, <a href="https://github.com/CAM-Gerlach" rel="nofollow" class="link">C.A.M. Gerlach</a> and <a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Cordoba</a> also contributed to this post.</em>',p,h,s=`<a href="https://github.com/spyder-ide/spyder/releases/tag/v5.4.0" rel="nofollow" class="link">Spyder 5.4.0</a> was released recently, featuring some major enhancements to its Windows and macOS standalone installers.
You’ll now get more detailed feedback when new versions are available, and you can download and start the update to them from right within Spyder, instead of having to install them manually.
In this post, we’ll go over how these new update features work and how you can start using them!`,u,c,he='Before proceeding, we want to acknowledge that this work was made possible by <a href="https://github.com/spyder-ide/spyder/wiki/NumFOCUS-Small-Development-Grant-2022" rel="nofollow" class="link">a Small Development Grant</a> awarded to Spyder by <a href="https://numfocus.org/" rel="nofollow" class="link">NumFOCUS</a>, which has enabled us to hire a new developer (<a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan Sebastian Bautista Rojas</a>) to be in charge of all the implementation details.',O,b,xe=`Before these improvements, Spyder already had a mechanism to detect more recent versions, but that functionality was very simple.
There was a pop-up dialog warning that a new version was available, but users had to follow a link to manually download the installer and then run it themselves:`,U,k,we,j,_,pe="Once you upgrade to Spyder 5.4.0 or above, you’ll get this message on future Spyder updates:",ee,P,ge,q,C,de="Spyder will now be able to automatically download and install a new version for you, much like many other popular applications.",E,S,He="After clicking “Yes” on that dialog, Spyder will display another with the status and percent completion of the download.",N,M,Le,I,x,Te="If it is closed, the download will continue in the background, with its progress shown in a new status bar widget.",ye,A,Ee,ue,Z,We="After the download completes, Spyder will ask if you want to update immediately, cancel the update or defer it to when you close Spyder, to avoid interrupting your current workflow.",te,F,Re,Y,G,Be=`If you chose to update immediately, or once you close Spyder if you deferred the update, our installer will be started automatically.
On Windows, the installer has a series of automated prompts to close the current instance, uninstall the previous version and finally install the new one:`,ke,re,Ve,_e,ie,Qe="On macOS, Spyder will automatically mount the new version’s DMG, so you can simply drag and drop it in the Applications folder",Ce,ae,Je,T,H,Ye="We hope these improvements will make updating to future Spyder versions smoother and more straightforward, so we can bring you new features and enhancements more easily in the future!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("img"),j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("img"),q=i(),C=o("p"),C.textContent=de,E=i(),S=o("p"),S.textContent=He,N=i(),M=o("img"),I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("img"),ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("img"),Y=i(),G=o("p"),G.textContent=Be,ke=i(),re=o("img"),_e=i(),ie=o("p"),ie.textContent=Qe,Ce=i(),ae=o("img"),T=i(),H=o("p"),H.textContent=Ye,this.h()},l(X){n=l(X,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1ftrv0b"&&(n.innerHTML=f),p=a(X),h=l(X,"P",{"data-svelte-h":!0}),r(h)!=="svelte-17vnzk9"&&(h.innerHTML=s),u=a(X),c=l(X,"P",{"data-svelte-h":!0}),r(c)!=="svelte-ioyfa7"&&(c.innerHTML=he),O=a(X),b=l(X,"P",{"data-svelte-h":!0}),r(b)!=="svelte-16nh17h"&&(b.textContent=xe),U=a(X),k=l(X,"IMG",{src:!0,alt:!0}),j=a(X),_=l(X,"P",{"data-svelte-h":!0}),r(_)!=="svelte-v1njoz"&&(_.textContent=pe),ee=a(X),P=l(X,"IMG",{src:!0,alt:!0}),q=a(X),C=l(X,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1vp66pc"&&(C.textContent=de),E=a(X),S=l(X,"P",{"data-svelte-h":!0}),r(S)!=="svelte-ibvyz7"&&(S.textContent=He),N=a(X),M=l(X,"IMG",{src:!0,alt:!0}),I=a(X),x=l(X,"P",{"data-svelte-h":!0}),r(x)!=="svelte-poq8kp"&&(x.textContent=Te),ye=a(X),A=l(X,"IMG",{src:!0,alt:!0}),ue=a(X),Z=l(X,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-12d0ric"&&(Z.textContent=We),te=a(X),F=l(X,"IMG",{src:!0,alt:!0}),Y=a(X),G=l(X,"P",{"data-svelte-h":!0}),r(G)!=="svelte-pnhb8r"&&(G.textContent=Be),ke=a(X),re=l(X,"IMG",{src:!0,alt:!0}),_e=a(X),ie=l(X,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-7cjgq9"&&(ie.textContent=Qe),Ce=a(X),ae=l(X,"IMG",{src:!0,alt:!0}),T=a(X),H=l(X,"P",{"data-svelte-h":!0}),r(H)!=="svelte-1443q5a"&&(H.textContent=Ye),this.h()},h(){$e(k.src,we="update-available-old.png")||d(k,"src",we),d(k,"alt","Update available dialog from Spyder version 5.3.3 to 5.4.0 - Old update available dialog"),$e(P.src,ge="update-available-new.png")||d(P,"src",ge),d(P,"alt","Update available dialog from Spyder version 5.4.0 to 5.4.1 - New update available dialog"),$e(M.src,Le="download-status.png")||d(M,"src",Le),d(M,"alt","Dialog downloading Spyder 5.4.1 installer"),$e(A.src,Ee="downloading-update.gif")||d(A,"src",Ee),d(A,"alt","User clicking the update status in the taskbar to monitor the download status"),$e(F.src,Re="starting-update.gif")||d(F,"src",Re),d(F,"alt","Options available to run installer, run installer after Spyder closes or not run it at all"),$e(re.src,Ve="installation-flow.png")||d(re,"src",Ve),d(re,"alt","Series of screenshots of installation steps, with arrows between: Yes/no dialog to close spyder, confirm close dialog, uninstall old version dialog, uninstalling status and finally installation wizard"),$e(ae.src,Je="macos-dmg.png")||d(ae,"src",Je),d(ae,"alt","macOS new version's DMG mounted with a drag and drop dialog to move new Spyder version into the Application folder")},m(X,Q){t(X,n,Q),t(X,p,Q),t(X,h,Q),t(X,u,Q),t(X,c,Q),t(X,O,Q),t(X,b,Q),t(X,U,Q),t(X,k,Q),t(X,j,Q),t(X,_,Q),t(X,ee,Q),t(X,P,Q),t(X,q,Q),t(X,C,Q),t(X,E,Q),t(X,S,Q),t(X,N,Q),t(X,M,Q),t(X,I,Q),t(X,x,Q),t(X,ye,Q),t(X,A,Q),t(X,ue,Q),t(X,Z,Q),t(X,te,Q),t(X,F,Q),t(X,Y,Q),t(X,G,Q),t(X,ke,Q),t(X,re,Q),t(X,_e,Q),t(X,ie,Q),t(X,Ce,Q),t(X,ae,Q),t(X,T,Q),t(X,H,Q)},p:bt,d(X){X&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H))}}}function Ro(m){let n,f;const p=[m[0],fn];let h={$$slots:{default:[Wo]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(fn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const fn={title:"Improvements to the Spyder IDE installation experience",author:"dalthviz",pub_date:"2022-11-30T00:00:00.000Z",category:"Announcement",tags:"milestone, new-feature, installers",summary:"Spyder 5.4.0 was released recently, featuring some major enhancements to the Windows and macOS standalone installers. You'll now get more detailed feedback when new versions are available, and you can download and start the update to them from right within Spyder, instead of having to install them manually. Read on to learn how these new update features work and how to use them."};function No(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Bo=class extends kt{constructor(n){super(),_t(this,n,No,Ro,xt,{})}};const Qo=Object.freeze(Object.defineProperty({__proto__:null,default:Bo,metadata:fn},Symbol.toStringTag,{value:"Module"}));function Jo(m){let n,f='Automatic testing can increase the quality of your code. This is especially true of dynamic languages like Python, where a typo may only be noticed when that particular code path is executed. The new <a href="https://github.com/spyder-ide/spyder-unittest" rel="nofollow" class="link">Spyder unittest plugin</a> lets you run tests and view the results, all within the IDE. Here, I’ll demonstrate what it can do by way of a real-world example.',p,h,s='There are numerous unit testing frameworks available for Python, of which the plugin supports several of the most prominent. However, I’m using my favorite here, <a href="https://pytest.org/" rel="nofollow" class="link">pytest</a>. I prefer to write the tests in a separate file from the code, so that’s what I’ll do here.',u,c,he="Installing the plugin",O,b,xe="If you use the Anaconda distribution (as we recommend), then you can install the Spyder unittest plugin with the command",U,k,we,j='<code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">-c</span> spyder-ide spyder-unittest</code>',_,pe,ee="This will also grab all its mandatory dependencies (including Spyder itself if necessary). The <code>-c</code> option instructs <code>conda</code> to use the custom channel <code>spyder-ide</code> run by the Spyder developers, since the plugin isn’t part of the default channel.",P,ge,q="Since we will be using the <code>pytest</code> framework, you also need to install it:",C,de,E,S='<code class="language-bash">conda <span class="token function">install</span> pytest</code>',He,N,M="We’ll be running Python 3.6.4, Spyder 3.2.6, <code>spyder-unittest</code> 0.3.0 and <code>pytest</code> 3.3.2 for this example.",Le,I,x="Creating a project",Te,ye,A="I’ll be using separate files for the tests and the code to be tested, so let’s start by creating a project which will contain these files. In the <code>Projects</code> menu, click on <code>New Project ...</code>. Enter a name for the project (in my example, <code>prime_example</code>), and under <code>Location</code>, select the directory in which to store it. Click <code>Create</code>.",Ee,ue,Z,We,te,F="Writing code to be tested",Re,Y,G="Create a Python file <code>primes.py</code> with the following function, which checks whether a number is prime:",Be,ke,re,Ve=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Return True if &#96;number&#96; is prime."""</span>
    <span class="token keyword">for</span> element <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> number <span class="token operator">%</span> element <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span></code>`,_e,ie,Qe='This example is taken from the blog post <a href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" rel="nofollow" class="link">Improve Your Python: Understanding Unit Testing</a> by Jeff Knupp.',Ce,ae,Je="Writing the tests",T,H,Ye="To test our <code>is_prime</code> function, we will write two tests: one to check that <code>5</code> is considered a prime, and one to ensure <code>4</code> is not. They can be implemented as follows:",X,Q,tt,ne=`<code class="language-python"><span class="token keyword">from</span> primes <span class="token keyword">import</span> is_prime

<span class="token keyword">def</span> <span class="token function">test_five_is_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> is_prime<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">test_four_is_not_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> is_prime<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span></code>`,oe,nt,Ge="One of the cool things about <code>pytest</code> is that it can find the tests automatically, so you don’t need to mark them in any way. By default <code>pytest</code> uses a naming convention: all functions starting with <code>test_</code> in files starting with <code>test_</code> are considered test functions. We’ll save the code in the file <code>test_primes.py</code> which follows this naming convention.",me,ot,qe="In Spyder, the project now looks as follows:",fe,lt,J,le,it,Oe="Running the tests",ve,at,Ue="Now comes the fun part, where we actually get to use the plugin. In the <code>Run</code> menu, select <code>Run unit tests</code>. If you do not see this menu item, then the plugin is not installed; refer to the installation instructions above.",be,st,W="A window appears in which to configure the test run. One of the advantages of using a project is that it is automatically selected as the directory in which to find tests (another advantage is that Spyder will remember the testing configuration). So the only thing we need to do is select the test framework, which is <code>pytest</code>.",se,rt,v,L,pt,Xe="Press the <code>OK</code> button to run the tests, and lo and behold, the results appear in a new pane called “Unit testing”:",De,ht,et,Fe,ut,g="As you can see, both tests pass. This means that our function correctly identifies <code>5</code> as prime and <code>4</code> as not prime.",z,ct,dt="A failing test",Ne,ft,R="Unfortunately, our function <code>is_prime</code> has a bug. The number <code>1</code> is not considered a prime, but <code>is_prime(1)</code> in fact returns <code>True</code>. Therefore, to test for this, we add the following code to <code>test_primes.py</code>:",ce,yt,y,w=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_one_is_not_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> is_prime<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span></code>`,Ae,vt,Ct="Now, run the tests again by clicking on <code>Run unit tests</code> in the <code>Run</code> menu. Spyder remembers the configuration so you are not asked for it again. This time, the results are:",qt,B,Me,Rt,Lt,Et="Our new test fails. The details clarify that <code>is_prime(1)</code> returns <code>True</code>, while the assert in the test function claims that it should return <code>False</code>.",Nt,jt,At="Where to go from here",Bt,$t,Dt="With this demonstration under your belt, you should be able to write tests for your code and run them with the plugin. For example, try fixing the bug so that <code>1</code> is correctly identified as non-prime, and run the tests again to check verify it.",V,Se,zt='<code>Spyder-unittest</code> supports not only the <code>pytest</code> framework, but also the <code>nose</code> framework and the <code>unittest</code> module in the Python standard library. It is still fairly new (as its version number suggests), so I look forward to your comments. Please send your ideas, bug reports and pull requests to the <a href="https://github.com/spyder-ide/spyder-unittest" rel="nofollow" class="link">spyder-unittest</a> repo on Github.',Jt,Wt,Ft="Happy Spydering with automatic tests!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("pre"),we=new Vt(!1),_=i(),pe=o("p"),pe.innerHTML=ee,P=i(),ge=o("p"),ge.innerHTML=q,C=i(),de=o("pre"),E=new Vt(!1),He=i(),N=o("p"),N.innerHTML=M,Le=i(),I=o("h2"),I.textContent=x,Te=i(),ye=o("p"),ye.innerHTML=A,Ee=i(),ue=o("img"),We=i(),te=o("h2"),te.textContent=F,Re=i(),Y=o("p"),Y.innerHTML=G,Be=i(),ke=o("pre"),re=new Vt(!1),_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("h2"),ae.textContent=Je,T=i(),H=o("p"),H.innerHTML=Ye,X=i(),Q=o("pre"),tt=new Vt(!1),oe=i(),nt=o("p"),nt.innerHTML=Ge,me=i(),ot=o("p"),ot.textContent=qe,fe=i(),lt=o("img"),le=i(),it=o("h2"),it.textContent=Oe,ve=i(),at=o("p"),at.innerHTML=Ue,be=i(),st=o("p"),st.innerHTML=W,se=i(),rt=o("img"),L=i(),pt=o("p"),pt.innerHTML=Xe,De=i(),ht=o("img"),Fe=i(),ut=o("p"),ut.innerHTML=g,z=i(),ct=o("h2"),ct.textContent=dt,Ne=i(),ft=o("p"),ft.innerHTML=R,ce=i(),yt=o("pre"),y=new Vt(!1),Ae=i(),vt=o("p"),vt.innerHTML=Ct,qt=i(),B=o("img"),Rt=i(),Lt=o("p"),Lt.innerHTML=Et,Nt=i(),jt=o("h2"),jt.textContent=At,Bt=i(),$t=o("p"),$t.innerHTML=Dt,V=i(),Se=o("p"),Se.innerHTML=zt,Jt=i(),Wt=o("p"),Wt.textContent=Ft,this.h()},l(K){n=l(K,"P",{"data-svelte-h":!0}),r(n)!=="svelte-10px6oi"&&(n.innerHTML=f),p=a(K),h=l(K,"P",{"data-svelte-h":!0}),r(h)!=="svelte-k0bcfd"&&(h.innerHTML=s),u=a(K),c=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-kfy64d"&&(c.textContent=he),O=a(K),b=l(K,"P",{"data-svelte-h":!0}),r(b)!=="svelte-16t9tw8"&&(b.textContent=xe),U=a(K),k=l(K,"PRE",{class:!0});var je=Gt(k);we=Kt(je,!1),je.forEach(e),_=a(K),pe=l(K,"P",{"data-svelte-h":!0}),r(pe)!=="svelte-njy31v"&&(pe.innerHTML=ee),P=a(K),ge=l(K,"P",{"data-svelte-h":!0}),r(ge)!=="svelte-1sexflf"&&(ge.innerHTML=q),C=a(K),de=l(K,"PRE",{class:!0});var Ot=Gt(de);E=Kt(Ot,!1),Ot.forEach(e),He=a(K),N=l(K,"P",{"data-svelte-h":!0}),r(N)!=="svelte-1xrf77s"&&(N.innerHTML=M),Le=a(K),I=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(I)!=="svelte-txs3l7"&&(I.textContent=x),Te=a(K),ye=l(K,"P",{"data-svelte-h":!0}),r(ye)!=="svelte-1245yxu"&&(ye.innerHTML=A),Ee=a(K),ue=l(K,"IMG",{src:!0,alt:!0}),We=a(K),te=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(te)!=="svelte-1v4ahdm"&&(te.textContent=F),Re=a(K),Y=l(K,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-1xjia97"&&(Y.innerHTML=G),Be=a(K),ke=l(K,"PRE",{class:!0});var Zt=Gt(ke);re=Kt(Zt,!1),Zt.forEach(e),_e=a(K),ie=l(K,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-16e9nmo"&&(ie.innerHTML=Qe),Ce=a(K),ae=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(ae)!=="svelte-16ooc6o"&&(ae.textContent=Je),T=a(K),H=l(K,"P",{"data-svelte-h":!0}),r(H)!=="svelte-f8jn7"&&(H.innerHTML=Ye),X=a(K),Q=l(K,"PRE",{class:!0});var Qt=Gt(Q);tt=Kt(Qt,!1),Qt.forEach(e),oe=a(K),nt=l(K,"P",{"data-svelte-h":!0}),r(nt)!=="svelte-eb8p40"&&(nt.innerHTML=Ge),me=a(K),ot=l(K,"P",{"data-svelte-h":!0}),r(ot)!=="svelte-1yiixpi"&&(ot.textContent=qe),fe=a(K),lt=l(K,"IMG",{src:!0,alt:!0}),le=a(K),it=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(it)!=="svelte-1h4aoe5"&&(it.textContent=Oe),ve=a(K),at=l(K,"P",{"data-svelte-h":!0}),r(at)!=="svelte-23q0zs"&&(at.innerHTML=Ue),be=a(K),st=l(K,"P",{"data-svelte-h":!0}),r(st)!=="svelte-109famq"&&(st.innerHTML=W),se=a(K),rt=l(K,"IMG",{src:!0,alt:!0}),L=a(K),pt=l(K,"P",{"data-svelte-h":!0}),r(pt)!=="svelte-ksdppo"&&(pt.innerHTML=Xe),De=a(K),ht=l(K,"IMG",{src:!0,alt:!0}),Fe=a(K),ut=l(K,"P",{"data-svelte-h":!0}),r(ut)!=="svelte-j36jai"&&(ut.innerHTML=g),z=a(K),ct=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(ct)!=="svelte-btgw7r"&&(ct.textContent=dt),Ne=a(K),ft=l(K,"P",{"data-svelte-h":!0}),r(ft)!=="svelte-16ntxvs"&&(ft.innerHTML=R),ce=a(K),yt=l(K,"PRE",{class:!0});var Ut=Gt(yt);y=Kt(Ut,!1),Ut.forEach(e),Ae=a(K),vt=l(K,"P",{"data-svelte-h":!0}),r(vt)!=="svelte-uptah"&&(vt.innerHTML=Ct),qt=a(K),B=l(K,"IMG",{src:!0,alt:!0}),Rt=a(K),Lt=l(K,"P",{"data-svelte-h":!0}),r(Lt)!=="svelte-15ajb52"&&(Lt.innerHTML=Et),Nt=a(K),jt=l(K,"H2",{class:!0,"data-svelte-h":!0}),r(jt)!=="svelte-1u9atu6"&&(jt.textContent=At),Bt=a(K),$t=l(K,"P",{"data-svelte-h":!0}),r($t)!=="svelte-rz1utf"&&($t.innerHTML=Dt),V=a(K),Se=l(K,"P",{"data-svelte-h":!0}),r(Se)!=="svelte-1e7smp0"&&(Se.innerHTML=zt),Jt=a(K),Wt=l(K,"P",{"data-svelte-h":!0}),r(Wt)!=="svelte-uewclk"&&(Wt.textContent=Ft),this.h()},h(){d(c,"class","section"),we.a=null,d(k,"class","language-bash"),E.a=null,d(de,"class","language-bash"),d(I,"class","section"),$e(ue.src,Z="new-project.png")||d(ue,"src",Z),d(ue,"alt","'Create new project' window"),d(te,"class","section"),re.a=null,d(ke,"class","language-python"),d(ae,"class","section"),tt.a=null,d(Q,"class","language-python"),$e(lt.src,J="code.png")||d(lt,"src",J),d(lt,"alt","Spyder window with code"),d(it,"class","section"),$e(rt.src,v="test-config.png")||d(rt,"src",v),d(rt,"alt","'Configure tests' window"),$e(ht.src,et="test-results.png")||d(ht,"src",et),d(ht,"alt","Test results in Spyder windows"),d(ct,"class","section"),y.a=null,d(yt,"class","language-python"),$e(B.src,Me="test-results2.png")||d(B,"src",Me),d(B,"alt","Test results in Spyder windows"),d(jt,"class","section")},m(K,je){t(K,n,je),t(K,p,je),t(K,h,je),t(K,u,je),t(K,c,je),t(K,O,je),t(K,b,je),t(K,U,je),t(K,k,je),we.m(j,k),t(K,_,je),t(K,pe,je),t(K,P,je),t(K,ge,je),t(K,C,je),t(K,de,je),E.m(S,de),t(K,He,je),t(K,N,je),t(K,Le,je),t(K,I,je),t(K,Te,je),t(K,ye,je),t(K,Ee,je),t(K,ue,je),t(K,We,je),t(K,te,je),t(K,Re,je),t(K,Y,je),t(K,Be,je),t(K,ke,je),re.m(Ve,ke),t(K,_e,je),t(K,ie,je),t(K,Ce,je),t(K,ae,je),t(K,T,je),t(K,H,je),t(K,X,je),t(K,Q,je),tt.m(ne,Q),t(K,oe,je),t(K,nt,je),t(K,me,je),t(K,ot,je),t(K,fe,je),t(K,lt,je),t(K,le,je),t(K,it,je),t(K,ve,je),t(K,at,je),t(K,be,je),t(K,st,je),t(K,se,je),t(K,rt,je),t(K,L,je),t(K,pt,je),t(K,De,je),t(K,ht,je),t(K,Fe,je),t(K,ut,je),t(K,z,je),t(K,ct,je),t(K,Ne,je),t(K,ft,je),t(K,ce,je),t(K,yt,je),y.m(w,yt),t(K,Ae,je),t(K,vt,je),t(K,qt,je),t(K,B,je),t(K,Rt,je),t(K,Lt,je),t(K,Nt,je),t(K,jt,je),t(K,Bt,je),t(K,$t,je),t(K,V,je),t(K,Se,je),t(K,Jt,je),t(K,Wt,je)},p:bt,d(K){K&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(_),e(pe),e(P),e(ge),e(C),e(de),e(He),e(N),e(Le),e(I),e(Te),e(ye),e(Ee),e(ue),e(We),e(te),e(Re),e(Y),e(Be),e(ke),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(oe),e(nt),e(me),e(ot),e(fe),e(lt),e(le),e(it),e(ve),e(at),e(be),e(st),e(se),e(rt),e(L),e(pt),e(De),e(ht),e(Fe),e(ut),e(z),e(ct),e(Ne),e(ft),e(ce),e(yt),e(Ae),e(vt),e(qt),e(B),e(Rt),e(Lt),e(Nt),e(jt),e(Bt),e($t),e(V),e(Se),e(Jt),e(Wt))}}}function Vo(m){let n,f;const p=[m[0],mn];let h={$$slots:{default:[Jo]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(mn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const mn={title:"Introducing the unittest plugin",pub_date:"2018-02-23T00:00:00.000Z",tags:"plugin, spyder-unittest, guide",category:"Tutorials",author:"jitseniesen",summary:"We introduce the Spyder unittest plugin, which can run tests and display the results right inside the IDE, with a real world example."};function Ko(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Zo=class extends kt{constructor(n){super(),_t(this,n,Ko,Vo,xt,{})}};const Xo=Object.freeze(Object.defineProperty({__proto__:null,default:Zo,metadata:mn},Symbol.toStringTag,{value:"Module"}));function Yo(m){let n,f=`Spyder’s Variable Explorer is a great tool which aids the development and debugging of Python code by displaying all variables from the current scope.
One thing the Variable Explorer is missing is the ability to display the value of arbitrary, user-definable expressions while debugging.
For example, it might be useful to see the value of a specific attribute of an object, or the value of an array at some index.
Such a feature is known as a “watchlist” or “watches” in other Integrated Development Environments (IDEs).
This blog post introduces the Watchlist plugin developed for Spyder.`,p,h,s="Features",u,c,he=`The watchlist consists of a user-definable list of expressions.
They are evaluated after each debugger step, and the result of the evaluation is displayed as a string.
This means that <code>value = str(eval(expression))</code> is performed behind the scenes, and the result is shown in the plugin.
The watchlist is a very powerful tool, but this comes at a cost: Any side effect of an expression will affect the execution environment.`,O,b,xe=`Expressions can be added, removed and modified at any time.
The value of an invalid expression is shown as <code>&lt;exception name&gt;</code>.
You can hover the mouse over the value to show the full exception message in a tooltip.
Values which have changed with the most recent debugger step are shown with a bold font, so you can recognise them more easily.`,U,k,we="A picture is worth a thousand words, as they say, so here is a whole screencast of the Watchlist plugin in action:",j,_,pe=`<source src="screencast.webm" type="video/webm"/><source src="screencast.mp4" type="video/mp4"/><track kind="captions"/>
  Sorry, your browser doesn’t support HTML5 video. Download the <a href="screencast.mp4">MP4 file</a>`,ee,P,ge="Installation and going forwards",q,C,de="For <code>conda</code> or <code>pip</code>-installed Spyder, the plugin can be installed by running the following with your Spyder environment activated:",E,S,He,N='<code class="language-bash">pip <span class="token function">install</span> spyder-watchlist</code>',M,Le,I='Feel free to send your ideas, bug reports and pull requests to the <a href="https://github.com/procitec/spyder-watchlist" rel="nofollow" class="link">spyder-watchlist</a> repository on GitHub.';return{c(){n=o("p"),n.textContent=f,p=i(),h=o("h2"),h.textContent=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("video"),_.innerHTML=pe,ee=i(),P=o("h2"),P.textContent=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("pre"),He=new Vt(!1),M=i(),Le=o("p"),Le.innerHTML=I,this.h()},l(x){n=l(x,"P",{"data-svelte-h":!0}),r(n)!=="svelte-do3eua"&&(n.textContent=f),p=a(x),h=l(x,"H2",{class:!0,"data-svelte-h":!0}),r(h)!=="svelte-6uqxh"&&(h.textContent=s),u=a(x),c=l(x,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1tlqj16"&&(c.innerHTML=he),O=a(x),b=l(x,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1jwwz49"&&(b.innerHTML=xe),U=a(x),k=l(x,"P",{"data-svelte-h":!0}),r(k)!=="svelte-pztoku"&&(k.textContent=we),j=a(x),_=l(x,"VIDEO",{"data-svelte-h":!0}),r(_)!=="svelte-18vyys8"&&(_.innerHTML=pe),ee=a(x),P=l(x,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-1ujtgcf"&&(P.textContent=ge),q=a(x),C=l(x,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1fx19nf"&&(C.innerHTML=de),E=a(x),S=l(x,"PRE",{class:!0});var Te=Gt(S);He=Kt(Te,!1),Te.forEach(e),M=a(x),Le=l(x,"P",{"data-svelte-h":!0}),r(Le)!=="svelte-1sbgnrp"&&(Le.innerHTML=I),this.h()},h(){d(h,"class","section"),_.controls=!0,d(P,"class","section"),He.a=null,d(S,"class","language-bash")},m(x,Te){t(x,n,Te),t(x,p,Te),t(x,h,Te),t(x,u,Te),t(x,c,Te),t(x,O,Te),t(x,b,Te),t(x,U,Te),t(x,k,Te),t(x,j,Te),t(x,_,Te),t(x,ee,Te),t(x,P,Te),t(x,q,Te),t(x,C,Te),t(x,E,Te),t(x,S,Te),He.m(N,S),t(x,M,Te),t(x,Le,Te)},p:bt,d(x){x&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(M),e(Le))}}}function el(m){let n,f;const p=[m[0],yn];let h={$$slots:{default:[Yo]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(yn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const yn={title:"Introducing the Spyder-Watchlist plugin",author:"rear1019",tags:"plugin, watchlist, debugging",pub_date:"2022-11-18T00:00:00.000Z",summary:"The third-party Spyder-Watchlist plugin is introduced, which can display and continually update the values of arbitrary, user-defined expressions while the debugger is active, and it's shown how to use this powerful tool for quickly exploring and debugging your code."};function tl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let nl=class extends kt{constructor(n){super(),_t(this,n,tl,el,xt,{})}};const ol=Object.freeze(Object.defineProperty({__proto__:null,default:nl,metadata:yn},Symbol.toStringTag,{value:"Module"}));function ll(m){let n,f=`We’re excited to announce a significant update to <a href="https://qtconsole.readthedocs.io/en/stable/" rel="nofollow" class="link">QtConsole</a>—the package that powers Spyder’s <a href="https://docs.spyder-ide.org/ipythonconsole.html" rel="nofollow" class="link">IPython Console</a> interface—which the Spyder team maintains in collaboration with <a href="https://jupyter.org/" rel="nofollow" class="link">Project Jupyter</a>.
Two of the biggest changes—user-selectable syntax highlighting themes, and enhanced external editor/IDE integration—are already built right into Spyder, so they’ll likely be of more interest if you use QtConsole standalone or with another editor/IDE.
However, most of the other changes should prove quite useful within Spyder as well, and many were in fact suggested and even implemented by users of our IDE.
Particular highlights include a block indent/unindent feature, Select-All (<code>Ctrl-Shift-A</code>) being made cell-specific, <code>Ctrl-Backspace</code> and <code>Ctrl-Delete</code> behaving more intelligently across whitespace and line boundaries, <code>Ctrl-D</code> allowing you to easily exit <code>ipdb</code>, <code>input()</code> and the like, and numerous smaller enhancements and bug fixes.
If you’d like to learn more about what’s new, please check out <a href="https://blog.jupyter.org/jupyter-qtconsole-4-4-81f2eaad5706" rel="nofollow" class="link">our article</a> over on the <a href="https://blog.jupyter.org/" rel="nofollow" class="link">Jupyter blog</a>, where we go over the major changes in more detail, with plenty of screenshots and GIFs to illustrate each feature and how to use it.`,p,h,s,u,c,he=`To update to the newest version with your existing Spyder install, open an Anaconda Prompt (Windows), Terminal (macOS) or command line (Linux), activate the <code>conda</code> environment or <code>virtualenv</code>/<code>venv</code> of the Spyder install you are using, and run <code>conda update qtconsole</code> (or <code>pip install --upgrade qtconsole</code>, if not using Anaconda).
If you’d like to try QtConsole out separate from Spyder or integrate it in with your own editor or IDE, it is also available as a standalone GUI by running <code>jupyter qtconsole</code> from the Python environment where it or Spyder is installed.`,O,b,xe=`If you have any questions, problems or feedback, we’d love to hear from you. Report issues, request features or participate in QtConsole’s development at its <a href="https://github.com/jupyter/qtconsole" rel="nofollow" class="link">Github site</a>, and check out its <a href="https://qtconsole.readthedocs.io/en/stable/" rel="nofollow" class="link">documentation</a> for help using it.
For the latest Spyder news, releases, previews and tips, you can follow our <a href="https://www.facebook.com/SpyderIDE/" rel="nofollow" class="link">Facebook</a> and <a href="https://twitter.com/spyder_ide" rel="nofollow" class="link">Twitter</a>, and help support the development on Spyder and its sister projects like QtConsole on <a href="https://opencollective.com/spyder" rel="nofollow" class="link">OpenCollective</a>.`,U,k,we=`Our new documentation and Spyder 4 beta 1 have been fully live for some time now; given the dramatic scale of the changes in both, their respective blog posts are still in the works.
We’ll also have an upcoming article on our official Spyder 4 feature roadmap and more, and Spyder 3.3.2 is due out soon, so keep in right here for your Spyder fix!
Until then, happy Spydering and enjoy QtConsole 4.4!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("img"),u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("p"),k.textContent=we,this.h()},l(j){n=l(j,"P",{"data-svelte-h":!0}),r(n)!=="svelte-tpudl9"&&(n.innerHTML=f),p=a(j),h=l(j,"IMG",{src:!0,alt:!0}),u=a(j),c=l(j,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1mdc2k8"&&(c.innerHTML=he),O=a(j),b=l(j,"P",{"data-svelte-h":!0}),r(b)!=="svelte-stzk5x"&&(b.innerHTML=xe),U=a(j),k=l(j,"P",{"data-svelte-h":!0}),r(k)!=="svelte-18gepk8"&&(k.textContent=we),this.h()},h(){$e(h.src,s="qtconsole-syntax-highlighting.png")||d(h,"src",s),d(h,"alt","Screenshot of the QtConsole main window, with a new syntax highlighting theme applied")},m(j,_){t(j,n,_),t(j,p,_),t(j,h,_),t(j,u,_),t(j,c,_),t(j,O,_),t(j,b,_),t(j,U,_),t(j,k,_)},p:bt,d(j){j&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k))}}}function il(m){let n,f;const p=[m[0],wn];let h={$$slots:{default:[ll]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(wn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const wn={title:"QtConsole 4.4 Released!",pub_date:"2018-09-21T00:00:00.000Z",tags:"minor-release, qtconsole",category:"Releases",author:"camgerlach",summary:"We're pleased to highlight the release of QtConsole 4.4, which powers Spyder's IPython Console GUI. The latest version, developed in collaboration with the Jupyter team, adds several key features, enhancements and usability improvements, along with dozens of bug fixes and other changes—many requested and implemented by Spyder users like you."};function al(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let sl=class extends kt{constructor(n){super(),_t(this,n,al,il,xt,{})}};const rl=Object.freeze(Object.defineProperty({__proto__:null,default:sl,metadata:wn},Symbol.toStringTag,{value:"Module"}));function ul(m){let n,f=`We’re pleased to release the next significant update in the stable Spyder 3 line, 3.3.0, along with its follow-on bugfix point release, 3.3.1, which is now live on PyPI and <code>conda</code>.
As always, you can update with <code>conda update spyder</code> in the Anaconda Prompt/Terminal/command line (on Windows/macOS/Linux, respectively) if on Anaconda (recommended), or <code>pip update spyder</code> otherwise.
If you run into any trouble, please carefully read our <a href="https://docs.spyder-ide.org/installation.html" rel="nofollow" class="link">new installation documentation</a> and consult our <a href="https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ" rel="nofollow" class="link">Troubleshooting Guide</a>, which contains straightforward solutions to the vast majority of install-related issues users have reported.`,p,h,s=`As a new minor version (3.3), it makes several substantial changes to Spyder’s underpinnings that deserve some explanation, particularly the newly modular and portable console system that’s now separated into its own <code>spyder-kernels</code> package, opening up several new options for users running Spyder in different environments.
There’s also a brand-new error reporting process, new options in the IPython console, usability and performance improvements for the Variable Explorer, multiple new and changed dependency requirements and more, so there’s plenty to go over.
Finally, we’d like to briefly share a few final notes on this release and the latest on our plans going forward.`,u,c,he="Modular, flexible Console architecture",O,b,xe=`The biggest single change with version 3.3.0/3.3.1 is a major overhaul of how IPython Consoles are started and managed in Spyder.
More precisely, we’ve moved all the kernel-related code from the Spyder core into a new modular package, <code>spyder-kernels</code>, available on the <a href="https://github.com/spyder-ide/spyder-kernels" rel="nofollow" class="link">same</a> <a href="https://pypi.org/project/spyder-kernels/" rel="nofollow" class="link">distribution</a> <a href="https://anaconda.org/conda-forge/spyder-kernels" rel="nofollow" class="link">channels</a> as Spyder itself (and installed automatically when updating to &gt;=3.3.0).
While the most dramatic differences are under the hood, there’s plenty for everyone to like (and a few things to be aware of).`,U,k,we=`Most importantly, for our everyday users, this makes Spyder much more flexible and powerful when working with multiple Python environments.
With the changes, Spyder itself does not need to be present in every environment you’d like to launch a kernel in; you can install the full IDE in whatever manner you prefer, and then set it to run code and consoles in any Anaconda environment, <code>virtualenv</code>/<code>venv</code>, or even a totally separate Python installation, so long as it has <code>spyder-kernels</code> package available.
Just set the path under <code>Tools -&gt; Preferences -&gt; Python interpreter -&gt; Use the following Python interpreter</code> to the desired Python executable, and any new Console you open will start in the selected environment.
Check out our <a href="https://github.com/spyder-ide/spyder/wiki/Working-with-packages-and-environments-in-Spyder" rel="nofollow" class="link">new wiki page on using environments with Spyder</a>, for more details and tips on the subject, and keep an eye out for the further improvements coming in Spyder 4, which will greatly simplify the process and include full GUI-based project, package and environment management functionality built right in.`,j,_,pe,ee,P,ge=`Furthermore, the new package allows you to independently launch a kernel from anywhere (on your local computer, or a remote machine, server or even supercomputing cluster), connect to it with Spyder, and use it just like a “natively” started one.
After installing <code>spyder-kernels</code> on the host environment, you can start one with <code>python -m spyder_kernels.console</code>, and then enter the kernel’s 4-digit ID (and SSH connection details, if a remote machine) in the Spyder <code>Connect to an existing kernel</code> dialog under the IPython Console pane context- or “gear”-menu).
For more information on the process, see the <a href="https://docs.spyder-ide.org/ipythonconsole.html#connecting-to-a-console" rel="nofollow" class="link">Connecting to a Console</a> section in our new documentation.`,q,C,de,E,S,He=`Best of all, no matter how or where a kernel is started, every console now supports the full suite of Spyder’s features, including completion, the Variable Explorer, interactive Help and more, unlike before.
You can even mix and match internal, external and remote kernels in different environments, all in the same Spyder session, by either changing the Python interpreter preferences setting between starting a console, or starting and connecting to multiple consoles externally—or both!
Finally, for those of us (and those of you!) who help develop Spyder, the changes also make it easier to maintain and improve the code, and opens the door to one of the biggest features coming in Spyder 4: a new, full-featured debugging kernel that many of you have been asking for.`,N,M,Le=`The one key thing to remember: make sure you install the appropriate version of <code>spyder-kernels</code> for your version of Spyder. For most users, that will be spyder-kernels 0.x (currently 0.2.6) to match Spyder 3 on our stable <code>3.x</code> branch; if testing a Spyder 4 beta or Github clone of the <code>master</code> branch, you’ll want the latest 1.x version of <code>spyder-kernels</code> (currently 1.1.0).
To install the correct build, you can use the following <code>conda</code> command,`,I,x,Te,ye='<code class="language-bash">conda <span class="token function">install</span> spyder-kernels<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token number">0</span> or <span class="token operator"><span class="token file-descriptor important">1</span>></span>.*</code>',A,Ee,ue="or with <code>pip</code>,",Z,We,te,F='<code class="language-bash">pip <span class="token function">install</span> spyder-kernels<span class="token operator">==</span><span class="token operator">&lt;</span><span class="token number">0</span> or <span class="token operator"><span class="token file-descriptor important">1</span>></span>.*</code>',Re,Y,G=`replacing <code>&lt;0 or 1&gt;</code> with the major version number (0 or 1) to match your Spyder version.
Further details specific to installing a development build can be found in our <a href="https://github.com/spyder-ide/spyder/blob/master/CONTRIBUTING.md#using-the-correct-version-of-spyder-kernels" rel="nofollow" class="link">Contributing Guide</a> or our <a href="https://docs.spyder-ide.org/installation.html#installing-a-development-build" rel="nofollow" class="link">install documentation</a>.`,Be,ke,re="New IPython Console completion and plotting features",Ve,_e,ie,Qe,Ce,ae=`Spyder’s IPython Consoles can now use an advanced <code>jedi</code>-based completion engine that, similar to the Editor, analyzes your code without actually having to run it first.
This allows for advanced completion functionality on objects not yet assigned to a variable, similar to the existing “greedy” completion option, but without the need for dynamic evaluation.
It can be slow if working with very large Pandas <code>DataFrames</code> so it is disabled by default, but you can activate it under <code>Tools -&gt; Preferences -&gt; IPython console -&gt; Advanced Settings -&gt; Jedi completion</code>.
The descriptive text for the “greedy” completion option (also off by default) was also clarified, particularly to explain an IPython bug (not present in the <code>jedi</code> completer) with the feature and a consequent workaround.`,Je,T,H,Ye,X,Q=`We’ve also added a new plotting setting, <code>Use a tight layout for inline plots</code>, for the <code>Inline</code> Matplotlib graphics backend.
The default behavior (as in previous Spyder versions) sets <code>bbox_inches</code> to <code>&quot;tight&quot;</code> in Matplotlib calls when drawing to the inline backend.
However, if you prefer your own <code>bbox_inches</code> argument be respected even when plots are rendered in the Console, you can now do so by unchecking this option under <code>Tools -&gt; Preferences -&gt; IPython console -&gt; Graphics -&gt; Inline backend</code>.`,tt,ne,oe,nt,Ge,me="Better Variable Explorer usability and performance",ot,qe,fe=`We’ve made several changes and optimizations to greatly improve performance and efficiency in the Variable Explorer, to make it much faster and use less memory when opening and editing large objects.
In particular, we’ve fixed several major memory leaks when saving edited objects and closing the Variable Explorer dialogs through better length validation and garbage collection, and now skip the whole saving process entirely if the object was not modified (or cannot be modified).
We’ve also changed the names and functions of the <code>Cancel</code> and <code>Ok</code> buttons in Variable Explorer dialogs to be easier to understand and use.
They now feature a <code>Close</code> button which exits the dialog without saving any edits to the object’s contents, and a <code>Save and Close</code> button—automatically enabled once modifications are made—that commits the changes back to the kernel.`,lt,J,le,it,Oe,ve="Streamlined error reporting experience",at,Ue,be=`While we hope you never need to use it, Spyder 3.3.0 includes a brand-new error handling backend that can submit bug reports directly through the Github API.
Based off <a href="https://github.com/ColinDuquesnoy" rel="nofollow" class="link">Colin Duquesnoy</a>’s excellent <a href="https://github.com/ColinDuquesnoy/QCrash" rel="nofollow" class="link">QCrash</a> framework, this is a major improvement in speed, functionality, reliability and user convenience over the old approach (essentially just opening a link in a web browser).
Just as before, we won’t send anything without your explicit consent, you need a Github account (or create one for free), and you can view and edit the report on Github at any time.`,st,W,se,rt,v,L=`You will need to enter your Github credentials the first time you submit a report.
For this, you can <a href="https://github.com/settings/tokens/new?scopes=public_repo" rel="nofollow" class="link">create an app token</a> which only grants the very limited permissions needed to create a public issue report, can be easily revoked and re-created, and works with two-factor authentication (which you should be using); however, if you have not yet enabled 2FA, it also offers the option to enter your Github username and password.
Either way, Spyder can securely remember your login using the <a href="https://github.com/jaraco/keyring" rel="nofollow" class="link"><code>keyring</code></a> package, so you only have to do this once on any given machine (if you select the “remember” option).`,pt,Xe,De,ht,et,Fe=`The dialog itself has also been made more functional and user-friendly, designed to help encourage high-quality, useful reports, and with more accessible, descriptive text.
The reports themselves also contain more useful data about the problem, and there is now a <code>--safe-mode</code> command-line option for Spyder to start in a clean, temporary config directly, so you can test to see if the problem reoccurs without the hassle of a <code>spyder --reset</code>, and play around with other settings without impacting your main configuration. Finally, we’ve fixed over 40 bugs in this release and further improved our documentation and troubleshooting material, so hopefully you’ll see this less often.`,ut,g,z="Cleaner under the hood and more",ct,dt,Ne=`Alongside the aforementioned internal changes, we’ve also made a number of other under-the-hood changes to clean out old cruft and improve maintainability, readability and performance of our codebase.
In particular, we’ve officially dropped support for Python 3.3, PyQt4, and PyQt5 under 5.5, all versions which have been end-of-life for years, and (aside from PyQt4) have minimal or no remaining Spyder users.
Furthermore, dropping <code>PyQt4</code> in particular allows us to avoid or resolve a number of unfixable bugs specific to that version that have been causing problems for users, and opens the door to easier development in the future.
Finally, we moved our legacy documentation (and its many associated images) from the main Spyder codebase to <a href="https://github.com/spyder-ide/spyder-docs" rel="nofollow" class="link">its own repo</a>, executed a major overhaul to greatly modernize and expand the text, images, style, and presentation, and now deploy them onto <a href="https://docs.spyder-ide.org/" rel="nofollow" class="link">their own subdomain of our site</a>, all of which we will discuss in a separate post coming soon.`,ft,R,ce="Even more fixes and refinements with Spyder 3.3.1",yt,y,w=`As a quick follow-on to the 3.3.0 release, Spyder 3.3.1 fixed a handful of bugs and minor issues with the new functionality and cleaned up several other existing ones, as well made a number of lower-level maintenance and development-oriented changes—over two dozen in all.
Furthermore, several user-visible enhancements made it into the release, primary aimed at improving usability.
To make it easier for users to manage multiple environments, the selection UI under <code>Preferences &gt; Python interpreter &gt; Use the following Python interpreter</code> remembers the executables you’ve previously selected and allows quick switching between them.`,Ae,vt,Ct,qt,B,Me=`In the Console, mundane <code>ipdb</code> commands are automatically filtered from the history, and the Editor now supports syntax highlighting for the <a href="https://www.python.org/dev/peps/pep-0515/" rel="nofollow" class="link">new numeric literal syntax</a> introduced in Python 3.6.
Spyder’s tutorial has been re-written for modern Spyder as well as to be clearer and more understandable, and overhauled for better and more consistent formatting and visuals with the rest of our documentation.
Finally, our update checker now consults the Anaconda <code>defaults</code> channel rather than PyPI to determine if an update is available, so it doesn’t bug the majority of our users on Anaconda until they can actually acquire the package.`,Rt,Lt,Et="What to know and what’s next",Nt,jt,At=`If you have any questions, problems or feedback, we’d love to hear from you (just make sure you read our <a href="https://docs.spyder-ide.org/" rel="nofollow" class="link">documentation</a>, <a href="https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ" rel="nofollow" class="link">Troubleshooting Guide</a> and the other previously-mentioned resources first)!
For general questions or install issues that aren’t addressed by the above, our <a href="https://groups.google.com/group/spyderlib" rel="nofollow" class="link">Google Group</a> and <a href="https://gitter.im/spyder-ide/public" rel="nofollow" class="link">Gitter live chat</a> are a good place to ask, while <a href="https://github.com/spyder-ide/spyder" rel="nofollow" class="link">our Github</a> is the place to report bugs, request features, or help develop Spyder itself (though make sure to search our <a href="https://github.com/spyder-ide/spyder/issues?utf8=%E2%9C%93&amp;q=is%3Aissue" rel="nofollow" class="link">issues list</a> to ensure it hasn’t already been submitted).
Finally, you can follow our <a href="https://www.facebook.com/SpyderIDE/" rel="nofollow" class="link">Facebook</a> and <a href="https://twitter.com/spyder_ide" rel="nofollow" class="link">Twitter</a> for the latest Spyder news, releases, previews and tips, and help support Spyder development on <a href="https://opencollective.com/spyder" rel="nofollow" class="link">OpenCollective</a>.`,Bt,$t,Dt=`There’s plenty to look forward to in the coming days, with the official release of our all-new documentation (that’s already live now), Spyder 4 beta 1 having just been released on PyPI, conda-forge and our own <code>spyder-ide</code> channel (with a blog post coming soon), an upcoming article on our official Spyder 4 feature roadmap and more, so stay tuned!
In the meantime, happy Spydering and enjoy the new 3.3.1!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("img"),ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("pre"),Te=new Vt(!1),A=i(),Ee=o("p"),Ee.innerHTML=ue,Z=i(),We=o("pre"),te=new Vt(!1),Re=i(),Y=o("p"),Y.innerHTML=G,Be=i(),ke=o("h2"),ke.textContent=re,Ve=i(),_e=o("img"),Qe=i(),Ce=o("p"),Ce.innerHTML=ae,Je=i(),T=o("img"),Ye=i(),X=o("p"),X.innerHTML=Q,tt=i(),ne=o("img"),nt=i(),Ge=o("h2"),Ge.textContent=me,ot=i(),qe=o("p"),qe.innerHTML=fe,lt=i(),J=o("img"),it=i(),Oe=o("h2"),Oe.textContent=ve,at=i(),Ue=o("p"),Ue.innerHTML=be,st=i(),W=o("img"),rt=i(),v=o("p"),v.innerHTML=L,pt=i(),Xe=o("img"),ht=i(),et=o("p"),et.innerHTML=Fe,ut=i(),g=o("h2"),g.textContent=z,ct=i(),dt=o("p"),dt.innerHTML=Ne,ft=i(),R=o("h2"),R.textContent=ce,yt=i(),y=o("p"),y.innerHTML=w,Ae=i(),vt=o("img"),qt=i(),B=o("p"),B.innerHTML=Me,Rt=i(),Lt=o("h2"),Lt.textContent=Et,Nt=i(),jt=o("p"),jt.innerHTML=At,Bt=i(),$t=o("p"),$t.innerHTML=Dt,this.h()},l(V){n=l(V,"P",{"data-svelte-h":!0}),r(n)!=="svelte-mg9z24"&&(n.innerHTML=f),p=a(V),h=l(V,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1ykc4ml"&&(h.innerHTML=s),u=a(V),c=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-1wmevih"&&(c.textContent=he),O=a(V),b=l(V,"P",{"data-svelte-h":!0}),r(b)!=="svelte-4zemt9"&&(b.innerHTML=xe),U=a(V),k=l(V,"P",{"data-svelte-h":!0}),r(k)!=="svelte-nnkqp3"&&(k.innerHTML=we),j=a(V),_=l(V,"IMG",{src:!0,alt:!0}),ee=a(V),P=l(V,"P",{"data-svelte-h":!0}),r(P)!=="svelte-19rgc6"&&(P.innerHTML=ge),q=a(V),C=l(V,"IMG",{src:!0,alt:!0}),E=a(V),S=l(V,"P",{"data-svelte-h":!0}),r(S)!=="svelte-szwtzd"&&(S.textContent=He),N=a(V),M=l(V,"P",{"data-svelte-h":!0}),r(M)!=="svelte-1g7rkrc"&&(M.innerHTML=Le),I=a(V),x=l(V,"PRE",{class:!0});var Se=Gt(x);Te=Kt(Se,!1),Se.forEach(e),A=a(V),Ee=l(V,"P",{"data-svelte-h":!0}),r(Ee)!=="svelte-152yfdn"&&(Ee.innerHTML=ue),Z=a(V),We=l(V,"PRE",{class:!0});var zt=Gt(We);te=Kt(zt,!1),zt.forEach(e),Re=a(V),Y=l(V,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-1gxhmsj"&&(Y.innerHTML=G),Be=a(V),ke=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(ke)!=="svelte-1fdwxup"&&(ke.textContent=re),Ve=a(V),_e=l(V,"IMG",{src:!0,alt:!0}),Qe=a(V),Ce=l(V,"P",{"data-svelte-h":!0}),r(Ce)!=="svelte-1xagtyr"&&(Ce.innerHTML=ae),Je=a(V),T=l(V,"IMG",{src:!0,alt:!0}),Ye=a(V),X=l(V,"P",{"data-svelte-h":!0}),r(X)!=="svelte-2p22vt"&&(X.innerHTML=Q),tt=a(V),ne=l(V,"IMG",{src:!0,alt:!0}),nt=a(V),Ge=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(Ge)!=="svelte-ik1l0a"&&(Ge.textContent=me),ot=a(V),qe=l(V,"P",{"data-svelte-h":!0}),r(qe)!=="svelte-at3942"&&(qe.innerHTML=fe),lt=a(V),J=l(V,"IMG",{src:!0,alt:!0}),it=a(V),Oe=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(Oe)!=="svelte-1pxsziw"&&(Oe.textContent=ve),at=a(V),Ue=l(V,"P",{"data-svelte-h":!0}),r(Ue)!=="svelte-y6otfj"&&(Ue.innerHTML=be),st=a(V),W=l(V,"IMG",{src:!0,alt:!0}),rt=a(V),v=l(V,"P",{"data-svelte-h":!0}),r(v)!=="svelte-2g04g9"&&(v.innerHTML=L),pt=a(V),Xe=l(V,"IMG",{src:!0,alt:!0}),ht=a(V),et=l(V,"P",{"data-svelte-h":!0}),r(et)!=="svelte-nkjzz9"&&(et.innerHTML=Fe),ut=a(V),g=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(g)!=="svelte-1ola6uf"&&(g.textContent=z),ct=a(V),dt=l(V,"P",{"data-svelte-h":!0}),r(dt)!=="svelte-16df67"&&(dt.innerHTML=Ne),ft=a(V),R=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(R)!=="svelte-i2ag27"&&(R.textContent=ce),yt=a(V),y=l(V,"P",{"data-svelte-h":!0}),r(y)!=="svelte-18tidt1"&&(y.innerHTML=w),Ae=a(V),vt=l(V,"IMG",{src:!0,alt:!0}),qt=a(V),B=l(V,"P",{"data-svelte-h":!0}),r(B)!=="svelte-26y4pa"&&(B.innerHTML=Me),Rt=a(V),Lt=l(V,"H2",{class:!0,"data-svelte-h":!0}),r(Lt)!=="svelte-e0owd2"&&(Lt.textContent=Et),Nt=a(V),jt=l(V,"P",{"data-svelte-h":!0}),r(jt)!=="svelte-1a467wt"&&(jt.innerHTML=At),Bt=a(V),$t=l(V,"P",{"data-svelte-h":!0}),r($t)!=="svelte-18p7ian"&&($t.innerHTML=Dt),this.h()},h(){d(c,"class","section"),$e(_.src,pe="spyder-prefs-python.png")||d(_,"src",pe),d(_,"alt","Python interpreter pane of the Spyder preferences dialog, with the 'Use the following Python interpreter' option highlighted"),$e(C.src,de="spyder-remote-kernel.png")||d(C,"src",de),d(C,"alt","A remote kernel running in a system console alongside Spyder's connect to kernel dialog"),Te.a=null,d(x,"class","language-bash"),te.a=null,d(We,"class","language-bash"),d(ke,"class","section"),$e(_e.src,ie="jedi-greedy-completion-prefs.png")||d(_e,"src",ie),d(_e,"alt","Advanced tab of the IPython console pane of Spyder's preferences, with the new Jedi completion section highlighted"),$e(T.src,H="tight-layout-preferences.png")||d(T,"src",H),d(T,"alt","Graphics tab of the IPython console pane of Spyder's preferences, with the new 'Use a tight layout for inline plots' option highlighted"),$e(ne.src,oe="plot-comparison.png")||d(ne,"src",oe),d(ne,"alt","Comparison of inline plots in Spyder's IPython Console with and without the 'tight layout' option set"),d(Ge,"class","section"),$e(J.src,le="variable-explorer-ux.png")||d(J,"src",le),d(J,"alt","A Variable Explorer DataFrame editor dialog, showing the new 'Close' and 'Save and Close' buttons"),d(Oe,"class","section"),$e(W.src,se="new-authent-dialog-both.png")||d(W,"src",se),d(W,"alt","The new authentication dialogs for submitting a Github report, with a username/password and a token option"),$e(Xe.src,De="new-error-dialog-full.png")||d(Xe,"src",De),d(Xe,"alt","The new error reporting interface, with a title field, more descriptive text, and a polished UI"),d(g,"class","section"),d(R,"class","section"),$e(vt.src,Ct="interpreter-selection-ux.png")||d(vt,"src",Ct),d(vt,"alt","Python interpreter pane of Spyder's preferences, showing the new environment selection UI"),d(Lt,"class","section")},m(V,Se){t(V,n,Se),t(V,p,Se),t(V,h,Se),t(V,u,Se),t(V,c,Se),t(V,O,Se),t(V,b,Se),t(V,U,Se),t(V,k,Se),t(V,j,Se),t(V,_,Se),t(V,ee,Se),t(V,P,Se),t(V,q,Se),t(V,C,Se),t(V,E,Se),t(V,S,Se),t(V,N,Se),t(V,M,Se),t(V,I,Se),t(V,x,Se),Te.m(ye,x),t(V,A,Se),t(V,Ee,Se),t(V,Z,Se),t(V,We,Se),te.m(F,We),t(V,Re,Se),t(V,Y,Se),t(V,Be,Se),t(V,ke,Se),t(V,Ve,Se),t(V,_e,Se),t(V,Qe,Se),t(V,Ce,Se),t(V,Je,Se),t(V,T,Se),t(V,Ye,Se),t(V,X,Se),t(V,tt,Se),t(V,ne,Se),t(V,nt,Se),t(V,Ge,Se),t(V,ot,Se),t(V,qe,Se),t(V,lt,Se),t(V,J,Se),t(V,it,Se),t(V,Oe,Se),t(V,at,Se),t(V,Ue,Se),t(V,st,Se),t(V,W,Se),t(V,rt,Se),t(V,v,Se),t(V,pt,Se),t(V,Xe,Se),t(V,ht,Se),t(V,et,Se),t(V,ut,Se),t(V,g,Se),t(V,ct,Se),t(V,dt,Se),t(V,ft,Se),t(V,R,Se),t(V,yt,Se),t(V,y,Se),t(V,Ae,Se),t(V,vt,Se),t(V,qt,Se),t(V,B,Se),t(V,Rt,Se),t(V,Lt,Se),t(V,Nt,Se),t(V,jt,Se),t(V,Bt,Se),t(V,$t,Se)},p:bt,d(V){V&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(A),e(Ee),e(Z),e(We),e(Re),e(Y),e(Be),e(ke),e(Ve),e(_e),e(Qe),e(Ce),e(Je),e(T),e(Ye),e(X),e(tt),e(ne),e(nt),e(Ge),e(ot),e(qe),e(lt),e(J),e(it),e(Oe),e(at),e(Ue),e(st),e(W),e(rt),e(v),e(pt),e(Xe),e(ht),e(et),e(ut),e(g),e(ct),e(dt),e(ft),e(R),e(yt),e(y),e(Ae),e(vt),e(qt),e(B),e(Rt),e(Lt),e(Nt),e(jt),e(Bt),e($t))}}}function dl(m){let n,f;const p=[m[0],gn];let h={$$slots:{default:[ul]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(gn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const gn={title:"Spyder 3.3.0 and 3.3.1 released!",pub_date:"2018-08-14T00:00:00.000Z",tags:"Spyder3, minor-release, point-release",category:"Releases",author:"camgerlach",summary:"We're excited to announce the release of Spyder 3.3.0 and 3.3.1, with several new features and enhancements, usability improvements, significant under the hood modifications and over 40 bug fixes. We'll go over the key changes and explain what they mean for you as a user, and discuss a few additional important notes about this release and what's coming next."};function hl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let pl=class extends kt{constructor(n){super(),_t(this,n,hl,dl,xt,{})}};const cl=Object.freeze(Object.defineProperty({__proto__:null,default:pl,metadata:gn},Symbol.toStringTag,{value:"Module"}));function fl(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2020/04/thanking-the-people-behind-spyder-4/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s=`After more than three years in development and more than 5000 commits from 60 authors around the world, Spyder 4 finally saw the light on December 5, 2019!
I decided to wait until now to write a blogpost about it because shortly after the initial release, we found several critical performance issues and some regressions with respect to Spyder 3, most of which are fixed now in <a href="https://github.com/spyder-ide/spyder/releases/tag/v4.1.3" rel="nofollow" class="link">version 4.1.3</a>, released on May 8th 2020.`,u,c,he=`This new release comes with a lengthy list of user-requested features aimed at providing an enhanced development experience at the level of top general-purpose editors and IDEs, while strengthening Spyder’s specialized focus on scientific programming in Python.
The interested reader can take a look at some of them in <a href="https://www.spyder-ide.org/blog/spyder-variable-explorer/" rel="nofollow" class="link">previous</a> <a href="https://www.spyder-ide.org/blog/spyder-files-improvements/" rel="nofollow" class="link">blog</a> <a href="https://www.spyder-ide.org/blog/spyder-kite-funding/" rel="nofollow" class="link">posts</a>, and in detail in our <a href="https://github.com/spyder-ide/spyder/blob/master/CHANGELOG.md#version-400-2019-12-06" rel="nofollow" class="link">Changelog</a>.
However, this post is not meant to describe those improvements, but to acknowledge all people that contributed to making Spyder 4 possible.`,O,b,xe=`Spyder 4 is the first version developed with financial support from multiple companies and organizations, as well as donations by the international user community.
However, as a project, we couldn’t have been able to reach the level of maturity needed to receive and handle that support without the pivotal opportunities Travis Oliphant, former CEO of Anaconda and current leader of Quansight, gave me to work in Scientific Python.
Thanks to him, I became part of Anaconda Inc. in 2015; I was able to hire a small small team to improve Spyder within Anaconda in late 2016; and I was hired by Quansight to work solely on Spyder in 2018.
As with other projects in our ecosystem, such as <a href="https://github.com/bokeh/bokeh" rel="nofollow" class="link">Bokeh</a>, <a href="https://github.com/dask/dask" rel="nofollow" class="link">Dask</a> and <a href="https://github.com/numba/numba" rel="nofollow" class="link">Numba</a>, Spyder benefited immensely from Travis’ trust in the role these efforts and ours could play in the future.
He certainly believed in the vision their maintainers worked so hard to make a reality, even if their beginnings were humble and their chances of survival uncertain.
Therefore, my first big acknowledgment is to Travis: thanks for giving us a chance!`,U,k,we=`I also want to thank our community for its continued support.
As I’ve witnessed during my years as Spyder’s lead developer, many newbies and veterans alike keep choosing Spyder as their primary tool for scientific programming in Python.
It’s really you, the members of this fantastic community, which keep Spyder relevant in a highly competitive field by using and contributing back to it.
Furthermore, when the future looked grim, after my team and I were let go from Anaconda at the end of 2017 (not by Travis’ decision), a lot of users came to our rescue by making donations through our <a href="https://opencollective.com/spyder" rel="nofollow" class="link">Open Collective page</a>.
That, and a NumFOCUS development grant we received the next year, filled us with confidence and allowed us to continue with Spyder’s development in 2018, even after losing part of our team in the process.`,j,_,pe=`Last year it was also a pleasant surprise to learn that several companies were interested in seeing Spyder prosper and thrive.
Through Quansight Labs and its <a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/" rel="nofollow" class="link">Community Work Order</a> concept, we were able to sign contracts with two of them: <a href="https://www.micronas.tdk.com/en" rel="nofollow" class="link">TDK-Micronas</a> and <a href="https://kite.com/" rel="nofollow" class="link">Kite</a>.
Their support was critical to finish Spyder 4 because it allowed me to hire most of my old Anaconda team back, plus two new additions, to work full-time on the project.
Therefore, I can’t thank them enough for showing up just at the right time!`,ee,P,ge=`And finally, even when I am often seen as the public face of Spyder, due to my presence in our <a href="https://github.com/spyder-ide/spyder/issues" rel="nofollow" class="link">issue tracker</a> and <a href="https://stackoverflow.com/users/438386/carlos-cordoba" rel="nofollow" class="link">Stack Overflow</a>, it’s really the Spyder team that is in charge of implementing new features and fixing most bugs.
So my last round of acknowledgments goes to them.
I was fortunate enough to convince some of the most talented Colombian software developers to work for the project, and to attract the interest of several other equally accomplished developers from around the world.
All of them did a hell of a job in this release!`,q,C,de=`<a href="https://github.com/jnsebgosselin" rel="nofollow" class="link">Jean-Sébastien Gosselin</a> contributed our new Plots pane in its entirety; <a href="https://github.com/impact27" rel="nofollow" class="link">Quentin Peter</a> did a complete re-architecting of our IPython console, which enabled numerous improvements to our debugger; <a href="https://github.com/jitseniesen" rel="nofollow" class="link">Jitse Niesen</a> added auto-saving functionality to our editor; <a href="https://github.com/bcolsen" rel="nofollow" class="link">Brian Olsen</a> contributed the initial implementation of the <code>runcell</code> command; and <a href="https://github.com/CAM-Gerlach" rel="nofollow" class="link">CAM Gerlach</a> made significant improvements to our documentation.
<a href="https://github.com/goanpeca/" rel="nofollow" class="link">Gonzalo Peña-Castellanos</a> helped us to greatly improve the user experience of code completion and linting in the editor, implemented most of the enhancements to the Files pane, and refactored and improved our configuration system; <a href="https://github.com/andfoy" rel="nofollow" class="link">Edgar Margffoy</a> single-handedly created a client to support the same <a href="https://microsoft.github.io/language-server-protocol/" rel="nofollow" class="link">protocol</a> used by VSCode to provide completion and linting for lots of programming languages, added code snippet completions and vastly improved code folding in the editor; <a href="https://github.com/dalthviz" rel="nofollow" class="link">Daniel Althviz</a> developed the necessary infrastructure to install and use Kite smoothly within Spyder, and added the new object viewer to the Variable Explorer.
Finally, our junior developers, <a href="https://github.com/steff456" rel="nofollow" class="link">Stephannie Jimenez</a> and <a href="https://github.com/juanis2112" rel="nofollow" class="link">Juanita Gomez</a>, although still finding their way around our complex codebase, managed to make important contributions, such as improving the icons we use per file type in Files (Juanita), and allowing users to run code in an external system terminal on macOS (Stephannie).`,E,S,He=`I hope you all enjoy the results of this massive effort!
And happy Spydering!!!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("p"),S.textContent=He},l(N){n=l(N,"P",{"data-svelte-h":!0}),r(n)!=="svelte-9f6r3h"&&(n.innerHTML=f),p=a(N),h=l(N,"P",{"data-svelte-h":!0}),r(h)!=="svelte-118umf4"&&(h.innerHTML=s),u=a(N),c=l(N,"P",{"data-svelte-h":!0}),r(c)!=="svelte-19d7044"&&(c.innerHTML=he),O=a(N),b=l(N,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1t3rmts"&&(b.innerHTML=xe),U=a(N),k=l(N,"P",{"data-svelte-h":!0}),r(k)!=="svelte-q3u02e"&&(k.innerHTML=we),j=a(N),_=l(N,"P",{"data-svelte-h":!0}),r(_)!=="svelte-ma1pu9"&&(_.innerHTML=pe),ee=a(N),P=l(N,"P",{"data-svelte-h":!0}),r(P)!=="svelte-epmo9k"&&(P.innerHTML=ge),q=a(N),C=l(N,"P",{"data-svelte-h":!0}),r(C)!=="svelte-wwph68"&&(C.innerHTML=de),E=a(N),S=l(N,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1nf22io"&&(S.textContent=He)},m(N,M){t(N,n,M),t(N,p,M),t(N,h,M),t(N,u,M),t(N,c,M),t(N,O,M),t(N,b,M),t(N,U,M),t(N,k,M),t(N,j,M),t(N,_,M),t(N,ee,M),t(N,P,M),t(N,q,M),t(N,C,M),t(N,E,M),t(N,S,M)},p:bt,d(N){N&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S))}}}function ml(m){let n,f;const p=[m[0],vn];let h={$$slots:{default:[fl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(vn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const vn={title:"Thanking the people behind Spyder 4",author:"ccordoba12",tags:"Spyder4",category:"Releases",pub_date:"2020-06-12T00:00:00.000Z",summary:"After more than three years in development and more than 5000 commits from 60 authors around the world, Spyder 4 finally saw the light on December 5, 2019! I decided to wait until now to write a blogpost about it because shortly after the initial release, we found several critical performance issues and some regressions with respect to Spyder 3, most of which are fixed now in version 4.1.3, released on May 8th 2020."};function yl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let wl=class extends kt{constructor(n){super(),_t(this,n,yl,ml,xt,{})}};const gl=Object.freeze(Object.defineProperty({__proto__:null,default:wl,metadata:vn},Symbol.toStringTag,{value:"Module"}));function vl(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/" rel="nofollow" class="link">Quansight Labs website</a></em>',p,h,s=`It has been almost two months since I joined Quansight in April, to start
working on Spyder maintenance and
development. So far, it has been a very exciting and rewarding journey under
the guidance of long time Spyder maintainer
<a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Córdoba</a>.
This is the first of a series of blog posts we will be writing to showcase
updates on the development of Spyder, new planned features and news on the
road to Spyder 4.0 and beyond.`,u,c,he=`First off, I would like to give a warm welcome to
<a href="https://github.com/andfoy" rel="nofollow" class="link">Edgar Margffoy</a>,
who recently joined Quansight and will be working with the Spyder team to
take its development even further. Edgar has been a core Spyder developer
for more than two years now, and we are very excited to have his (almost)
full-time commitment to the project.`,O,b,xe="Spyder 4.0 Beta 2 released!",U,k,we=`Since August 2018, when the first beta of the 4.x series was released, the
Spyder development team has been working hard on our next release.
Over the past year, we’ve implemented the long awaited full-interface dark theme;
overhauled our entire code completion and linting architecture to use the
<a href="https://microsoft.github.io/language-server-protocol/" rel="nofollow" class="link">Language Server Protocol</a>,
opening the door to supporting many other languages in the future;
added a new Plots pane to view and manage the figures generated by your code;
and numerous other feature enhancements, bug fixes and internal improvements.`,j,_,pe="Dark theme",ee,P,ge=`A full-interface dark theme has been a
<a href="https://github.com/spyder-ide/spyder/issues/2350" rel="nofollow" class="link">long awaited feature</a>,
and is enabled by default in Spyder 4. You can still select the
light theme under  <code>Preferences &gt; Appearance</code> by either choosing a light-background
syntax-highlighting scheme, or changing <code>Interface theme</code> to <code>Light</code>.`,q,C,de,E,S,He="Pretty, right :-) ?",N,M,Le=`This enhancement was made possible by the work of
<a href="https://github.com/ColinDuquesnoy" rel="nofollow" class="link">Colin Duquesnoy</a>,
<a href="https://github.com/DPizzeta" rel="nofollow" class="link">Daniel Pizzeta</a>
and their <a href="https://github.com/ColinDuquesnoy/QDarkStyleSheet/" rel="nofollow" class="link">QDarkStyle</a>
package. The Spyder team is now actively collaborating with Colin and Daniel
to pursue the release of QDarkStyle 3.x, which will be using Spyder’s
<a href="https://github.com/spyder-ide/qtsass/" rel="nofollow" class="link">QtSASS</a>
package to harness the power of SASS/SCSS and allow users to fully customize
the theme dynamically.`,I,x,Te="Language Server Protocol architecture",ye,A,Ee=`The Language Server Protocol (LSP) was created by Microsoft for Visual Studio Code to standardize how
development tools (e.g. editors and IDEs) communicate with
servers that provide code completion, linting and related facilities for
different programming languages. With LSP, as
<a href="https://microsoft.github.io/language-server-protocol/" rel="nofollow" class="link">they describe it</a>:`,ue,Z,We=`<p>A single Language Server can be reused in multiple development tools,
which in turn can support multiple languages with minimal effort.
LSP is a win for both language providers and tooling vendors!</p>`,te,F,Re=`As of Spyder 4 Beta 2, Spyder is now one of those tools!
We developed our own client to communicate with any server that implements
LSP v3.0 through a transport layer that uses ZeroMQ sockets. Code completion,
help generation, calltips, and real-time code/style analysis were rewritten to take advantage of this
architecture, and hover hints and docstring style analysis were added.
Further LSP features, such as workspace functionality and on the fly completion, will come in future betas.`,Y,G,Be,ke,re,Ve=`Our current support is geared towards Python, using the great
<a href="https://github.com/palantir/python-language-server" rel="nofollow" class="link">Python-Language-Server</a>
package. This has allowed us to provide fine-grained configurability for
<a href="http://pycodestyle.pycqa.org/en/stable/" rel="nofollow" class="link">Pycodestyle</a> and
<a href="http://www.pydocstyle.org/en/stable/" rel="nofollow" class="link">Pydocstyle</a> options, and in future
betas we’ll also add the ability to use and configure code formatters like
YAPF and autopep8.`,_e,ie,Qe,Ce,ae,Je=`We support configuring LSP servers for additional, non-Python programming languages.
In the future, we hope to include out-of-the-box LSP integration for
some of the most popular languages in the scientific computing space,
including Fortran, Julia and C/C++.`,T,H,Ye,X,Q,tt="Plots pane",ne,oe,nt=`Similar to <a href="https://www.rstudio.com/" rel="nofollow" class="link">RStudio</a> and other data science IDEs,
Spyder now includes a Plots pane, allowing you to browse all figures created during a
session. Beyond just viewing plots, you can also zoom, save/export, copy and remove
them.`,Ge,me,ot,qe,fe,lt="But wait, there’s more!",J,le,it=`There are numerous additional features we’ve added in the previous 10
months! These include:`,Oe,ve,at=`<li><strong>Autosave</strong> and <strong>File Recovery</strong> in the editor, so Spyder can restore your
unsaved files in case it crashes or something else goes wrong.</li> <li>Dedicated <strong>Sympy</strong>, <strong>Cython</strong> and <strong>Pylab</strong> consoles, making it
very simple to quickly explore and create code for these libraries.</li> <li>OS level <strong>window pane undocking</strong>, allowing you to easily
organize panes across different monitors.</li> <li>Support for <strong><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html" rel="nofollow" class="link">multi-indexes</a></strong>
in our Dataframe viewer, making working with complex datasets much easier.</li>`,Ue,be,st=`We will describe all of these additional enhancements in greater detail in
future blog posts.`,W,se,rt="You can help!",v,L,pt=`If would like to help us test this beta release and try out the new features it offers,
you can! You can install it with <code>conda</code> (if using Anaconda/Miniconda, as we recommend),
or with <code>pip</code>; we suggest doing so in a new Conda env or <code>virtualenv</code>/<code>venv</code>
so you can easily switch between your existing Spyder install and the Spyder 4 beta.
For example, to do so with <code>conda</code>, enter the following at the Terminal/Anaconda prompt:`,Xe,De,ht,et=`<code class="language-bash">$ conda create <span class="token parameter variable">--channel</span> spyder-ide <span class="token parameter variable">--name</span> spyder-beta <span class="token assign-left variable">spyder</span><span class="token operator">=</span><span class="token number">4.0</span>.0b2
$ conda activate spyder-beta
$ spyder</code>`,Fe,ut,g=`This is a safe process because Spyder now uses a different configuration
directory for its development versions, so you can easily switch between our stable
and beta releases without worrying about one affecting the other.`,z,ct,dt=`If you find any bugs, you can report them on our
<a href="https://github.com/spyder-ide/spyder/issues" rel="nofollow" class="link">issue tracker</a>;
make sure to search for your error message or behavior before making a new one.`,Ne,ft,R="Closing remarks",ce,yt,y=`I would like to thank Quansight for the opportunity of working in open source
development on an awesome project like Spyder. I am also grateful to our
users, <a href="https://github.com/spyder-ide/spyder/graphs/contributors" rel="nofollow" class="link">contributors</a>
and <a href="https://github.com/orgs/spyder-ide/people" rel="nofollow" class="link">core developers</a> for helping
making Spyder amazing!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("h1"),b.textContent=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("h2"),_.textContent=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("h2"),x.textContent=Te,ye=i(),A=o("p"),A.innerHTML=Ee,ue=i(),Z=o("blockquote"),Z.innerHTML=We,te=i(),F=o("p"),F.textContent=Re,Y=i(),G=o("img"),ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("img"),Ce=i(),ae=o("p"),ae.textContent=Je,T=i(),H=o("img"),X=i(),Q=o("h2"),Q.textContent=tt,ne=i(),oe=o("p"),oe.innerHTML=nt,Ge=i(),me=o("img"),qe=i(),fe=o("h2"),fe.textContent=lt,J=i(),le=o("p"),le.textContent=it,Oe=i(),ve=o("ul"),ve.innerHTML=at,Ue=i(),be=o("p"),be.textContent=st,W=i(),se=o("h2"),se.textContent=rt,v=i(),L=o("p"),L.innerHTML=pt,Xe=i(),De=o("pre"),ht=new Vt(!1),Fe=i(),ut=o("p"),ut.textContent=g,z=i(),ct=o("p"),ct.innerHTML=dt,Ne=i(),ft=o("h2"),ft.textContent=R,ce=i(),yt=o("p"),yt.innerHTML=y,this.h()},l(w){n=l(w,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1wz2w3n"&&(n.innerHTML=f),p=a(w),h=l(w,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1eabgyx"&&(h.innerHTML=s),u=a(w),c=l(w,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1ihfkr1"&&(c.innerHTML=he),O=a(w),b=l(w,"H1",{"data-svelte-h":!0}),r(b)!=="svelte-7kmlv3"&&(b.textContent=xe),U=a(w),k=l(w,"P",{"data-svelte-h":!0}),r(k)!=="svelte-4cvjwe"&&(k.innerHTML=we),j=a(w),_=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(_)!=="svelte-1a2hh4r"&&(_.textContent=pe),ee=a(w),P=l(w,"P",{"data-svelte-h":!0}),r(P)!=="svelte-gf6243"&&(P.innerHTML=ge),q=a(w),C=l(w,"IMG",{src:!0,alt:!0}),E=a(w),S=l(w,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1yijxxv"&&(S.textContent=He),N=a(w),M=l(w,"P",{"data-svelte-h":!0}),r(M)!=="svelte-q9vdms"&&(M.innerHTML=Le),I=a(w),x=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(x)!=="svelte-11mywl0"&&(x.textContent=Te),ye=a(w),A=l(w,"P",{"data-svelte-h":!0}),r(A)!=="svelte-1bk4269"&&(A.innerHTML=Ee),ue=a(w),Z=l(w,"BLOCKQUOTE",{"data-svelte-h":!0}),r(Z)!=="svelte-1j0l5ju"&&(Z.innerHTML=We),te=a(w),F=l(w,"P",{"data-svelte-h":!0}),r(F)!=="svelte-awzqvi"&&(F.textContent=Re),Y=a(w),G=l(w,"IMG",{src:!0,alt:!0}),ke=a(w),re=l(w,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1cdnc4"&&(re.innerHTML=Ve),_e=a(w),ie=l(w,"IMG",{src:!0,alt:!0}),Ce=a(w),ae=l(w,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-1yzljlb"&&(ae.textContent=Je),T=a(w),H=l(w,"IMG",{src:!0,alt:!0}),X=a(w),Q=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(Q)!=="svelte-1jbtxpk"&&(Q.textContent=tt),ne=a(w),oe=l(w,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-r6n6cd"&&(oe.innerHTML=nt),Ge=a(w),me=l(w,"IMG",{src:!0,alt:!0}),qe=a(w),fe=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(fe)!=="svelte-66qyz8"&&(fe.textContent=lt),J=a(w),le=l(w,"P",{"data-svelte-h":!0}),r(le)!=="svelte-11dz64v"&&(le.textContent=it),Oe=a(w),ve=l(w,"UL",{"data-svelte-h":!0}),r(ve)!=="svelte-1u30ia1"&&(ve.innerHTML=at),Ue=a(w),be=l(w,"P",{"data-svelte-h":!0}),r(be)!=="svelte-r8brsp"&&(be.textContent=st),W=a(w),se=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(se)!=="svelte-vp73cb"&&(se.textContent=rt),v=a(w),L=l(w,"P",{"data-svelte-h":!0}),r(L)!=="svelte-ye9ycf"&&(L.innerHTML=pt),Xe=a(w),De=l(w,"PRE",{class:!0});var Ae=Gt(De);ht=Kt(Ae,!1),Ae.forEach(e),Fe=a(w),ut=l(w,"P",{"data-svelte-h":!0}),r(ut)!=="svelte-1w248v4"&&(ut.textContent=g),z=a(w),ct=l(w,"P",{"data-svelte-h":!0}),r(ct)!=="svelte-1mi7edq"&&(ct.innerHTML=dt),Ne=a(w),ft=l(w,"H2",{class:!0,"data-svelte-h":!0}),r(ft)!=="svelte-1mvchr8"&&(ft.textContent=R),ce=a(w),yt=l(w,"P",{"data-svelte-h":!0}),r(yt)!=="svelte-19r1btb"&&(yt.innerHTML=y),this.h()},h(){d(_,"class","section"),$e(C.src,de="spyder-qdarkstyle.png")||d(C,"src",de),d(C,"alt","Screenshot of the Spyder main window with default panes, with the dark theme applied across the entire interface"),d(x,"class","section"),$e(G.src,Be="spyder-hover-hint-calltip.png")||d(G,"src",Be),d(G,"alt","Hover hint and calltips"),$e(ie.src,Qe="spyder-doc-prefs.png")||d(ie,"src",Qe),d(ie,"alt","Docstring style preferences"),$e(H.src,Ye="spyder-preferences-lsp.png")||d(H,"src",Ye),d(H,"alt","Spyder Completion and Linting preferences pane, showing example PyLS servers configured for Go and Julia"),d(Q,"class","section"),$e(me.src,ot="spyder-plots.png")||d(me,"src",ot),d(me,"alt","Spyder main window, showing a figure displayed in the plots pane"),d(fe,"class","section"),d(se,"class","section"),ht.a=null,d(De,"class","language-bash"),d(ft,"class","section")},m(w,Ae){t(w,n,Ae),t(w,p,Ae),t(w,h,Ae),t(w,u,Ae),t(w,c,Ae),t(w,O,Ae),t(w,b,Ae),t(w,U,Ae),t(w,k,Ae),t(w,j,Ae),t(w,_,Ae),t(w,ee,Ae),t(w,P,Ae),t(w,q,Ae),t(w,C,Ae),t(w,E,Ae),t(w,S,Ae),t(w,N,Ae),t(w,M,Ae),t(w,I,Ae),t(w,x,Ae),t(w,ye,Ae),t(w,A,Ae),t(w,ue,Ae),t(w,Z,Ae),t(w,te,Ae),t(w,F,Ae),t(w,Y,Ae),t(w,G,Ae),t(w,ke,Ae),t(w,re,Ae),t(w,_e,Ae),t(w,ie,Ae),t(w,Ce,Ae),t(w,ae,Ae),t(w,T,Ae),t(w,H,Ae),t(w,X,Ae),t(w,Q,Ae),t(w,ne,Ae),t(w,oe,Ae),t(w,Ge,Ae),t(w,me,Ae),t(w,qe,Ae),t(w,fe,Ae),t(w,J,Ae),t(w,le,Ae),t(w,Oe,Ae),t(w,ve,Ae),t(w,Ue,Ae),t(w,be,Ae),t(w,W,Ae),t(w,se,Ae),t(w,v,Ae),t(w,L,Ae),t(w,Xe,Ae),t(w,De,Ae),ht.m(et,De),t(w,Fe,Ae),t(w,ut,Ae),t(w,z,Ae),t(w,ct,Ae),t(w,Ne,Ae),t(w,ft,Ae),t(w,ce,Ae),t(w,yt,Ae)},p:bt,d(w){w&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(Fe),e(ut),e(z),e(ct),e(Ne),e(ft),e(ce),e(yt))}}}function bl(m){let n,f;const p=[m[0],bn];let h={$$slots:{default:[vl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(bn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const bn={title:"Spyder 4.0 takes a big step closer with the release of Beta 2!",pub_date:"2019-05-20T00:00:00.000Z",tags:"Spyder4, beta",category:"Releases",author:"goanpeca",summary:"We're excited to announce the release of the milestone Beta 2, which represents nearly a year of intense work on Spyder's completion/introspection/help/analysis architecture, dark theme, plot pane, autosave, and much more. This is the first of a new series of blog posts chronicling our final push toward the Spyder 4.0 release, and the new features we've implemented along the way,"};function xl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let kl=class extends kt{constructor(n){super(),_t(this,n,xl,bl,xt,{})}};const _l=Object.freeze(Object.defineProperty({__proto__:null,default:kl,metadata:bn},Symbol.toStringTag,{value:"Module"}));function Cl(m){let n,f=`After two years in development and more than 2600 commits from over two dozen authors around the world, <a href="https://github.com/spyder-ide/spyder/releases/tag/v6.0.0" rel="nofollow" class="link">Spyder 6.0.0</a> had its stable release on September 3, 2024!
Now that <a href="https://github.com/spyder-ide/spyder/releases/tag/v6.0.1" rel="nofollow" class="link">6.0.1 is out</a> and the dust has settled, we’d like to formally announce the release here, summarize the major changes, thank those who’ve contributed to it, and introduce a series of posts highlighting its biggest new features and improvements.`,p,h,s=`You can <a href="/download" class="link">download the latest installer on our website</a> (recommended), or you can also install this version via <a href="https://docs.spyder-ide.org/installation.html" rel="nofollow" class="link">a variety of other methods</a>, including Conda and Conda distributions, Pip, WinPython, OS and distro package managers, from source and GitHub and more.
We can’t wait for you to try Spyder 6.0 if you haven’t already, and to find out more about what we’re excited about, read on!`,u,c,he="Highlights and new features",O,b,xe=`This new release comes with a lengthy list of user-requested features that improve both Spyder’s interactive computing facilities and its software development capabilities, along with many UI and usability enhancements.
Additionally, it completes the migration process to the new plugin API introduced in Spyder 5 and adds further new features for Spyder plugin developers, allowing them to build even more powerful extensions for our beloved IDE.
Overall, over two dozen contributors made more than 2600 commits and contributed 312 pull requests closing 137 unique issues, adding or modifying approximately 200 000 lines of code across 900 files.
We’re excited that in less than a month and a half since being published, just our new standalone installers for Spyder 6.0.0 and 6.0.1 have been downloaded over 350 000 times across Windows, Mac and Linux!`,U,k,we=`We’ll have followup blogs by each of our team members highlighting the biggest improvements, including among others our new remote development architecture, UI/UX improvements, updated plugins, and a new website, docs site and translations, in addition to <a href="../cbi-installers" class="link">Ryan’s existing post</a> on the Conda-based installers/updaters.
Keep an eye out for those in the coming weeks!`,j,_,pe='In the meantime, here’s a summary of what’s new in the Spyder 6 release! Check out the <a href="https://github.com/spyder-ide/spyder/blob/6.x/changelogs/Spyder-6.md#version-600-2024-09-03" rel="nofollow" class="link">Spyder 6 Changelog</a> for a complete list of new features, UI improvements, bug fixes, API changes and more.',ee,P,ge="Major new features",q,C,de='<li>Initial support for connecting to remote workstations, cloud desktops, computing clusters and other severs via SSH, allowing automatically installing and starting a kernel and running code remotely (part of our <a href="../czi-grant" class="link">CZI grant</a>)</li> <li><a href="../cbi-installers" class="link">Conda-based installers</a> for Windows, macOS and Linux, with more convenient and robust updates, newer Python versions and opening the door to many future features</li> <li>A Debugger pane to explore the stack frame of the current debugging session, centralizing debugger functionality in one place, and including a new button to enter the debugger during the current execution</li>',E,S,He="Global enhancements",N,M,Le="<li>Add ability to manage external plugins (e.g. Spyder-Notebook) in <code>Preferences &gt; Plugins</code></li> <li>The interface font used by the application is now configurable</li> <li>Support accepting Chinese, Japanese and Korean input on Linux</li> <li>Show intro message for panes that don’t display content at startup</li> <li>Experimental support for Qt 6 and increase minimum version to Qt 5.15</li>",I,x,Te="Editor and files",ye,A,Ee="<li>Quick switcher (Ctrl/Cmd-P) can now browse and open files present in the current project</li> <li>Allow files to be opened in the Editor by pasting their path in the Working Directory toolbar item</li> <li>Allow copying the absolute and relative paths of the current file in the Editor tab context menu</li> <li>Improve performance in Projects when checking for filesystem changes</li>",ue,Z,We="IPython Console",te,F,Re="<li>New submenu to start a new console in any registered Conda or Pyenv environment in one click</li> <li>Kernel restarts are now much faster</li> <li>Environment variables declared in <code>~/.bashrc</code> or <code>~/.zhrc</code> are now passed to the console</li>",Y,G,Be="Variable Explorer",ke,re,Ve="<li>New refresh button for viewer windows to update the variables within them (at last!)</li> <li>All real number data types are now supported in the DataFrame viewer</li> <li>Add back ability to load HDF5 and Dicom files (removed in Spyder 5)</li> <li>Improve how options are displayed and handled in the different viewers</li> <li>New button to indicate when variables are being filtered</li>",_e,ie,Qe="Plots",Ce,ae,Je="<li>Plots pane is now used to display figures generated by the Variable Explorer</li> <li>Increase DPI of Matplotlib plots so they look better on high resolution screens</li> <li>Respect Matplotlib user settings configured outside Spyder</li> <li>Matplotlib backend and Python environment information now shown in the status bar</li>",T,H,Ye="Major plugin changes",X,Q,tt="<li>Add a Debugger plugin to centralize all functionality related to debugging</li> <li>Port the Editor to the new API introduced in Spyder 5, completing Spyder’s migration of internal panes to fully modular plugins</li> <li>Generalize the Run plugin to support generic inputs and executors, allowing custom plugins to run specific files, cells and selections and display the results</li> <li>Add a Switcher plugin for the files and symbols switcher</li> <li>Add an External Terminal plugin to execute Python and Bash/Batch/PwSh files in a system terminal</li> <li>Declare a proper API for the Projects plugin.</li> <li>Move the former Breakpoints plugin’s functionality to the new Debugger plugin</li>",ne,oe,nt="A special thanks from Spyder",Ge,me,ot=`First and foremost, we’d like to thank <em><strong>YOU</strong></em>, our amazing Spyder users, for helping use, test, support, and contribute to Spyder!
Its because of you all, the members of this fantastic community, that we’re motivated and able to keep making Spyder better for everyone!
We’d like to especially thank the many folks who financially support Spyder development via charitable donations through our <a href="https://opencollective.com/spyder" rel="nofollow" class="link">Open Collective page</a>.
If you like Spyder and would like to see it keep moving forward and and becoming even better, we appreciate whatever you are able to give, financially or otherwise.
If every <del>Wikipedia</del> Spyder user gave $1 per year, we would be able to cover our entire annual budget several times over, so every little bit helps!`,qe,fe,lt=`Next, we’d like to give a round of applause to our many dedicated contributors who made significant code contributions to this release: <a href="https://github.com/AngelaRemolina" rel="nofollow" class="link">@AngelaRemolina</a>, <a href="https://github.com/Mte90" rel="nofollow" class="link">@Mte90</a>, <a href="https://github.com/dpturibio" rel="nofollow" class="link">@dpturibio</a>, <a href="https://github.com/rear1019" rel="nofollow" class="link">@rear1019</a>, <a href="https://github.com/stevetracvc" rel="nofollow" class="link">@stevetracvc</a>, <a href="https://github.com/remisalmon" rel="nofollow" class="link">@remisalmon</a>, <a href="https://github.com/sthibaul" rel="nofollow" class="link">@sthibaul</a>, <a href="https://github.com/hmaarrfk" rel="nofollow" class="link">@hmaarrfk</a>, <a href="https://github.com/jnsebgosselin" rel="nofollow" class="link">@jnsebgosselin</a>, <a href="https://github.com/rhkarls" rel="nofollow" class="link">@rhkarls</a>, <a href="https://github.com/musicinmybrain" rel="nofollow" class="link">@musicinmybrain</a>, <a href="https://github.com/isabela-pf" rel="nofollow" class="link">@isabela-pf</a>, <a href="https://github.com/habibmy" rel="nofollow" class="link">@habibmy</a>, and <a href="https://github.com/kevinsmia1939" rel="nofollow" class="link">@kevinsmia1939</a>.
We also want to thank <a href="https://crowdin.com/project/spyder/activity-stream" rel="nofollow" class="link">our translators</a>, who make it possible to use Spyder in nearly a dozen different languages!`,J,le,it=`We’d also like to thank our other major fiscal sponsors, <a href="https://numfocus.org/" rel="nofollow" class="link">NumFOCUS</a> and the <a href="https://chanzuckerberg.com/" rel="nofollow" class="link">Chan Zuckerberg Initiative</a>!
NumFOCUS is a 501(c)3-registered charitable nonprofit that serves as the current home of the Spyder project along with the rest of the core PyData ecosystem.
We couldn’t have gotten where we are now without their help, as well as their <a href="https://numfocus.org/programs/small-development-grants" rel="nofollow" class="link">Small Development Grants</a> that helped fund a number of features in this release.
CZI has provided critical funding for Spyder 6, particularly the new remote development architecture, through a grant in Cycle 5 of its <a href="https://chanzuckerberg.com/eoss/" rel="nofollow" class="link">Essential Open Source Software for Science program</a>.`,Oe,ve,at=`Finally, we’d like to extend personal thanks to our fellow current and former core developers and Spyder team members for their amazing efforts to make Spyder 6 possible!
In no particular order, and mentioning only the most prominent contribution of each person:`,Ue,be,st='<li><a href="https://github.com/mrclary" rel="nofollow" class="link">Ryan Clary</a> created and maintains our brand new Conda-based installers and much of their related features and infrastructure</li> <li><a href="https://github.com/jitseniesen" rel="nofollow" class="link">Jitse Niesen</a> updated and improved many of our plugins for Spyder 6, including <a href="https://github.com/spyder-ide/spyder-notebook" rel="nofollow" class="link">Spyder-Notebook</a>, <a href="https://github.com/spyder-ide/spyder-unittest" rel="nofollow" class="link">Spyder-Unittest</a> and <a href="https://github.com/spyder-ide/spyder-line-profiler" rel="nofollow" class="link">Spyder-Line-Profiler</a></li> <li><a href="https://github.com/impact27" rel="nofollow" class="link">Quentin Peter</a> created the new Debugger pane and improved the IPython Console and Spyder-Kernels</li> <li><a href="https://github.com/dalthviz" rel="nofollow" class="link">Daniel Althviz</a> served as Release Manager throughout the Spyder 6 cycle, ported the Editor to our new API and mentored Juan Sebastian</li> <li><a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan Sebastian Bautista</a> made many UI/UX improvements to make Spyder’s interface more user-friendly</li> <li><a href="https://github.com/hlouzada" rel="nofollow" class="link">Hendrik Louzada</a> created the backend for the whole remote development architecture</li> <li><a href="https://github.com/andfoy" rel="nofollow" class="link">Edgar Margffoy</a> and <a href="https://github.com/steff456" rel="nofollow" class="link">Stephannie Jimenez</a> created a brand new, pluggable and configurable Run architecture for Spyder as well as several other major API/under the hood improvements</li> <li><a href="https://github.com/conradolandia" rel="nofollow" class="link">Andrés Montoya</a> helped improve the UI/UX, design and theming of Spyder 6 and created this brand new website for the project</li> <li>And of course, <a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Cordoba</a> lead the project throughout the Spyder 6 development process, both managing and supporting the team as well as making innumerable contributions of his own</li>',W,se,rt="Three cheers for everyone who made Spyder 6 a reality!",v,L,pt="What’s next",Xe,De,ht=`Spyder 6.0 will continue to receive point release updates with bug fixes and minor improvements, but we’re already working on the next big release for Spyder, 6.1!
We currently are planning for it to be closer to a major release than a typical minor release, with a number of further new features and enhancements building directly on the groundwork introduced in Spyder 6.0.
Our plans and the specific features are likely to evolve as we get closer to release, so stay tuned to this blog and <a href="https://x.com/Spyder_IDE" rel="nofollow" class="link">@Spyder_IDE on Twitter/X</a> for updates.
However, some of the biggest new features we hope to bring you include:`,et,Fe,ut="<li>Major improvements to the remote development platform first introduced in 6.0, including the ability to easily open, manage and run remote files just as if you were working locally.</li> <li>A new built-in package and environment manager that’ll let you create Conda environments (automatically linked to projects) and install packages right from the Spyder graphical interface, leveraging our existing Conda-based installers.</li> <li>A graphical Spyder plugin browser, allowing you to find, install and manage external plugins with one click in a standalone-installed Spyder.</li>",g,z,ct=`Want to start using Spyder 6 right now?
The easiest way is by downloading our own installers for Windows, macOS and Linux <a href="/download" class="link">from our website</a>.
You can also <a href="https://docs.spyder-ide.org/installation.html" rel="nofollow" class="link">install it via a variety of other methods</a>, such as  Conda and Conda distributions, Pip, WinPython, OS and distro package managers and from source on GitHub.`,dt,Ne,ft=`Keep in mind that if you use our standalone installers and want to install your own Python packages not included with Spyder, for now you’ll need to have another Python environment installed on your machine and select it in Spyder, if you don’t have one already configured.
We have an FAQ entry on <a href="https://docs.spyder-ide.org/faq.html#using-packages-installer" rel="nofollow" class="link">how to install one</a> that includes a short video tutorial and step by step instructions, as well as an entry on <a href="http://docs.spyder-ide.org/faq.html#using-existing-environment" rel="nofollow" class="link">connecting an existing environment</a>.`,R,ce,yt="We hope you all enjoy the new features and improvements in Spyder 6, and as as always, happy Spydering!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("h3"),P.textContent=ge,q=i(),C=o("ul"),C.innerHTML=de,E=i(),S=o("h3"),S.textContent=He,N=i(),M=o("ul"),M.innerHTML=Le,I=i(),x=o("h3"),x.textContent=Te,ye=i(),A=o("ul"),A.innerHTML=Ee,ue=i(),Z=o("h3"),Z.textContent=We,te=i(),F=o("ul"),F.innerHTML=Re,Y=i(),G=o("h3"),G.textContent=Be,ke=i(),re=o("ul"),re.innerHTML=Ve,_e=i(),ie=o("h3"),ie.textContent=Qe,Ce=i(),ae=o("ul"),ae.innerHTML=Je,T=i(),H=o("h3"),H.textContent=Ye,X=i(),Q=o("ul"),Q.innerHTML=tt,ne=i(),oe=o("h2"),oe.textContent=nt,Ge=i(),me=o("p"),me.innerHTML=ot,qe=i(),fe=o("p"),fe.innerHTML=lt,J=i(),le=o("p"),le.innerHTML=it,Oe=i(),ve=o("p"),ve.textContent=at,Ue=i(),be=o("ul"),be.innerHTML=st,W=i(),se=o("p"),se.textContent=rt,v=i(),L=o("h2"),L.textContent=pt,Xe=i(),De=o("p"),De.innerHTML=ht,et=i(),Fe=o("ul"),Fe.innerHTML=ut,g=i(),z=o("p"),z.innerHTML=ct,dt=i(),Ne=o("p"),Ne.innerHTML=ft,R=i(),ce=o("p"),ce.textContent=yt,this.h()},l(y){n=l(y,"P",{"data-svelte-h":!0}),r(n)!=="svelte-151irch"&&(n.innerHTML=f),p=a(y),h=l(y,"P",{"data-svelte-h":!0}),r(h)!=="svelte-4ecn6b"&&(h.innerHTML=s),u=a(y),c=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-1wslmct"&&(c.textContent=he),O=a(y),b=l(y,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1erhi7e"&&(b.textContent=xe),U=a(y),k=l(y,"P",{"data-svelte-h":!0}),r(k)!=="svelte-r82lif"&&(k.innerHTML=we),j=a(y),_=l(y,"P",{"data-svelte-h":!0}),r(_)!=="svelte-1i5lqwh"&&(_.innerHTML=pe),ee=a(y),P=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-2xwfvo"&&(P.textContent=ge),q=a(y),C=l(y,"UL",{"data-svelte-h":!0}),r(C)!=="svelte-bbcsac"&&(C.innerHTML=de),E=a(y),S=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(S)!=="svelte-2z3iiu"&&(S.textContent=He),N=a(y),M=l(y,"UL",{"data-svelte-h":!0}),r(M)!=="svelte-1rqlz28"&&(M.innerHTML=Le),I=a(y),x=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(x)!=="svelte-92xjzf"&&(x.textContent=Te),ye=a(y),A=l(y,"UL",{"data-svelte-h":!0}),r(A)!=="svelte-1oz08qb"&&(A.innerHTML=Ee),ue=a(y),Z=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(Z)!=="svelte-175wkxw"&&(Z.textContent=We),te=a(y),F=l(y,"UL",{"data-svelte-h":!0}),r(F)!=="svelte-1pnxvbu"&&(F.innerHTML=Re),Y=a(y),G=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-c4sqtv"&&(G.textContent=Be),ke=a(y),re=l(y,"UL",{"data-svelte-h":!0}),r(re)!=="svelte-1jqhg91"&&(re.innerHTML=Ve),_e=a(y),ie=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(ie)!=="svelte-1xary64"&&(ie.textContent=Qe),Ce=a(y),ae=l(y,"UL",{"data-svelte-h":!0}),r(ae)!=="svelte-13w56qc"&&(ae.innerHTML=Je),T=a(y),H=l(y,"H3",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-9tgovd"&&(H.textContent=Ye),X=a(y),Q=l(y,"UL",{"data-svelte-h":!0}),r(Q)!=="svelte-r84eif"&&(Q.innerHTML=tt),ne=a(y),oe=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(oe)!=="svelte-qd82uy"&&(oe.textContent=nt),Ge=a(y),me=l(y,"P",{"data-svelte-h":!0}),r(me)!=="svelte-zqdykh"&&(me.innerHTML=ot),qe=a(y),fe=l(y,"P",{"data-svelte-h":!0}),r(fe)!=="svelte-nmc92n"&&(fe.innerHTML=lt),J=a(y),le=l(y,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1oj010m"&&(le.innerHTML=it),Oe=a(y),ve=l(y,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-wiipsy"&&(ve.textContent=at),Ue=a(y),be=l(y,"UL",{"data-svelte-h":!0}),r(be)!=="svelte-30evor"&&(be.innerHTML=st),W=a(y),se=l(y,"P",{"data-svelte-h":!0}),r(se)!=="svelte-ai0350"&&(se.textContent=rt),v=a(y),L=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(L)!=="svelte-rht9sr"&&(L.textContent=pt),Xe=a(y),De=l(y,"P",{"data-svelte-h":!0}),r(De)!=="svelte-1ezsxu0"&&(De.innerHTML=ht),et=a(y),Fe=l(y,"UL",{"data-svelte-h":!0}),r(Fe)!=="svelte-i2sf6t"&&(Fe.innerHTML=ut),g=a(y),z=l(y,"P",{"data-svelte-h":!0}),r(z)!=="svelte-1u0ihyj"&&(z.innerHTML=ct),dt=a(y),Ne=l(y,"P",{"data-svelte-h":!0}),r(Ne)!=="svelte-rbnnby"&&(Ne.innerHTML=ft),R=a(y),ce=l(y,"P",{"data-svelte-h":!0}),r(ce)!=="svelte-2mvmj3"&&(ce.textContent=yt),this.h()},h(){d(c,"class","section"),d(P,"class","subsection"),d(S,"class","subsection"),d(x,"class","subsection"),d(Z,"class","subsection"),d(G,"class","subsection"),d(ie,"class","subsection"),d(H,"class","subsection"),d(oe,"class","section"),d(L,"class","section")},m(y,w){t(y,n,w),t(y,p,w),t(y,h,w),t(y,u,w),t(y,c,w),t(y,O,w),t(y,b,w),t(y,U,w),t(y,k,w),t(y,j,w),t(y,_,w),t(y,ee,w),t(y,P,w),t(y,q,w),t(y,C,w),t(y,E,w),t(y,S,w),t(y,N,w),t(y,M,w),t(y,I,w),t(y,x,w),t(y,ye,w),t(y,A,w),t(y,ue,w),t(y,Z,w),t(y,te,w),t(y,F,w),t(y,Y,w),t(y,G,w),t(y,ke,w),t(y,re,w),t(y,_e,w),t(y,ie,w),t(y,Ce,w),t(y,ae,w),t(y,T,w),t(y,H,w),t(y,X,w),t(y,Q,w),t(y,ne,w),t(y,oe,w),t(y,Ge,w),t(y,me,w),t(y,qe,w),t(y,fe,w),t(y,J,w),t(y,le,w),t(y,Oe,w),t(y,ve,w),t(y,Ue,w),t(y,be,w),t(y,W,w),t(y,se,w),t(y,v,w),t(y,L,w),t(y,Xe,w),t(y,De,w),t(y,et,w),t(y,Fe,w),t(y,g,w),t(y,z,w),t(y,dt,w),t(y,Ne,w),t(y,R,w),t(y,ce,w)},p:bt,d(y){y&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne),e(R),e(ce))}}}function Sl(m){let n,f;const p=[m[0],xn];let h={$$slots:{default:[Cl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(xn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const xn={title:"Officially announcing the release of Spyder 6!",author:"camgerlach",tags:"Release-Announcement",category:"Releases",pub_date:"2024-10-17T00:00:00.000Z",summary:"After two years in development and more than 2600 commits from over two dozen authors around the world, Spyder 6.0.0 had its stable release on September 3, 2024! Now that 6.0.1 is out and the dust has settled, we'd like to formally announce the release here, thank those who've contributed to it, and introduce a series of posts highlighting its major new features and improvements that haven't already been showcased here."};function Tl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Pl=class extends kt{constructor(n){super(),_t(this,n,Tl,Sl,xt,{})}};const Ml=Object.freeze(Object.defineProperty({__proto__:null,default:Pl,metadata:xn},Symbol.toStringTag,{value:"Module"}));function Hl(m){let n,f=`The Spyder team and <a href="https://cfp.scipy.org/2023/speaker/SE7SNC/" rel="nofollow" class="link">collaborators</a> hosted <a href="https://cfp.scipy.org/2023/talk/LGZUNG/" rel="nofollow" class="link">a Birds of a Feather (BoF) session</a> at <a href="https://www.scipy2023.scipy.org/" rel="nofollow" class="link">SciPy 2023</a>, focused on moving beyond just scripts and notebooks toward truly reproducible, reusable research.
In <a href="https://www.spyder-ide.org/blog/reusable-research-bof-scipy-2023/" rel="nofollow" class="link">Part 1 of this two-part series</a>, we went over our motivation and goals for the session and the challenges that attendees brought up.
Now, we’ll review the tips, strategies, tools and platforms (including Spyder!) that participants shared as ways to address these obstacles.
We’d again like to thank <a href="https://cfp.scipy.org/2023/speaker/SE7SNC/" rel="nofollow" class="link">Juanita Gomez</a> for helping organize the BoF, Hari for his hard work compiling a summary of the outcomes, and everyone for attending and sharing such great ideas and insights!`,p,h,s="Making notebooks more reusable",u,c,he=`As far as reproducibility is concerned, it was brought up that it can be difficult to easily compare outputs between notebooks created by different researchers.
In response, one participant mentioned that VSCode recently made <a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks#_custom-notebook-diffing" rel="nofollow" class="link">an improvement</a> to the notebook diff viewers to more easily show just the code changes.
However, users stressed that it was critical to be able to diff the actual notebook output, not just its contents, and expressed a desire for a tool to cover that aspect.`,O,b,xe=`In response to these concerns, others responded that notebooks should not be considered a unit of reproducible research, which should instead be a complete software project, including notebooks or scripts, an environment/requirements file and a record of commands to run there.
They recommended the <a href="https://www.anaconda.com/blog/8-levels-of-reproducibility" rel="nofollow" class="link">8-levels of Reproducibility</a> and <a href="https://github.com/conda-incubator/conda-project" rel="nofollow" class="link">Conda Project</a> to help guide and implement this.`,U,k,we=`Additionally, attendees recommended <a href="https://papermill.readthedocs.io/en/latest/" rel="nofollow" class="link">Papermill</a>, describing it as a very useful tool for parameterizing and executing notebooks programmatically.
Others suggested <a href="https://containers.dev/" rel="nofollow" class="link">Devcontainers</a>, to allow collaborating with a lab group or team in a shared environment and seeing everything on their screen, as well as <a href="https://code.visualstudio.com/learn/collaboration/live-share" rel="nofollow" class="link">Live Share in VSCode</a>.`,j,_,pe=`Participants also expressed frustration that despite notebooks being intended to make programming more literate, this often does not happen in practice.
Beginners like the interactivity in notebooks because they don’t know how to use more advanced programming tools, but they don’t always take advantage of their readability features.
To address this, attendees stressed the importance of getting users accustomed to best practices that can also be helpful for reproducibility.
A participant mentioned a <code>nbflake8</code> tool to lint notebooks, though it could not be easily found online, and others wished for a <a href="https://github.com/astral-sh/ruff/issues/1218" rel="nofollow" class="link">Ruff implementation</a> (which at the time of this writing is <a href="https://github.com/astral-sh/ruff/issues/5188" rel="nofollow" class="link">now complete</a>).`,ee,P,ge="Migrating notebooks to modules",q,C,de=`As one participant put it, “I love notebooks, and also love modules, and love the flow of code from notebooks into modules once it approaches that point.”
They went on to describe modules as a key unit of documented, tested code, but which doesn’t mean a lot on its own, whereas combined with a notebook, it gives them context and meaning.
For communities that may be afraid of modules, the participant recommended trying to make creating and transitioning to them easier, so users have fully importable, reusable Python code.
For students, notebooks often turn into a fancy scratch pad or script file, and once they get stuff that works, they can move that stuff out into modules, and then the notebooks start to morph into examples and the history of what the work was about that can be interpreted by other researchers.`,E,S,He=`Other attendees chimed in with similar stories, with a NIST researcher mentioning this is an area they’d been working on for 10 years, with their approach being putting the stuff they want to be modular in a regular Python module, and then have a Jupyter notebook that shows an example using the code, such as in their <a href="https://github.com/usnistgov/iprPy" rel="nofollow" class="link">IPRPy project</a>.
To aid this process, participants suggested tools like the <a href="https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring" rel="nofollow" class="link">Autodocstring extension in VSCode</a> and the docstring generator built into <a href="https://docs.spyder-ide.org/current/panes/editor.html" rel="nofollow" class="link">Spyder’s editor</a> as great ways to reduce the friction for students when writing documentation, as they just add the triple quotes and the IDE generates a pre-filled docstring for them.`,N,M,Le=`An important reproducibility and reusability tool many cited for this was <a href="https://github.com/fastai/nbdev" rel="nofollow" class="link">nbdev</a>, which can allow users to develop their code and let it grow, and then eventually export the parts as modules at the end.
According to attendees, its documentation mostly talks about everything as packages, but it can also be used for individual notebooks and modules.
Some participants were initially hesitant to show it to their students since they’re early Python programmers, but it was actually quite easy for them, only requiring as little as one line of code at the end.
(Unfortunately as of this writing, it seems ndbdev development <a href="https://hamel.dev/blog/posts/nbdev/" rel="nofollow" class="link">has stalled</a> due to its expected commercial opportunities not materializing.)
Others asked for more documentation resources for this, since they were still learning Python themselves and would like to learn more about this and teach it to their students.
In addition to this very blog post and guide, one attendee brought up that they did <a href="https://www.youtube.com/watch?v=l7zS8Ld4_iA" rel="nofollow" class="link">a tutorial on that topic at SciPy</a>, adding that the documentation is pretty intimidating but it would be great to have something more focused on smaller-scale usage.`,I,x,Te=`As additional approaches, attendees mentioned they have their students use <a href="https://jupytext.readthedocs.io/" rel="nofollow" class="link">Jupytext</a>, which helps the student to convert notebooks to Python files that can be committed to a Git repository.
This allows the code to be committed as a Python file, while allowing Jupyter to open it as a notebook and continue working on it.
Others brought up <a href="https://nbconvert.readthedocs.io/en/latest/index.html" rel="nofollow" class="link">nb-convert</a>, a command line tool that can convert notebooks to many different formats including a Python script, which is integrated into IDEs like Spyder, and that there is also a <a href="https://code.visualstudio.com/docs/datascience/jupyter-notebooks#_export-your-jupyter-notebook" rel="nofollow" class="link">similar VSCode feature</a>.`,ye,A,Ee="Enabling reusable Python packages",ue,Z,We=`When it comes to overall workflow, all agreed that going from a script or notebook to a reusable, installable Python package could be a major challenge, especially for students and non-programmers.
Attendees from NASA mentioned that for their projects everything has to be documented, and one of the things they’ve struggled with was converting a notebook to the type of report NASA is typically looking for.
Others described their workflow being as simple and “old school” as writing a <code>aaa_readme.txt</code> file where they record a diary of what they were doing on that project so if they have a break working on it, they can go back to those notes and remind themselves.`,te,F,Re=`To help address this, participants recommended a “really cool” <a href="https://github.com/showyourwork/showyourwork" rel="nofollow" class="link">tool called “Show Your Work”</a> that comes out of the astrophysics community, which is primarily aimed at producing a paper at the end but also a Python package, and includes all the steps that show users’ work along the way.
It is built around a tool called <a href="https://snakemake.readthedocs.io/" rel="nofollow" class="link">Snakemake</a>, which then sets up a template for both the Python package and the paper.
Additionally, attendees described it as having a “really helpful” guide for getting started and ensuring all of a user’s projects have the same structure.
It was brought up that Azel Donath, maintainer of Gammapy and speaker at SciPy 2023, published <a href="https://arxiv.org/abs/2308.13584" rel="nofollow" class="link">their Gammapy paper</a> by <a href="https://github.com/gammapy/gammapy-v1.0-paper" rel="nofollow" class="link">using this tool</a>.`,Y,G,Be=`As a followup, participants asked how this differed from <a href="https://quarto.org/" rel="nofollow" class="link">Quarto</a>, to which the response was that Quarto is much more general, whereas Show Your Work was specifically built to allow users to produce a PDF in LaTeX at the end.
Others mentioned <a href="https://github.com/duecredit/duecredit/" rel="nofollow" class="link">Duecredit</a>, a related tool for citing open source authors which looks at code and finds the authors (via Git commits) that wrote it.`,ke,re,Ve=`Additionally, users expressed particular appreciation for the <a href="https://github.com/scientific-python/cookie" rel="nofollow" class="link">Cookiecutter template</a> that <a href="https://iscinumpy.dev/" rel="nofollow" class="link">Henry Schreiner III</a> has for packaging.
They mentioned that a lot of their workflows are just messing around with their data, and having something like a package structure from the get go helps make it easier to not miss things.
As a followup, a nuclear engineer mentioned they often have two week projects leveraging Jupyter at their center, with a cookiecutter template that has Sphinx, and a directory structure, and metadata that looks familiar and has everything set up by default.
They described how this particularly helps ensure that different colleagues and team members are on the same page with doing things.
Finally, others suggested the <a href="https://drivendata.github.io/cookiecutter-data-science/" rel="nofollow" class="link">data-driven Cookiecutter template</a>, which provides an ordered structure for where things go, what they are named and how they are run.`,_e,ie,Qe="Next steps",Ce,ae,Je=`Now that we’ve gathered a wealth of community feedback, ideas and resources, we’re currently working to further translate these insights into an actionable guide (or series of such) on a community platform, to make it easier for everyone to apply them.
Keep an eye out for that, and until then, happy Spydering!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("h2"),h.textContent=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("h2"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("p"),S.innerHTML=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("p"),x.innerHTML=Te,ye=i(),A=o("h2"),A.textContent=Ee,ue=i(),Z=o("p"),Z.innerHTML=We,te=i(),F=o("p"),F.innerHTML=Re,Y=i(),G=o("p"),G.innerHTML=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("h2"),ie.textContent=Qe,Ce=i(),ae=o("p"),ae.textContent=Je,this.h()},l(T){n=l(T,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1rsron7"&&(n.innerHTML=f),p=a(T),h=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(h)!=="svelte-1oivyqz"&&(h.textContent=s),u=a(T),c=l(T,"P",{"data-svelte-h":!0}),r(c)!=="svelte-usjxwz"&&(c.innerHTML=he),O=a(T),b=l(T,"P",{"data-svelte-h":!0}),r(b)!=="svelte-hx5j5j"&&(b.innerHTML=xe),U=a(T),k=l(T,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1089bxp"&&(k.innerHTML=we),j=a(T),_=l(T,"P",{"data-svelte-h":!0}),r(_)!=="svelte-1ms9red"&&(_.innerHTML=pe),ee=a(T),P=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-paakq"&&(P.textContent=ge),q=a(T),C=l(T,"P",{"data-svelte-h":!0}),r(C)!=="svelte-173yon5"&&(C.textContent=de),E=a(T),S=l(T,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1799m22"&&(S.innerHTML=He),N=a(T),M=l(T,"P",{"data-svelte-h":!0}),r(M)!=="svelte-1upcstj"&&(M.innerHTML=Le),I=a(T),x=l(T,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1x1q5a2"&&(x.innerHTML=Te),ye=a(T),A=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-18hhit8"&&(A.textContent=Ee),ue=a(T),Z=l(T,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-m81akp"&&(Z.innerHTML=We),te=a(T),F=l(T,"P",{"data-svelte-h":!0}),r(F)!=="svelte-eee2gu"&&(F.innerHTML=Re),Y=a(T),G=l(T,"P",{"data-svelte-h":!0}),r(G)!=="svelte-185l8gx"&&(G.innerHTML=Be),ke=a(T),re=l(T,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1y8nhb4"&&(re.innerHTML=Ve),_e=a(T),ie=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(ie)!=="svelte-18hazx0"&&(ie.textContent=Qe),Ce=a(T),ae=l(T,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-w2m65z"&&(ae.textContent=Je),this.h()},h(){d(h,"class","section"),d(P,"class","section"),d(A,"class","section"),d(ie,"class","section")},m(T,H){t(T,n,H),t(T,p,H),t(T,h,H),t(T,u,H),t(T,c,H),t(T,O,H),t(T,b,H),t(T,U,H),t(T,k,H),t(T,j,H),t(T,_,H),t(T,ee,H),t(T,P,H),t(T,q,H),t(T,C,H),t(T,E,H),t(T,S,H),t(T,N,H),t(T,M,H),t(T,I,H),t(T,x,H),t(T,ye,H),t(T,A,H),t(T,ue,H),t(T,Z,H),t(T,te,H),t(T,F,H),t(T,Y,H),t(T,G,H),t(T,ke,H),t(T,re,H),t(T,_e,H),t(T,ie,H),t(T,Ce,H),t(T,ae,H)},p:bt,d(T){T&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae))}}}function Il(m){let n,f;const p=[m[0],kn];let h={$$slots:{default:[Hl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(kn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const kn={title:"Reusable research Birds of a Feather session at Scipy 2023: Solutions and tools",author:"camgerlach",pub_date:"2024-03-14T00:00:00.000Z",category:"News",tags:"community, outreach, media, team",summary:"The Spyder team and collaborators hosted a Birds of a Feather session at SciPy 2023, focused on moving beyond just scripts and notebooks toward truly reproducible, reusable research. Here, we share the tips, tools, platforms and strategies that participants offered to help achieve these goals."};function Ll(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let jl=class extends kt{constructor(n){super(),_t(this,n,Ll,Il,xt,{})}};const $l=Object.freeze(Object.defineProperty({__proto__:null,default:jl,metadata:kn},Symbol.toStringTag,{value:"Module"}));function El(m){let n,f=`The Spyder team and <a href="https://cfp.scipy.org/2023/speaker/SE7SNC/" rel="nofollow" class="link">collaborators</a> hosted <a href="https://cfp.scipy.org/2023/talk/LGZUNG/" rel="nofollow" class="link">a Birds of a Feather (BoF) session</a> at <a href="https://www.scipy2023.scipy.org/" rel="nofollow" class="link">SciPy 2023</a>, focused on moving beyond just scripts and notebooks toward truly reproducible, reusable research.
Here, we’ll recap the motivation and goals of the BoF and share the common challenges that participants brought up with notebooks and moving toward reproducible, reusable research.
In <a href="https://www.spyder-ide.org/blog/reusable-research-bof-scipy-2023-part-2/" rel="nofollow" class="link">our next post</a>, we’ll follow up with some of the tips, tools, platforms and strategies attendees brought up as ways to address them, including using Spyder!
We’d like to thank <a href="https://cfp.scipy.org/2023/speaker/SE7SNC/" rel="nofollow" class="link">Juanita Gomez</a> for helping organize the BoF, Hari for his hard work compiling a summary of the outcomes, and everyone for attending and sharing such great ideas and insights!`,p,h,s="The trouble with notebooks",u,c,he=`The overwhelming majority of current scientific code is siloed away into one-off scripts and notebooks, where the only real mechanism for reusing and building upon them is good old copy and paste.
In order to keep “building upon the shoulders of giants”, we need to achieve not only reproducibility of individual results but also true reusability of research methods, that can be shared, built upon, and deployed by researchers across the world.`,O,b,xe="In particular, scripts and notebooks are not typically very reproducible or reusable, as users generally cannot easily import them, specify dependencies, extend them or use them for another project (without copy/paste and managing multiple code versions by hand). Additionally, for notebooks specifically, authors and readers alike cannot easily track them in Git (with clean diffs), lint, type check, test or format them with standard Python tools, or interoperate with most other non-notebook-specific ecosystems.",U,k,we=`To address these pressing issues, the Spyder team and interested community members convened a Birds of a Feather (BoF) session, <a href="https://cfp.scipy.org/2023/talk/LGZUNG/" rel="nofollow" class="link">“Beyond Notebooks: From reproducible to reusable research”</a>, at the <a href="https://www.scipy2023.scipy.org/" rel="nofollow" class="link">SciPy 2023 conference in Austin, TX</a>, where we invited attendees to share their tools and workflows for reusable science, and explored how we can encourage users to expand beyond the current notebook-centric monoculture and toward more holistic, modular and interoperable approaches to conducting research and developing scientific code.
The goal was to not only share and discuss ideas and insights on the topic among BoF participants, which numbered over ≈50 interested community members, but also to help inform future guides and resources on this topic, to be hosted on central platforms like the Scientific Python organization, as is currently in progress.`,j,_,pe="Goals and themes",ee,P,ge="The BoF was motivated by the following key questions:",q,C,de="<li>What is reusable research and why is it important?</li> <li>What tools and techniques do people have to share for effective reusable research?</li> <li>How can we integrate reusable research into existing workflows?</li> <li>How do we teach students and researchers about reusable research, and encourage them to practice it?</li>",E,S,He="While the resulting community ideas and insights centered around three related themes:",N,M,Le="<li>How can we make existing notebooks more readable, reproducible and reusable?</li> <li>How can notebooks be progressively migrated to Python modules for basic reusability?</li> <li>How can the community simplify and advocate the process of creating fully reusable Python packages?</li>",I,x,Te="Common challenges",ye,A,Ee=`Participants commented that students mostly get introduced to notebooks through classes in contexts that are very different from how they would use them for their research, and they don’t have a good resource for that to hand to them if they have a question or are confused about that.
Others responded that they think that should be part of the curriculum, questioning why are people learning machine learning using Jupyter notebooks without actually learning how to use Jupyter notebooks themselves, and that many folks don’t come from a traditional computer science background and may not know about all these tools.`,ue,Z,We='It was also remarked that some feel the fact that students are only exposed to notebooks really makes them not necessarily want to reach for other tools even when they would be more appropriate down the line, which participants suggested addressing by encouraging students to use IDEs like <a href="https://www.spyder-ide.org/" rel="nofollow" class="link">Spyder</a> and <a href="https://jupyterlab.readthedocs.io/" rel="nofollow" class="link">JupyterLab</a> that offer many features for reusability and reproducibility, but while also allowing them to take advantage of notebooks.',te,F,Re=`In particular, one former Spyder developer commented that they feel that we should show students how to use tools like debugging and make it easier for them to do that, but give them the choice whether they want to use those tools, and that the right approach is not necessarily telling them what tool to use, but having documentation and exposure to those tools so students can pick the best option for them.
Others remarked in response that we do want to give students options, though many might not need a full debugger.`,Y,G,Be=`One library worker mentioned that they often only have an hour to introduce users to Python, and use <a href="https://colab.google/" rel="nofollow" class="link">Google Collab notebooks</a> because it makes it a lot easier for students to get started with Python over having to download and install an IDE, but then students tend to be familiar with that tool and continue to use it.
Another participant mentioned they are a big fan of using videos to help reach students over reading the documentation, as they feel students are much more likely to watch them.`,ke,re,Ve="The discussion shifted to tools in larger organizations, with a participant commenting “It’s one thing when it’s students, but how do you do that when it’s your whole organizational culture that needs to change?” One participant responded saying she’s a student herself, and no one ever really talked to her about IDEs and explained what they were and why you’d want to use one, remarking that it’s important for teachers to actually train them to use the proper tools, but they have no idea when it comes to coworkers using these things.",_e,ie,Qe=`Another participant suggested “nerd sniping” as an effective way to handle that in larger organizations, which involves figuring out what is the biggest pain point for the team, usually something that should be automated, and then getting them to follow better practices by showing them how these tools can fix that problem.
Others agreed that it’s really about awareness, and if you show someone a cool tool most people will make the decision to adopt them on their own, but there will always be some who might not want that.`,Ce,ae,Je="Finally, it was brought up that students might have familiarity with Python or R, but Git is a completely different animal and is quite challenging to factor that into education; people like writers would really benefit from Git but it’s really hard to get them to use it, and people might not be aware of how inefficient the workflows they use are, because that’s all they know.",T,H,Ye="Next up",X,Q,tt=`Now that we’ve surfaced the reproducibility and reusability challenges that participants brought up at the BoF, check out our <a href="https://www.spyder-ide.org/blog/reusable-research-bof-scipy-2023/" rel="nofollow" class="link">next blog post</a>, where we share all the helpful tips, cool tools, awesome platforms and useful strategies attendees suggested to help address them.
Until then, happy Spydering!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("h2"),h.textContent=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("h2"),_.textContent=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("ul"),C.innerHTML=de,E=i(),S=o("p"),S.textContent=He,N=i(),M=o("ul"),M.innerHTML=Le,I=i(),x=o("h2"),x.textContent=Te,ye=i(),A=o("p"),A.textContent=Ee,ue=i(),Z=o("p"),Z.innerHTML=We,te=i(),F=o("p"),F.textContent=Re,Y=i(),G=o("p"),G.innerHTML=Be,ke=i(),re=o("p"),re.textContent=Ve,_e=i(),ie=o("p"),ie.textContent=Qe,Ce=i(),ae=o("p"),ae.textContent=Je,T=i(),H=o("h2"),H.textContent=Ye,X=i(),Q=o("p"),Q.innerHTML=tt,this.h()},l(ne){n=l(ne,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1ph6npe"&&(n.innerHTML=f),p=a(ne),h=l(ne,"H2",{class:!0,"data-svelte-h":!0}),r(h)!=="svelte-1yzon88"&&(h.textContent=s),u=a(ne),c=l(ne,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1tnobeu"&&(c.textContent=he),O=a(ne),b=l(ne,"P",{"data-svelte-h":!0}),r(b)!=="svelte-hnmsep"&&(b.textContent=xe),U=a(ne),k=l(ne,"P",{"data-svelte-h":!0}),r(k)!=="svelte-165q07j"&&(k.innerHTML=we),j=a(ne),_=l(ne,"H2",{class:!0,"data-svelte-h":!0}),r(_)!=="svelte-32889v"&&(_.textContent=pe),ee=a(ne),P=l(ne,"P",{"data-svelte-h":!0}),r(P)!=="svelte-17px8a5"&&(P.textContent=ge),q=a(ne),C=l(ne,"UL",{"data-svelte-h":!0}),r(C)!=="svelte-vf89vd"&&(C.innerHTML=de),E=a(ne),S=l(ne,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1bfog1w"&&(S.textContent=He),N=a(ne),M=l(ne,"UL",{"data-svelte-h":!0}),r(M)!=="svelte-1oppegz"&&(M.innerHTML=Le),I=a(ne),x=l(ne,"H2",{class:!0,"data-svelte-h":!0}),r(x)!=="svelte-1uxg9mh"&&(x.textContent=Te),ye=a(ne),A=l(ne,"P",{"data-svelte-h":!0}),r(A)!=="svelte-spy2hy"&&(A.textContent=Ee),ue=a(ne),Z=l(ne,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-10m97u6"&&(Z.innerHTML=We),te=a(ne),F=l(ne,"P",{"data-svelte-h":!0}),r(F)!=="svelte-47otnf"&&(F.textContent=Re),Y=a(ne),G=l(ne,"P",{"data-svelte-h":!0}),r(G)!=="svelte-1uq8h27"&&(G.innerHTML=Be),ke=a(ne),re=l(ne,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1am33iv"&&(re.textContent=Ve),_e=a(ne),ie=l(ne,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-jbmlzp"&&(ie.textContent=Qe),Ce=a(ne),ae=l(ne,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-qfjoan"&&(ae.textContent=Je),T=a(ne),H=l(ne,"H2",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-1yo5tes"&&(H.textContent=Ye),X=a(ne),Q=l(ne,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-11j93d7"&&(Q.innerHTML=tt),this.h()},h(){d(h,"class","section"),d(_,"class","section"),d(x,"class","section"),d(H,"class","section")},m(ne,oe){t(ne,n,oe),t(ne,p,oe),t(ne,h,oe),t(ne,u,oe),t(ne,c,oe),t(ne,O,oe),t(ne,b,oe),t(ne,U,oe),t(ne,k,oe),t(ne,j,oe),t(ne,_,oe),t(ne,ee,oe),t(ne,P,oe),t(ne,q,oe),t(ne,C,oe),t(ne,E,oe),t(ne,S,oe),t(ne,N,oe),t(ne,M,oe),t(ne,I,oe),t(ne,x,oe),t(ne,ye,oe),t(ne,A,oe),t(ne,ue,oe),t(ne,Z,oe),t(ne,te,oe),t(ne,F,oe),t(ne,Y,oe),t(ne,G,oe),t(ne,ke,oe),t(ne,re,oe),t(ne,_e,oe),t(ne,ie,oe),t(ne,Ce,oe),t(ne,ae,oe),t(ne,T,oe),t(ne,H,oe),t(ne,X,oe),t(ne,Q,oe)},p:bt,d(ne){ne&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q))}}}function Al(m){let n,f;const p=[m[0],_n];let h={$$slots:{default:[El]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(_n)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const _n={title:"Reusable research Birds of a Feather session at Scipy 2023: Goals and challenges",author:"camgerlach",pub_date:"2023-12-19T00:00:00.000Z",category:"News",tags:"community, outreach, media, team",summary:"The Spyder team and collaborators hosted a Birds of a Feather session at SciPy 2023, focused on moving beyond just scripts and notebooks toward truly reproducible, reusable research. Here’s a recap of the goals of the session and the shared challenges that participants brought up in achieving them."};function zl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Dl=class extends kt{constructor(n){super(),_t(this,n,zl,Al,xt,{})}};const Fl=Object.freeze(Object.defineProperty({__proto__:null,default:Dl,metadata:_n},Symbol.toStringTag,{value:"Module"}));function Gl(m){let n,f=`I started out using Spyder just like many of you, employing it for my research in modeling and simulation of physical systems all the way back in late 2009, shortly after it was first publicly released.
Back then, Spyder didn’t have rich-text help in the Help pane, just plain text that was harder to read and parse.
In 2010 I decided to develop this feature myself, which became my first substantial contribution to Spyder.
After many more contributions over time, I became the lead maintainer in 2013 when Spyder’s original author <a href="https://pierreraybaut.github.io/" rel="nofollow" class="link">Pierre Raybaut</a> moved on.`,p,h,s=`In 2023, Spyder received a <a href="https://chanzuckerberg.com/" rel="nofollow" class="link">Chan Zuckerberg Initiative</a> Essential Open Source Software for Science <a href="https://chanzuckerberg.com/eoss/proposals/enhancing-spyder-ide-remote-support-for-scientific-research-in-python/" rel="nofollow" class="link">Cycle 5 grant, number 384</a> to support a new remote development architecture for the IDE, as well as related development and maintenance.
With this grant, we’ve been able to fund a whole team of developers to work on Spyder—including myself, with this becoming my full-time job.`,u,c,he="Let’s go through what I’ve worked on for Spyder 6!",O,b,xe="Implementing the remote development frontend",U,k,we='<img src="remote-connection-manager-new.png" alt="New remote connection manager dialog in Spyder, listing the configurable settings for a new remote host" title="Spyder&#39;s new remote connection manager allows saving all the SSH settings needed for connection to a remote host"/><figcaption>Spyder&#39;s new remote connection manager allows saving all the SSH settings needed for connection to a remote host</figcaption>',j,_,pe=`I was in charge of implementing the frontend (or graphical interface) of the new remote development architecture, with <a href="https://github.com/hlouzada" rel="nofollow" class="link">Hendrik</a> responsible for <a href="../spyder-6-remote-development" class="link">the backend</a>.
First, <a href="https://github.com/spyder-ide/spyder/pull/21734" rel="nofollow" class="link">I created</a> a generic base class for complex dialogs that need a sidebar, making the existing Preferences layout reusable by other plugins.
Similarly, <a href="https://github.com/spyder-ide/spyder/pull/21857" rel="nofollow" class="link">I made</a> the individual preference pane widget modular and generic, as well as added a number of UI improvements to benefit everything that uses it.`,ee,P,ge='<img src="array-builder-improvement.png" alt="Before and after of an array editor widget, showing a more intuitive and less space-consuming layout" title="UI improvements to the array builder widget"/><figcaption>UI improvements to the array builder widget</figcaption>',q,C,de=`With that preliminary work out of the way, <a href="https://github.com/spyder-ide/spyder/pull/22079" rel="nofollow" class="link">I implemented</a> the remote connection manager to create, edit and interact with connections to other hosts.
It offers multiple SSH authentication methods with user credentials saved securely.
This information is used to automatically open a connection, install the server <a href="../spyder-6-remote-development" class="link">Hendrik developed</a>, start a Spyder Kernel in the remote machine and create an IPython console connected to it.
In Spyder 5, you needed to do all that by hand, which was quite a <a href="https://docs.spyder-ide.org/5/panes/ipythonconsole.html#connect-to-a-remote-kernel" rel="nofollow" class="link">long and cumbersome process</a>.
With the improvements in Spyder 6, you just need to enter your SSH credentials the first time you connect, and Spyder takes care of everything from there with one click!`,E,S,He='<img src="remote-connection-status-log.png" alt="Spyder connection status dialog in the remote connections manager, showing a connected icon, connection information and a detailed log of connection progress steps" title="The detailed remote connection log in the connection status window"/><figcaption>The detailed remote connection log in the connection status window</figcaption>',N,M,Le=`Finally, <a href="https://github.com/spyder-ide/spyder/pull/22328" rel="nofollow" class="link">I added</a> detailed logging messages for remote connections in the status tab.
This helps you more easily track the connection progress, as well as exactly what is happening behind the scenes to aid in debugging any problems that may arise.`,I,x,Te="Improving UI/UX",ye,A,Ee='<img src="plugin-manager-pane.png" alt="Before and after of the Spyder plugin management preference pane, showing a complete overhaul from just checkboxes next to plugin names, to a detailed list of plugins displaying their name, icon, description, internal/external status and enable checkbox; also including external plugins, not shown previously" title="Comprehensive overhaul to the plugin manager"/><figcaption>Comprehensive overhaul to the plugin manager</figcaption>',ue,Z,We=`Aside from working on the remote connection manager itself, I spent most of my remaining energies during the Spyder 6 cycle working on many UI/UX fixes and enhancements throughout the application.
For these, I followed the best design patterns found in modern web applications, so users have an easier time when switching between different environments.
The end result was a much more coherent and intuitive UI, as well as a more attractive one.`,te,F,Re=`The biggest single change was a <a href="https://github.com/spyder-ide/spyder/pull/21101" rel="nofollow" class="link">complete overhaul</a> of the plugin manager preferences pane, to make it much more useful and user-friendly as well as add support for listing external along with internal plugins.
Previously, it only showed a simple set of checkboxes next to each internal plugin’s name with no other information, and no place to list external plugins (which you’re more likely to want to enable/disable vs. internal ones).
After an extensive reworking, it is now a much more informative and appealing scrollable list, showing each plugin’s icon, short description, internal/external status and enable/disable checkbox.
Furthermore, external plugins are now shown at the top for easy access, with plugins within each group sorted alphabetically by its localized name to aid navigation.`,Y,G,Be='<img src="interface-font-config-option.png" alt="Part of Spyder preferences, showing dropdowns for interface font and font size, as well as a checked by default option to use the system native font" title="New interface font options in Spyder preferences"/><figcaption>New interface font options in Spyder preferences</figcaption>',ke,re,Ve=`Another significant improvement was <a href="https://github.com/spyder-ide/spyder/pull/20933" rel="nofollow" class="link">adding support</a> for configuring the Spyder’s interface font.
This was requested by many Spyder Chinese users on Windows, where the default font for Latin text is ugly and difficult to read.
It’ll also benefit other users who prefer a different UI font than the current default.
The work also included other enhancements and fixes throughout the Spyder interface to support this change and fix many font-related inconsistencies.`,_e,ie,Qe='<img src="preferences-ui-improvements.png" alt="Before and after for Spyder preferences, showing a much more organized and modern-looking preferences list, removed extra lines around pane groups and a larger and more comfortable layout" title="Refined layout and style for Spyder Preferences"/><figcaption>Refined layout and style for Spyder Preferences</figcaption>',Ce,ae,Je=`The Spyder Preferences dialog as a whole got <a href="https://github.com/spyder-ide/spyder/pull/21233" rel="nofollow" class="link">many overall UI improvements</a>, most prominent being a much more organized listing of the preferences panes by group/importance and then alphabetically within them.
The sidebar also received a major layout and styling overhaul, making it much less cramped and more refined.
The pane area was cleaned up, removing redundant lines and elements, and making the spacing more comfortable and consistent.
Finally, numerous bugs, issues and minor tweaks were addressed throughout.`,T,H,Ye='<img src="plots-pane-ui-improvements.png" alt="Composite showing a before and after comparison of the Plots pane toolbar with streamlined zoom controls in its own section, and an image showing the revised Plots pane with its new Fit Plots button" title="Spyder plots pane with revised toolbar and greatly improved zoom UX"/><figcaption>Spyder plots pane with revised toolbar and greatly improved zoom UX</figcaption>',X,Q,tt=`The Plots pane also saw <a href="https://github.com/spyder-ide/spyder/pull/22029" rel="nofollow" class="link">plenty of love</a>, with a much more intuitive zooming and sizing experience.
Plots are still fit to the pane by default, but zoom in/out buttons are now enabled by default, and a new toolbar button allows toggling between fit to window and 1:1 actual size.
On top of that, zoom level is now saved per plot, and double-clicking a plot shows it full size.
Additionally, the toolbar is more organized and users can drag and drop their plots in the thumbnail list to the right to re-order them as they wish.
Put together, this solves a significant set of pain points that Spyder users and developers expressed previously about this pane.`,ne,oe,nt='<img src="console-menu-added.png" alt="Before and after of the Spyder consoles menu, with the new version featuring refined layout and icons and displaying a new Open in Environment submenu, offering environments that a console can be opened in" title="Refined Consoles menu with new Open in Environment submenu"/><figcaption>Refined Consoles menu with new Open in Environment submenu</figcaption>',Ge,me,ot=`I made numerous other UI/UX enhancements across Spyder, far too many to list here.
Here’s a sampling of some more:`,qe,fe,lt='<li><a href="https://github.com/spyder-ide/spyder/pull/21511" rel="nofollow" class="link">Rendering tweaks to menus</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21133" rel="nofollow" class="link">Styling improvements to pane tab bars</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21555" rel="nofollow" class="link">New improved comboboxes</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21622" rel="nofollow" class="link">UI refinements to the Find pane</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21710" rel="nofollow" class="link">Enhancements to hovers, hints &amp; calltips</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21813" rel="nofollow" class="link">Display &amp; layout upgrades to Files/Project</a></li> <li><a href="https://github.com/spyder-ide/spyder/pull/21945" rel="nofollow" class="link">Remove redundant icons on OK, Cancel, etc, buttons on Linux</a></li>',J,le,it="Supporting the work of others",Oe,ve,at='<img src="spyder6-about-dialog.png" alt="Spyder&#39;s revised About dialog, with tabs Overview, Community and Legal. Overview tab shows the IDE&#39;s name, version, website, major dependency versions and social media links, in an organized and comfortable layout" title="Revised Spyder 6 About dialog, on which Carlos worked"/><figcaption>Revised Spyder 6 About dialog, on which Carlos worked</figcaption>',Ue,be,st="Beyond the remote development frontend and the UI/UX work, a large part of my role as a maintainer and leader is supporting the work of others.",W,se,rt=`I’ve assisted <a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan-Sebsatian Bautista</a>, one of our junior developers, in several significant enhancements to Spyder’s UI.
In particular, <a href="https://github.com/spyder-ide/spyder/pull/21134" rel="nofollow" class="link">I’ve made UI/UX improvements</a> to the layout and scaling of the empty pane widget and added a message if the emptiness is due to a faulty IPython Console.
As part of that work, I also took the opportunity to enhance the About dialog’s layout.`,v,L,pt='<img src="console-envs-menu-improvements.png" alt="Spyder Consoles with the New Console in Environment submenu displayed, showing new sections and user-added environments" title="UI improvements to the new console in environment menu"/><figcaption>UI improvements to the new console in environment menu</figcaption>',Xe,De,ht=`Additionally, I helped Juan-Sebsatian with <a href="https://github.com/spyder-ide/spyder/pull/22200" rel="nofollow" class="link">several significant improvements</a> to the console environments menu.
These include showing user-added environments in the console envs menu for easy access, and breaking that menu into sections by environment type for easier navigation.
It also consolidates environment tracking functionality previously duplicated between the IPython Console and Python Interpreter plugins.`,et,Fe,ut='<img src="file-switcher.png" alt="Spyder switcher dialog, with a text box and a list of matching files and other objects" title="Switcher in Spyder 6, with Carlos&#39; UI improvements"/><figcaption>Switcher in Spyder 6, with Carlos&#39; UI improvements</figcaption>',g,z,ct=`I aided <a href="https://github.com/AngelaRemolina" rel="nofollow" class="link">Angela Remolina</a>’s work on adding real-time file search for the current project to the Switcher (<code>Ctrl-P</code>), making <a href="https://github.com/spyder-ide/spyder/pull/21275" rel="nofollow" class="link">a number of improvements</a> to its UI.
These changes make the switcher compute file results asynchronously in a separate process to avoid interface freezes and improve performance.
Additionally, it now highlights the matching characters in the project search results, filters the results to only include text files that can edited, clarifies the section layout and improves the tests.`,dt,Ne,ft='<img src="debugger-pane-ui-improvements.png" alt="Before and after screenshots of specific parts of Spyder&#39;s debugger pane, highlighting the additional and refined toolbar icons/buttons and the fix to jarring coloars in the stack browser" title="Some of Carlos&#39; improvements to the Debugger pane UI"/><figcaption>Some of Carlos&#39; improvements to the Debugger pane UI</figcaption>',R,ce,yt=`Furthermore, I supported <a href="https://github.com/impact27" rel="nofollow" class="link">Quentin Peter</a>’s work on the new Debugger pane with <a href="https://github.com/spyder-ide/spyder/pull/22163" rel="nofollow" class="link">more UI/UX improvements</a>.
I added a new postmortem debugging toolbar button, new icons for the <code>Go to Editor</code>, <code>Interrupt and Debug</code>, and <code>List Breakpoints</code> buttons, and section dividers to make the toolbar easier to navigate.
Additionally, I made the breakpoints table collapsible and fixed a theme incompatibility issue in the frames browser.`,y,w,Ae='<img src="run-preferences.png" alt="Before and after of Spyder&#39;s run preferences pane, on the Run Executors tab now showing a list of default run presets as well as a streamlined and more compact layout" title="Run preferences, showing Carlos&#39; UI improvements"/><figcaption>Run preferences, showing Carlos&#39; UI improvements</figcaption>',vt,Ct,qt=`Finally, I built upon <a href="https://github.com/andfoy" rel="nofollow" class="link">Edgar Margffoy</a> and <a href="https://github.com/steff456" rel="nofollow" class="link">Stephannie Jimenez</a>’s new modular architecture for running files in Spyder 6, greatly <a href="https://github.com/spyder-ide/spyder/pull/22141" rel="nofollow" class="link">improving its UI and UX</a>.
These changes added customizable default run presets for specific file types, making it easier to adjust execution behavior.
In addition, the layout of that preference pane and the per-file run configuration dialog are substantially simplified, cleaned up and polished, making the UI easier to use and more intuitive.`,B,Me,Rt='<img src="run-config-per-file.png" alt="Before and after of Spyder&#39;s Run Configuration Per File dialog listing file execution settings, with the after version showing a simpler, collapsible and more refined layout" title="Carlos&#39; UI improvements to the Run Config Per File dialog"/><figcaption>Carlos&#39; UI improvements to the Run Config Per File dialog</figcaption>',Lt,Et,Nt="Insights going forward",jt,At,Bt=`The new remote client plugin was a fascinating set of stress tests for Spyder’s plugin API, originally introduced in Spyder 5.
They required implementing close integration with the IPython Console, but without affecting the already extensive connections between the console and several other plugins.`,$t,Dt,V=`Fortunately, our API passed the test really well, since we were able to have a working prototype of the remote client as a plugin for Linux and Mac in just four months.
This means that we’re in good shape to tackle the complex challenges that will come in 6.1 and beyond to add remote development capabilities to other Spyder plugins, such as the Editor and Projects.`,Se,zt,Jt="What’s next for Spyder?",Wt,Ft,K='<img src="spyder-env-manager-alpha.png" alt="Spyder-Env-Manager pane showing an environment selector and a list of installed package names, descriptions and versions as well as toolbar options to interact with them" title="Working alpha version of the Spyder-Env-Manager plugin"/><figcaption>Working alpha version of the Spyder-Env-Manager plugin</figcaption>',je,Ot,Zt="Next year, I’ll be making more UI/UX improvements on several different fronts.",Qt,Ut,tn=`I’ll integrate the <a href="https://github.com/spyder-ide/spyder-env-manager" rel="nofollow" class="link">Spyder-Env-Manager</a> plugin, developed by <a href="https://github.com/dalthviz" rel="nofollow" class="link">Daniel Althviz</a> and <a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan-Sebsatian Bautista</a>, with the remote development client.
Spyder-Env-Manager allows you to create Conda environments as well as install and manage packages within them directly from Spyder—no arcane commands or external GUIs, and no separate install of Anaconda needed with our standalone installers.
With this integration, you’ll be able to create environments on remote machines just as easily as locally, without needing to install anything on the server.`,D,Pe,qn=`In addition, I’ll be adding new preferences to allow you to easily associate your Spyder projects with Conda environments.
That way, they will be automatically activated both for installing packages and running code, addressing the all too common issue of doing one or the other in the wrong environment without realizing.`,nn,Yt,On=`Finally, I’ll improve the file/symbol switcher’s look-and-feel and integrate it with other plugins.
For example, you’ll be to quickly open or switch to a specific console just by typing its name.`,on,en,Un="I can’t wait to release these continued enhancements to Spyder’s interface and usability, and as always, happy Spydering!🕸️";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("h2"),b.textContent=xe,U=i(),k=o("figure"),k.innerHTML=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("figure"),P.innerHTML=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("figure"),S.innerHTML=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("h2"),x.textContent=Te,ye=i(),A=o("figure"),A.innerHTML=Ee,ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("p"),F.innerHTML=Re,Y=i(),G=o("figure"),G.innerHTML=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("figure"),ie.innerHTML=Qe,Ce=i(),ae=o("p"),ae.innerHTML=Je,T=i(),H=o("figure"),H.innerHTML=Ye,X=i(),Q=o("p"),Q.innerHTML=tt,ne=i(),oe=o("figure"),oe.innerHTML=nt,Ge=i(),me=o("p"),me.textContent=ot,qe=i(),fe=o("ul"),fe.innerHTML=lt,J=i(),le=o("h2"),le.textContent=it,Oe=i(),ve=o("figure"),ve.innerHTML=at,Ue=i(),be=o("p"),be.textContent=st,W=i(),se=o("p"),se.innerHTML=rt,v=i(),L=o("figure"),L.innerHTML=pt,Xe=i(),De=o("p"),De.innerHTML=ht,et=i(),Fe=o("figure"),Fe.innerHTML=ut,g=i(),z=o("p"),z.innerHTML=ct,dt=i(),Ne=o("figure"),Ne.innerHTML=ft,R=i(),ce=o("p"),ce.innerHTML=yt,y=i(),w=o("figure"),w.innerHTML=Ae,vt=i(),Ct=o("p"),Ct.innerHTML=qt,B=i(),Me=o("figure"),Me.innerHTML=Rt,Lt=i(),Et=o("h2"),Et.textContent=Nt,jt=i(),At=o("p"),At.textContent=Bt,$t=i(),Dt=o("p"),Dt.textContent=V,Se=i(),zt=o("h2"),zt.textContent=Jt,Wt=i(),Ft=o("figure"),Ft.innerHTML=K,je=i(),Ot=o("p"),Ot.textContent=Zt,Qt=i(),Ut=o("p"),Ut.innerHTML=tn,D=i(),Pe=o("p"),Pe.textContent=qn,nn=i(),Yt=o("p"),Yt.textContent=On,on=i(),en=o("p"),en.textContent=Un,this.h()},l($){n=l($,"P",{"data-svelte-h":!0}),r(n)!=="svelte-83zu3o"&&(n.innerHTML=f),p=a($),h=l($,"P",{"data-svelte-h":!0}),r(h)!=="svelte-sudga0"&&(h.innerHTML=s),u=a($),c=l($,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1vzpes7"&&(c.textContent=he),O=a($),b=l($,"H2",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-1fe4t9f"&&(b.textContent=xe),U=a($),k=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-14u96q"&&(k.innerHTML=we),j=a($),_=l($,"P",{"data-svelte-h":!0}),r(_)!=="svelte-9w4fqs"&&(_.innerHTML=pe),ee=a($),P=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-4dp0u"&&(P.innerHTML=ge),q=a($),C=l($,"P",{"data-svelte-h":!0}),r(C)!=="svelte-12l12nf"&&(C.innerHTML=de),E=a($),S=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(S)!=="svelte-1tj949d"&&(S.innerHTML=He),N=a($),M=l($,"P",{"data-svelte-h":!0}),r(M)!=="svelte-1dt3fe0"&&(M.innerHTML=Le),I=a($),x=l($,"H2",{class:!0,"data-svelte-h":!0}),r(x)!=="svelte-1tb6lqt"&&(x.textContent=Te),ye=a($),A=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-jwwfrg"&&(A.innerHTML=Ee),ue=a($),Z=l($,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-fal2dh"&&(Z.textContent=We),te=a($),F=l($,"P",{"data-svelte-h":!0}),r(F)!=="svelte-p1tmry"&&(F.innerHTML=Re),Y=a($),G=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-1b4jn01"&&(G.innerHTML=Be),ke=a($),re=l($,"P",{"data-svelte-h":!0}),r(re)!=="svelte-11ed70r"&&(re.innerHTML=Ve),_e=a($),ie=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(ie)!=="svelte-ox70it"&&(ie.innerHTML=Qe),Ce=a($),ae=l($,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-1rkb64l"&&(ae.innerHTML=Je),T=a($),H=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-12zkr4u"&&(H.innerHTML=Ye),X=a($),Q=l($,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-vrstp1"&&(Q.innerHTML=tt),ne=a($),oe=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(oe)!=="svelte-17rm527"&&(oe.innerHTML=nt),Ge=a($),me=l($,"P",{"data-svelte-h":!0}),r(me)!=="svelte-g641la"&&(me.textContent=ot),qe=a($),fe=l($,"UL",{"data-svelte-h":!0}),r(fe)!=="svelte-7kcek9"&&(fe.innerHTML=lt),J=a($),le=l($,"H2",{class:!0,"data-svelte-h":!0}),r(le)!=="svelte-1vqt9z3"&&(le.textContent=it),Oe=a($),ve=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(ve)!=="svelte-1c00cih"&&(ve.innerHTML=at),Ue=a($),be=l($,"P",{"data-svelte-h":!0}),r(be)!=="svelte-3ne31q"&&(be.textContent=st),W=a($),se=l($,"P",{"data-svelte-h":!0}),r(se)!=="svelte-12nz5hn"&&(se.innerHTML=rt),v=a($),L=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(L)!=="svelte-1vxumwl"&&(L.innerHTML=pt),Xe=a($),De=l($,"P",{"data-svelte-h":!0}),r(De)!=="svelte-np5lka"&&(De.innerHTML=ht),et=a($),Fe=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(Fe)!=="svelte-1jf2a7x"&&(Fe.innerHTML=ut),g=a($),z=l($,"P",{"data-svelte-h":!0}),r(z)!=="svelte-5ogvs6"&&(z.innerHTML=ct),dt=a($),Ne=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(Ne)!=="svelte-1ifggzh"&&(Ne.innerHTML=ft),R=a($),ce=l($,"P",{"data-svelte-h":!0}),r(ce)!=="svelte-1y8wy3l"&&(ce.innerHTML=yt),y=a($),w=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(w)!=="svelte-13q4jng"&&(w.innerHTML=Ae),vt=a($),Ct=l($,"P",{"data-svelte-h":!0}),r(Ct)!=="svelte-dtb0q8"&&(Ct.innerHTML=qt),B=a($),Me=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(Me)!=="svelte-hi7uiy"&&(Me.innerHTML=Rt),Lt=a($),Et=l($,"H2",{class:!0,"data-svelte-h":!0}),r(Et)!=="svelte-jvijis"&&(Et.textContent=Nt),jt=a($),At=l($,"P",{"data-svelte-h":!0}),r(At)!=="svelte-wgsvy0"&&(At.textContent=Bt),$t=a($),Dt=l($,"P",{"data-svelte-h":!0}),r(Dt)!=="svelte-ma7y7j"&&(Dt.textContent=V),Se=a($),zt=l($,"H2",{class:!0,"data-svelte-h":!0}),r(zt)!=="svelte-4gz9s"&&(zt.textContent=Jt),Wt=a($),Ft=l($,"FIGURE",{class:!0,"data-svelte-h":!0}),r(Ft)!=="svelte-as2rad"&&(Ft.innerHTML=K),je=a($),Ot=l($,"P",{"data-svelte-h":!0}),r(Ot)!=="svelte-e3x4yg"&&(Ot.textContent=Zt),Qt=a($),Ut=l($,"P",{"data-svelte-h":!0}),r(Ut)!=="svelte-1tt7fbj"&&(Ut.innerHTML=tn),D=a($),Pe=l($,"P",{"data-svelte-h":!0}),r(Pe)!=="svelte-h6qxni"&&(Pe.textContent=qn),nn=a($),Yt=l($,"P",{"data-svelte-h":!0}),r(Yt)!=="svelte-10n5801"&&(Yt.textContent=On),on=a($),en=l($,"P",{"data-svelte-h":!0}),r(en)!=="svelte-kgw3km"&&(en.textContent=Un),this.h()},h(){d(b,"class","section"),d(k,"class","figure"),d(P,"class","figure"),d(S,"class","figure"),d(x,"class","section"),d(A,"class","figure"),d(G,"class","figure"),d(ie,"class","figure"),d(H,"class","figure"),d(oe,"class","figure"),d(le,"class","section"),d(ve,"class","figure"),d(L,"class","figure"),d(Fe,"class","figure"),d(Ne,"class","figure"),d(w,"class","figure"),d(Me,"class","figure"),d(Et,"class","section"),d(zt,"class","section"),d(Ft,"class","figure")},m($,Ie){t($,n,Ie),t($,p,Ie),t($,h,Ie),t($,u,Ie),t($,c,Ie),t($,O,Ie),t($,b,Ie),t($,U,Ie),t($,k,Ie),t($,j,Ie),t($,_,Ie),t($,ee,Ie),t($,P,Ie),t($,q,Ie),t($,C,Ie),t($,E,Ie),t($,S,Ie),t($,N,Ie),t($,M,Ie),t($,I,Ie),t($,x,Ie),t($,ye,Ie),t($,A,Ie),t($,ue,Ie),t($,Z,Ie),t($,te,Ie),t($,F,Ie),t($,Y,Ie),t($,G,Ie),t($,ke,Ie),t($,re,Ie),t($,_e,Ie),t($,ie,Ie),t($,Ce,Ie),t($,ae,Ie),t($,T,Ie),t($,H,Ie),t($,X,Ie),t($,Q,Ie),t($,ne,Ie),t($,oe,Ie),t($,Ge,Ie),t($,me,Ie),t($,qe,Ie),t($,fe,Ie),t($,J,Ie),t($,le,Ie),t($,Oe,Ie),t($,ve,Ie),t($,Ue,Ie),t($,be,Ie),t($,W,Ie),t($,se,Ie),t($,v,Ie),t($,L,Ie),t($,Xe,Ie),t($,De,Ie),t($,et,Ie),t($,Fe,Ie),t($,g,Ie),t($,z,Ie),t($,dt,Ie),t($,Ne,Ie),t($,R,Ie),t($,ce,Ie),t($,y,Ie),t($,w,Ie),t($,vt,Ie),t($,Ct,Ie),t($,B,Ie),t($,Me,Ie),t($,Lt,Ie),t($,Et,Ie),t($,jt,Ie),t($,At,Ie),t($,$t,Ie),t($,Dt,Ie),t($,Se,Ie),t($,zt,Ie),t($,Wt,Ie),t($,Ft,Ie),t($,je,Ie),t($,Ot,Ie),t($,Qt,Ie),t($,Ut,Ie),t($,D,Ie),t($,Pe,Ie),t($,nn,Ie),t($,Yt,Ie),t($,on,Ie),t($,en,Ie)},p:bt,d($){$&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne),e(R),e(ce),e(y),e(w),e(vt),e(Ct),e(B),e(Me),e(Lt),e(Et),e(jt),e(At),e($t),e(Dt),e(Se),e(zt),e(Wt),e(Ft),e(je),e(Ot),e(Qt),e(Ut),e(D),e(Pe),e(nn),e(Yt),e(on),e(en))}}}function ql(m){let n,f;const p=[m[0],Cn];let h={$$slots:{default:[Gl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Cn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Cn={title:"Spyder 6 project lead: Remote development interface and application UI/UX improvements",author:["ccordoba12","camgerlach"],tags:"Feature, Spyder6",category:"Releases",pub_date:"2024-12-28T00:00:00.000Z",summary:"Spyder's lead maintainer, Carlos Cordoba, shares his insights on the projects and features he helped develop for Spyder 6.0, particularly UI/UX and where the IDE is headed next."};function Ol(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Ul=class extends kt{constructor(n){super(),_t(this,n,Ol,ql,xt,{})}};const Wl=Object.freeze(Object.defineProperty({__proto__:null,default:Ul,metadata:Cn},Symbol.toStringTag,{value:"Module"}));function Rl(m){let n,f=`<a href="https://github.com/dalthviz" rel="nofollow" class="link">Daniel Althviz</a> is one of our longest-tenured Spyder developers, having started working on the project near the end of 2016.
Now eight years later, he’s the project’s co-maintainer and its our release manager, responsible for the many steps required to release Spyder across all our various platforms.
On top of that, he is also the lead maintainer of two of the most important libraries on which Spyder, and a lot of other scientific software, depends: the <a href="https://github.com/spyder-ide/qtpy" rel="nofollow" class="link">QtPy</a> GUI abstraction layer and the <a href="https://github.com/spyder-ide/qtawesome" rel="nofollow" class="link">QtAwesome</a> icon font framework.`,p,h,s=`In 2023, Spyder received a <a href="https://chanzuckerberg.com/" rel="nofollow" class="link">Chan Zuckerberg Initiative</a> Essential Open Source Software for Science Cycle 5 grant, <a href="https://chanzuckerberg.com/eoss/proposals/enhancing-spyder-ide-remote-support-for-scientific-research-in-python/" rel="nofollow" class="link">number 384</a> to support a new remote development architecture and features in Spyder and related development.
This has helped us fund Daniel’s work on many of his contributions to Spyder 6 connected to that!`,u,c,he=`Thanks to all his experience and responsibilities, Daniel has put in a lot of work toward Spyder 6’s development.
Read on to hear the highlights!<br/><br/>`,O,b,xe='<img src="daniel-contributions.png" alt="The Spyder Contributions page on GitHub, showing a graph of all contributions over time, and Daniel highlighted as the number two contributor between Feb 1 2023 and the present, after lead maintainer Carlos Cordoba" title="Daniel has the second-most contributions to the core Spyder repository since Feb 2023"/><figcaption>Daniel has the second-most contributions to the core Spyder repository since Feb 2023</figcaption>',U,k,we="Spyder Editor migration to new plugin API",j,_,pe=`We introduced a brand new plugin API with Spyder 5, and as part of that refactored most of Spyder’s panes and many other of its internal components to be plugins that use it, rather than tightly coupled with Spyder itself.
That both makes Spyder much more modular and easier to maintain, and gives external plugins all the same power and flexibility that internal panes and components have!
However, the one major exception to that in Spyder 5 was the Editor, which hadn’t been migrated due to the high level of complexity and the further new features that would need to be added to the plugin API.`,ee,P,ge=`Migrating the Editor to the modular API was the final piece of the puzzle to make Spyder a fully pluggable application, avoid having to maintain two duplicate APIs and enhance interoperability with other plugins, such as those being developed for remote development in Spyder 6.
Specifically, it was a prerequisite for implementing remote editing capabilities, which will arrive in Spyder 6.2.
Therefore, we prioritized finishing this migration for Spyder 6, with Daniel completing the work originally started by <a href="https://github.com/goanpeca" rel="nofollow" class="link">Gonzalo Peña-Castellanos</a>, <a href="https://github.com/andfoy" rel="nofollow" class="link">Edgar Margffoy</a> and <a href="https://github.com/steff456" rel="nofollow" class="link">Stephannie Jimenez</a>.`,q,C,de=`Given the size of the task, Daniel split it into a number of steps, each corresponding to a GitHub Pull Request.
First, <a href="https://github.com/spyder-ide/spyder/pull/20893" rel="nofollow" class="link">he split</a> the <code>CodeEditor</code>, the main widget for editing code, into a component in charge of code completion and linting, and another one in charge of editing.
This helped separate those concerns and improve improve overall modularity and maintainability.
Then, <a href="https://github.com/spyder-ide/spyder/pull/21194" rel="nofollow" class="link">he refactored</a> the <code>EditorStack</code> code, the widget in charge of displaying multiple tabbed <code>CodeEditor</code> views, to facilitate the migration.
Finally, he migrated the Editor itself to the new API in two steps: an <a href="https://github.com/spyder-ide/spyder/pull/21353" rel="nofollow" class="link">initial migration</a>, and a <a href="https://github.com/spyder-ide/spyder/pull/22005" rel="nofollow" class="link">followup cleanup</a>.
This last step alone took six months of hard work, but it will help to address a lot of technical debt accumulated throughout the years.`,E,S,He="Remote development architecture quality testing",N,M,Le='<img src="remote-kernel-issue-windows.png" alt="The Spyder remote kernel status dialog showing a successful connection, next to the IPython Console showing a kernel error" title="Daniel helped find and solve remote development issues like this one"/><figcaption>Daniel helped find and solve remote development issues like this one</figcaption>',I,x,Te=`Once the Editor migration was moving along, Daniel helped review, test and QA the new remote development architecture.
As part of that, he also developed a number of fixes and improvements to address the issues he found.
For instance, he implemented <a href="https://github.com/spyder-ide/spyder/pull/22303" rel="nofollow" class="link">several UI/UX improvements</a> for the graphical components used to create a remote connection, based on the issues he found.`,ye,A,Ee=`Furthermore, during his checks of remote connections working on Windows, he discovered several errors with running async code, which he helped <a href="https://github.com/spyder-ide/spyder/pull/22137" rel="nofollow" class="link">fix</a>.
Finally, he also encountered problems when trying to tunnel ports through SSH, which he also contributed to <a href="https://github.com/spyder-ide/spyder/pull/22223" rel="nofollow" class="link">solving</a>.
This all helped make our remote development architecture much more stable and usable.
To learn more about Spyder’s new remote development architecture, check out <a href="../spyder-6-remote-development/" class="link">Hendrik’s blog post!</a>.`,ue,Z,We="Spyder test suite overhaul",te,F,Re=`To enhance testing of Spyder 6 and its new components, Daniel helped make the Spyder test suite faster and more robust.
The core team was witnessing constant errors and delays when running automated tests in continuous integration systems, which made it necessary for Daniel invest several weeks to fix that so that the Spyder 6 development process was smoother.
Therefore, <a href="https://github.com/spyder-ide/spyder/pull/22077" rel="nofollow" class="link">Daniel’s work</a> improved this situation, as well as making the tests more efficient overall.`,Y,G,Be="Review work and project management",ke,re,Ve='<img src="file-switcher-improvements.png" alt="Spyder&#39;s file switcher dialog, with a path box to enter a file name above a list of matching files and their properties" title="Spyder&#39;s File Switcher, with the improvements from Daniel and Angela&#39;s work"/><figcaption>Spyder&#39;s File Switcher, with the improvements from Daniel and Angela&#39;s work</figcaption>',_e,ie,Qe=`Much of Daniel’s responsibilities involve reviewing, mentoring and assisting with the work of other developers, an important role in any project.
Daniel helped <a href="https://github.com/mrclary" rel="nofollow" class="link">Ryan Clary</a>, the developer who created our new <a href="../cbi-installers" class="link">Conda-based installers</a> for Spyder 6, test and validate the installers and their update process for each release in the year-long process of stabilizing them, as well as finding and reporting many bugs on Windows.`,Ce,ae,Je=`Daniel also reviewed and assisted with <a href="https://github.com/AngelaRemolina" rel="nofollow" class="link">Angela Remolina</a>’s work on major improvements to Spyder’s File/Symbol Switcher.
Angela, an intern who worked on Spyder over several months, migrated the File/Symbol switcher to a plugin, so it is modular and accessible to other plugins.
As part of this project, she also added the initial support in the switcher for lightning-fast, <a href="https://github.com/junegunn/fzf" rel="nofollow" class="link">fzf</a>-accelerated searching of all files in the current project.`,T,H,Ye=`Finally, Daniel performed an in-depth review of the numerous UI/UX enhancements for Spyder 6 developed by <a href="https://github.com/jsbautista" rel="nofollow" class="link">Juan-Sebastian Bautista</a>, whom Daniel has mentored and managed for the past two years.
This work has made Spyder much easier and more intuitive to use, including for users with accessibility needs.
Thanks to Daniel’s mentorship, Juan-Sebastian looks to continue his work with Spyder into the future.`,X,Q,tt="Spyder release management",ne,oe,nt='<img src="daniel-release-page.png" alt="Spyder release page, showing a list of version numbers and their corresponding information and files" title="Daniel has released dozens of recent Spyder versions"/><figcaption>Daniel has released dozens of recent Spyder versions</figcaption>',Ge,me,ot="Since February 1, 2023, thanks to the CZI grant funding mentioned before, Daniel has also been active as Spyder’s Release Manager, taking on the substantial task of handling the many critical steps required to produce stable packages for the many platforms we support, including:",qe,fe,lt='<li><a href="https://pypi.org/project/spyder/" rel="nofollow" class="link">PyPI</a> (pip)</li> <li><a href="https://anaconda.org/conda-forge/spyder" rel="nofollow" class="link">Conda-Forge</a> (Conda)</li> <li><a href="https://www.spyder-ide.org/download/" rel="nofollow" class="link">Spyder installers</a>, and the</li> <li><a href="https://github.com/spyder-ide/spyder/releases" rel="nofollow" class="link">GitHub releases</a>.</li>',J,le,it=`Since then, he has served as Release Manager for one minor and eight bugfix releases for Spyder 5 (from 5.4.3 to 5.5.6), and eight pre-releases, one major release and three bugfix releases for Spyder 6 (from 6.0 alpha2 to 6.0.3).
Without his work, our users wouldn’t have been able to benefit from all the developmental and stable releases that we’ve had, especially for Spyder 6!`,Oe,ve,at="What’s next?",Ue,be,st=`In the immediate future, Daniel will continue his critical role as the Release Manager for Spyder, ensuring users keep seeing regular updates for Spyder 6.
Additionally, he’ll further his partnership with Juan-Sebastian, this time focused on maintaining Spyder 6.0 and fixing any further bugs that are found.
He’ll also work on improving <a href="https://qtconsole.readthedocs.io/en/stable/" rel="nofollow" class="link">Jupyter QtConsole</a>, the frontend that Spyder (in the IPython Console) and other users and applications employ to provide a rich, interactive graphical interface to local and remote kernels.
Finally, he’ll help implement the frontend interface to remote file systems as part of our remote development work, allowing users to manipulate remote files and directories just like those locally!`,W,se,rt="We’re looking forward to seeing the fruits of all that work, and as always, happy Spydering!🕸️";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("figure"),b.innerHTML=xe,U=i(),k=o("h2"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("h2"),S.textContent=He,N=i(),M=o("figure"),M.innerHTML=Le,I=i(),x=o("p"),x.innerHTML=Te,ye=i(),A=o("p"),A.innerHTML=Ee,ue=i(),Z=o("h2"),Z.textContent=We,te=i(),F=o("p"),F.innerHTML=Re,Y=i(),G=o("h2"),G.textContent=Be,ke=i(),re=o("figure"),re.innerHTML=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("p"),ae.innerHTML=Je,T=i(),H=o("p"),H.innerHTML=Ye,X=i(),Q=o("h2"),Q.textContent=tt,ne=i(),oe=o("figure"),oe.innerHTML=nt,Ge=i(),me=o("p"),me.textContent=ot,qe=i(),fe=o("ul"),fe.innerHTML=lt,J=i(),le=o("p"),le.textContent=it,Oe=i(),ve=o("h2"),ve.textContent=at,Ue=i(),be=o("p"),be.innerHTML=st,W=i(),se=o("p"),se.textContent=rt,this.h()},l(v){n=l(v,"P",{"data-svelte-h":!0}),r(n)!=="svelte-n8mapo"&&(n.innerHTML=f),p=a(v),h=l(v,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1h8c2l8"&&(h.innerHTML=s),u=a(v),c=l(v,"P",{"data-svelte-h":!0}),r(c)!=="svelte-141vgth"&&(c.innerHTML=he),O=a(v),b=l(v,"FIGURE",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-1hhnlb"&&(b.innerHTML=xe),U=a(v),k=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-7imtdi"&&(k.textContent=we),j=a(v),_=l(v,"P",{"data-svelte-h":!0}),r(_)!=="svelte-4k25ck"&&(_.textContent=pe),ee=a(v),P=l(v,"P",{"data-svelte-h":!0}),r(P)!=="svelte-nvq5vx"&&(P.innerHTML=ge),q=a(v),C=l(v,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1i9mpkt"&&(C.innerHTML=de),E=a(v),S=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(S)!=="svelte-6f5vnr"&&(S.textContent=He),N=a(v),M=l(v,"FIGURE",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-92d43r"&&(M.innerHTML=Le),I=a(v),x=l(v,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1r8hvrf"&&(x.innerHTML=Te),ye=a(v),A=l(v,"P",{"data-svelte-h":!0}),r(A)!=="svelte-7vqww8"&&(A.innerHTML=Ee),ue=a(v),Z=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(Z)!=="svelte-wy6p5j"&&(Z.textContent=We),te=a(v),F=l(v,"P",{"data-svelte-h":!0}),r(F)!=="svelte-123f6qv"&&(F.innerHTML=Re),Y=a(v),G=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-7iqjvy"&&(G.textContent=Be),ke=a(v),re=l(v,"FIGURE",{class:!0,"data-svelte-h":!0}),r(re)!=="svelte-c0mdyr"&&(re.innerHTML=Ve),_e=a(v),ie=l(v,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-bogred"&&(ie.innerHTML=Qe),Ce=a(v),ae=l(v,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-t6bhid"&&(ae.innerHTML=Je),T=a(v),H=l(v,"P",{"data-svelte-h":!0}),r(H)!=="svelte-1jqk0r2"&&(H.innerHTML=Ye),X=a(v),Q=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(Q)!=="svelte-1m26wyb"&&(Q.textContent=tt),ne=a(v),oe=l(v,"FIGURE",{class:!0,"data-svelte-h":!0}),r(oe)!=="svelte-1g54acf"&&(oe.innerHTML=nt),Ge=a(v),me=l(v,"P",{"data-svelte-h":!0}),r(me)!=="svelte-15qwg61"&&(me.textContent=ot),qe=a(v),fe=l(v,"UL",{"data-svelte-h":!0}),r(fe)!=="svelte-1gauh8l"&&(fe.innerHTML=lt),J=a(v),le=l(v,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1d3k975"&&(le.textContent=it),Oe=a(v),ve=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(ve)!=="svelte-1iticpq"&&(ve.textContent=at),Ue=a(v),be=l(v,"P",{"data-svelte-h":!0}),r(be)!=="svelte-ed7033"&&(be.innerHTML=st),W=a(v),se=l(v,"P",{"data-svelte-h":!0}),r(se)!=="svelte-dg11l8"&&(se.textContent=rt),this.h()},h(){d(b,"class","figure"),d(k,"class","section"),d(S,"class","section"),d(M,"class","figure"),d(Z,"class","section"),d(G,"class","section"),d(re,"class","figure"),d(Q,"class","section"),d(oe,"class","figure"),d(ve,"class","section")},m(v,L){t(v,n,L),t(v,p,L),t(v,h,L),t(v,u,L),t(v,c,L),t(v,O,L),t(v,b,L),t(v,U,L),t(v,k,L),t(v,j,L),t(v,_,L),t(v,ee,L),t(v,P,L),t(v,q,L),t(v,C,L),t(v,E,L),t(v,S,L),t(v,N,L),t(v,M,L),t(v,I,L),t(v,x,L),t(v,ye,L),t(v,A,L),t(v,ue,L),t(v,Z,L),t(v,te,L),t(v,F,L),t(v,Y,L),t(v,G,L),t(v,ke,L),t(v,re,L),t(v,_e,L),t(v,ie,L),t(v,Ce,L),t(v,ae,L),t(v,T,L),t(v,H,L),t(v,X,L),t(v,Q,L),t(v,ne,L),t(v,oe,L),t(v,Ge,L),t(v,me,L),t(v,qe,L),t(v,fe,L),t(v,J,L),t(v,le,L),t(v,Oe,L),t(v,ve,L),t(v,Ue,L),t(v,be,L),t(v,W,L),t(v,se,L)},p:bt,d(v){v&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se))}}}function Nl(m){let n,f;const p=[m[0],Sn];let h={$$slots:{default:[Rl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Sn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Sn={title:"Spyder 6 under the hood: Editor migration, remote dev QA, test overhaul and more!",author:["camgerlach","dalthviz","ccordoba12"],tags:"Feature, Spyder6",category:"Releases",pub_date:"2024-12-13T00:00:00.000Z",summary:"Beyond the headline features, there's a lot more new and improved under the hood in Spyder 6. Daniel Althviz, Spyder's release manager and co-maintainer, was at the forefront of much of it, and we're here to share the highlights with all of you and what he plans to work on next!"};function Bl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Ql=class extends kt{constructor(n){super(),_t(this,n,Bl,Nl,xt,{})}};const Jl=Object.freeze(Object.defineProperty({__proto__:null,default:Ql,metadata:Sn},Symbol.toStringTag,{value:"Module"}));function Vl(m){let n,f,p,h,s=`The foundations of Spyder’s new remote development architecture are available now in Spyder 6.0, with more features to come in 6.1 and beyond!
The goal is to make it easy for you to host your files, data and computations on remote desktops, clusters, servers and the cloud while being able to use Spyder locally.`,u,c,he=`Spyder 6.0 features a new remote connection manager that allows you to connect to any machine with a SSH server, no prior installation or configuration needed, and automatically set up and use a remote Python environment  on the host.
It also features graphical status checking and reporting, host configuration management, and more.
In addition, it brings a new <code>Consoles</code> submenu allowing you to connect to any remote host and launch a console with one click.
You can also stop code execution as well as restart remote kernels from within Spyder.`,O,b,xe='<source src="remote-console-demo.mp4" type="video/mp4"/><track kind="captions"/>',U,k,we=`We’re excited to have our newest core developer, Hendrik Louzada, share with you his insights and perspectives on Spyder 6’s new remote development architecture he helped implement!
Join us as Hendrik shares how he got started with Spyder and the project, how the new achetecture is implemented under the hood, what challenges he faced and what he learned from them, and what’s next for Spyder 6.1.0!`,j,_,pe="How’d you find out about Spyder and why’d you join the project?",ee,P,ge=`I first started to work on Spyder around three years ago, developing a series of plugins to control remote magnetic resonance equipment (such as MRI machines) directly in the IDE.
As part of that project, I made several upstream contributions to Spyder itself to improve the Language Server Protocol support (LSP, the architecture that powers Spyder’s code completion, introspection, analysis and formatting).`,q,C,de=`In 2023, Spyder received a <a href="https://chanzuckerberg.com/" rel="nofollow" class="link">Chan Zuckerberg Initiative</a> Essential Open Source Software for Science <a href="https://chanzuckerberg.com/eoss/proposals/enhancing-spyder-ide-remote-support-for-scientific-research-in-python/" rel="nofollow" class="link">Cycle 5 grant</a> to implement a new remote development architecture and features in Spyder to allow users to develop and run code in remote servers and cloud machines.
After a six-month search by Spyder lead maintainer Carlos Cordoba to find the right candidate to engineer the backend and network architecture for this project, he found me, so I joined the core development team near the end of 2023.<br/><br/>`,E,S,He='<img src="remote-connection-manager-new.png" alt="New remote connection manager dialog in Spyder listing the configurable settings for a new remote host" title="Spyder&#39;s new remote connection manager lists the configurable SSH settings for creating a remote host"/><figcaption>Spyder&#39;s new remote connection manager lists the configurable SSH settings for creating a remote host</figcaption>',N,M,Le="How is the new remote development platform implemented?",I,x,Te=`The backend, <a href="https://github.com/spyder-ide/spyder-remote-services" rel="nofollow" class="link"><code>spyder-remote-services</code></a>, uses <a href="https://jupyter-server.readthedocs.io/" rel="nofollow" class="link">Jupyter Server</a> and the <a href="https://jupyterhub.readthedocs.io/en/stable/reference/rest-api.html" rel="nofollow" class="link">JupyterHub API</a>, since Spyder already leverages the Jupyter architecture to manage kernels and run code.
We decided to use SSH to communicate with the remote machine, since it’s secure and widely used for this purpose.`,ye,A,Ee=`That project is managed through an internal Spyder plugin, <em>Remote Client</em>, which uses the Jupyter API to manage remote Spyder kernels and connect them to Spyder.
The <em>Remote Client</em> <a href="https://github.com/spyder-ide/spyder/pull/22079" rel="nofollow" class="link">frontend</a> and <a href="https://github.com/spyder-ide/spyder/pull/21757" rel="nofollow" class="link">backend</a> were developed as an interface for Spyder to connect and manage the Jupyter Server installed on the remote machine.
The plugin connects to the machine, installs the server, and creates SSH tunnels for the exposed server and extra APIs implemented by <code>spyder-remote-services</code>.
Once that’s complete, Spyder will be able to automatically create remote <a href="https://docs.spyder-ide.org/current/panes/ipythonconsole.html" rel="nofollow" class="link">IPython Consoles</a> on behalf of users.
Furthermore, you can now stop remote computations and restart remote kernels, which was not possible before.<br/><br/>`,ue,Z,We='<img src="remote-console-menu.png" alt="Spyder consoles menu listing remote as well as local Python environments to open" title="Spyder&#39;s Consoles menu now has a new submenu allowing one-click launch of consoles on remote hosts"/><figcaption>Spyder&#39;s Consoles menu now has a new submenu allowing one-click launch of consoles on remote hosts</figcaption>',te,F,Re="What challenges did you face and how’d you overcome them?",Y,G,Be=`There are a number of Python libraries that implement the SSH protocol, but most of them use the underlying SSH client and server installed by the operating system.
Unfortunately, the Windows SSH client has a serious issue that prevents tunnels from working correctly, so I needed to find an implementation that uses the underlying SSH libraries directly instead.
After investigating a number of options, the <a href="https://github.com/ronf/asyncssh" rel="nofollow" class="link">AsyncSSH project</a> was the only one that both meets that requirement and is also robust and well maintained.
Hence, I implemented tunneling using that library in the pull request <a href="https://github.com/spyder-ide/spyder/pull/22223" rel="nofollow" class="link">spyder-ide/spyder#22223</a>.`,ke,re,Ve=`However, there was still an important problem with AsyncSSH: Spyder uses the Qt framework’s event loop for its graphical user interface, which is not async-enabled.
Therefore, I had to write an async API that was flexible enough to be able to call several async functions in a specific event loop, allow for loops to be run concurrently (to avoid blocking the main Qt event loop and causing Spyder’s GUI to freeze), and be thread-safe so it can be called from any Qt thread.`,_e,ie,Qe=`To cover all those requirements, I created the <a href="https://github.com/spyder-ide/spyder/blob/v6.0.0/spyder/api/asyncdispatcher.py#L39" rel="nofollow" class="link"><code>@AsyncDispatcher</code> decorator</a> function, which starts a thread to run an async loop if needed, schedules the async function in a specific loop, and returns a future object with the async function’s result.
That result is emitted in a Qt signal which is then used by Spyder synchronously to perform other tasks (e.g. check if the server is running).<br/><br/>`,Ce,ae,Je='<img src="remote-connection-manager-status.png" alt="Spyder remote connection manager, showing a successfully connected host" title="The new remote connection manager shows detailed connection and status information for remote hosts"/><figcaption>The new remote connection manager shows detailed connection and status information for remote hosts</figcaption>',T,H,Ye="What have you learned so far?",X,Q,tt=`Working on an open source project has provided me with the opportunity to witness how my contributions directly impact users in real time.
Seeing my work being utilized and appreciated by the Spyder community is very rewarding and motivates me to strive for excellence and dedication.
Additionally, observing individuals dedicated to improving Spyder for many years with a common goal to help the scientific community, and without focusing primarily on profit, is incredibly inspiring.`,ne,oe,nt=`This project has taught me the importance of adaptability and perseverance.
There were moments with problems too hard to understand by myself, but with the team’s support I was able to push through those obstacles, making me more confident and resilient.`,Ge,me,ot=`I’m very grateful for the opportunity to work on Spyder with such a dedicated and supportive team.
I am excited to apply the lessons learned as we move into the next phases of this project!`,qe,fe,lt="What’s next for the project?",J,le,it=`Our plans for the next feature version, <a href="https://github.com/spyder-ide/spyder/milestone/134" rel="nofollow" class="link">Spyder 6.1.0</a>, include adding the necessary APIs to <code>spyder-remote-services</code> so it can manipulate the remote file system.
This will allow you to view, copy, move and delete remote files and directories right from Spyder’s Files pane.
Users will also be able to create and manage local and remote Python environments, so they can work in different scientific and programming projects remotely at the same time.`,Oe,ve,at=`Finally, we plan to enable connecting to an already running JupyterHub instance, for situations where the user’s organization already has one set up that they want to work with using Spyder.
The changes required will be relatively straightforward since instead of talking to our own server for remote development, users will communicate with the existing JupyterHub instead.`,Ue,be,st=`We can’t wait to bring these features to you in our next feature version, coming in the first half of next year, and see all the cool things you all end up doing with them.
And until then, as always—Happy Spydering!🕸️`;return{c(){n=o("img"),p=i(),h=o("p"),h.textContent=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("video"),b.innerHTML=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("h2"),_.textContent=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("figure"),S.innerHTML=He,N=i(),M=o("h2"),M.textContent=Le,I=i(),x=o("p"),x.innerHTML=Te,ye=i(),A=o("p"),A.innerHTML=Ee,ue=i(),Z=o("figure"),Z.innerHTML=We,te=i(),F=o("h2"),F.textContent=Re,Y=i(),G=o("p"),G.innerHTML=Be,ke=i(),re=o("p"),re.textContent=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("figure"),ae.innerHTML=Je,T=i(),H=o("h2"),H.textContent=Ye,X=i(),Q=o("p"),Q.textContent=tt,ne=i(),oe=o("p"),oe.textContent=nt,Ge=i(),me=o("p"),me.textContent=ot,qe=i(),fe=o("h2"),fe.textContent=lt,J=i(),le=o("p"),le.innerHTML=it,Oe=i(),ve=o("p"),ve.textContent=at,Ue=i(),be=o("p"),be.textContent=st,this.h()},l(W){n=l(W,"IMG",{src:!0,alt:!0}),p=a(W),h=l(W,"P",{"data-svelte-h":!0}),r(h)!=="svelte-b1qyrp"&&(h.textContent=s),u=a(W),c=l(W,"P",{"data-svelte-h":!0}),r(c)!=="svelte-14j8h23"&&(c.innerHTML=he),O=a(W),b=l(W,"VIDEO",{"data-svelte-h":!0}),r(b)!=="svelte-1l2htvy"&&(b.innerHTML=xe),U=a(W),k=l(W,"P",{"data-svelte-h":!0}),r(k)!=="svelte-13vsu2c"&&(k.textContent=we),j=a(W),_=l(W,"H2",{class:!0,"data-svelte-h":!0}),r(_)!=="svelte-1g4eozn"&&(_.textContent=pe),ee=a(W),P=l(W,"P",{"data-svelte-h":!0}),r(P)!=="svelte-ezm7r3"&&(P.textContent=ge),q=a(W),C=l(W,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1b7dejq"&&(C.innerHTML=de),E=a(W),S=l(W,"FIGURE",{class:!0,"data-svelte-h":!0}),r(S)!=="svelte-1hgpcve"&&(S.innerHTML=He),N=a(W),M=l(W,"H2",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-1ie5u8o"&&(M.textContent=Le),I=a(W),x=l(W,"P",{"data-svelte-h":!0}),r(x)!=="svelte-106ovnw"&&(x.innerHTML=Te),ye=a(W),A=l(W,"P",{"data-svelte-h":!0}),r(A)!=="svelte-5fi4rr"&&(A.innerHTML=Ee),ue=a(W),Z=l(W,"FIGURE",{class:!0,"data-svelte-h":!0}),r(Z)!=="svelte-1pvwzu8"&&(Z.innerHTML=We),te=a(W),F=l(W,"H2",{class:!0,"data-svelte-h":!0}),r(F)!=="svelte-bgd1cn"&&(F.textContent=Re),Y=a(W),G=l(W,"P",{"data-svelte-h":!0}),r(G)!=="svelte-1jav5ek"&&(G.innerHTML=Be),ke=a(W),re=l(W,"P",{"data-svelte-h":!0}),r(re)!=="svelte-6id8ty"&&(re.textContent=Ve),_e=a(W),ie=l(W,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-1egmtyc"&&(ie.innerHTML=Qe),Ce=a(W),ae=l(W,"FIGURE",{class:!0,"data-svelte-h":!0}),r(ae)!=="svelte-c1x2i6"&&(ae.innerHTML=Je),T=a(W),H=l(W,"H2",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-1ff6hdi"&&(H.textContent=Ye),X=a(W),Q=l(W,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1gwmnw1"&&(Q.textContent=tt),ne=a(W),oe=l(W,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1q7io5m"&&(oe.textContent=nt),Ge=a(W),me=l(W,"P",{"data-svelte-h":!0}),r(me)!=="svelte-x3t62t"&&(me.textContent=ot),qe=a(W),fe=l(W,"H2",{class:!0,"data-svelte-h":!0}),r(fe)!=="svelte-15v4oah"&&(fe.textContent=lt),J=a(W),le=l(W,"P",{"data-svelte-h":!0}),r(le)!=="svelte-yridht"&&(le.innerHTML=it),Oe=a(W),ve=l(W,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-1aixe2x"&&(ve.textContent=at),Ue=a(W),be=l(W,"P",{"data-svelte-h":!0}),r(be)!=="svelte-bnizfq"&&(be.textContent=st),this.h()},h(){$e(n.src,f="hero.png")||d(n,"src",f),d(n,"alt","Graphic with the Spyder icon connected to a network, with the words Easy Remote Execution is available now"),b.controls=!0,d(_,"class","section"),d(S,"class","figure"),d(M,"class","section"),d(Z,"class","figure"),d(F,"class","section"),d(ae,"class","figure"),d(H,"class","section"),d(fe,"class","section")},m(W,se){t(W,n,se),t(W,p,se),t(W,h,se),t(W,u,se),t(W,c,se),t(W,O,se),t(W,b,se),t(W,U,se),t(W,k,se),t(W,j,se),t(W,_,se),t(W,ee,se),t(W,P,se),t(W,q,se),t(W,C,se),t(W,E,se),t(W,S,se),t(W,N,se),t(W,M,se),t(W,I,se),t(W,x,se),t(W,ye,se),t(W,A,se),t(W,ue,se),t(W,Z,se),t(W,te,se),t(W,F,se),t(W,Y,se),t(W,G,se),t(W,ke,se),t(W,re,se),t(W,_e,se),t(W,ie,se),t(W,Ce,se),t(W,ae,se),t(W,T,se),t(W,H,se),t(W,X,se),t(W,Q,se),t(W,ne,se),t(W,oe,se),t(W,Ge,se),t(W,me,se),t(W,qe,se),t(W,fe,se),t(W,J,se),t(W,le,se),t(W,Oe,se),t(W,ve,se),t(W,Ue,se),t(W,be,se)},p:bt,d(W){W&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be))}}}function Kl(m){let n,f;const p=[m[0],Tn];let h={$$slots:{default:[Vl]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Tn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Tn={title:"The inside scoop on Spyder 6's new remote development platform",author:["hlouzada","camgerlach"],tags:"Feature, Spyder6",category:"Releases",pub_date:"2024-11-29T00:00:00.000Z",summary:"Spyder 6 includes a brand new remote development platform, building the foundations for enabling Spyder to easily leverage the power and data of remote desktops, servers, clusters and the cloud from anywhere! Hendrik Louzada, the lead developer behind this new backend, shares the details on how it all works, how he implemented it and his experiences doing so, and what's next for remote development in Spyder 6.1!"};function Zl(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Xl=class extends kt{constructor(n){super(),_t(this,n,Zl,Kl,xt,{})}};const Yl=Object.freeze(Object.defineProperty({__proto__:null,default:Xl,metadata:Tn},Symbol.toStringTag,{value:"Module"}));function ei(m){let n,f='<a href="https://ipython.org/" rel="nofollow" class="link">IPython</a> is a great improvement over the standard Python interpreter, bringing many enhancements such as autocompletion and “magic” commands. When debugging, however, many of these features become inaccessible. With Spyder, we aim to bring back these capabilities and more for a truly premium debugging experience! (And believe me, I use this debugger a lot, and not only because I write code that might contain bugs :p).',p,h,s="In this post, I will describe the debugger improvements we’ve already made in Spyder 4, as well as those that are already implemented or under review for Spyder 4.2 and beyond.",u,c,he="Make the debugger more like IPython",O,b,xe=`IPython improves on the stock Python interpreter by adding syntax highlighting, completion, and history.
We have done the same for the debugger!`,U,k,we,j,_,pe="The output is prettier (and easier to read) than plain black text, as it was in Spyder 3!",ee,P,ge=`Code completion and history for the debugger use the same functionality as the IPython console, so you should not notice any difference in behaviour.
Just press <code>Tab</code> to trigger autocomplete suggestions, and use the up and down arrows to recall previous commands.`,q,C,de,E,S,He="This can result useful if you don’t know every library’s documentation by heart!",N,M,Le="Another improvement that we added is the ability to write multiline statements.",I,x,Te,ye,A,Ee="This is better than getting <code>SyntaxError: unexpected EOF while parsing</code>, as was the case in Spyder 3.",ue,Z,We=`Finally, IPython has a lot of nice <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html" rel="nofollow" class="link">magic functions</a> you can take advantage of.
I personally often use <code>%matplotlib</code> to switch between the <code>qt5</code> and <code>inline</code> plotting backends, and <code>%timeit</code> to check how fast a given snippet of code is.
Now, these can be used in the debugger as well!`,te,F,Re,Y,G,Be="Core improvements",ke,re,Ve=`When debugging code, a lot of time can be lost stepping through other Python packages.
To avoid that, enable the new <code>Ignore Python libraries while debugging</code> option in Spyder’s preferences under <code>IPython Console &gt; Debugger &gt; Debug</code>.
This will skip all the built-in and third-party Python modules and help you focus on your own code.`,_e,ie,Qe,Ce,ae,Je=`Another pain point for me is the mix of Pdb commands and Python statements when using the interactive prompt.
While debugging a script with a variable named <code>step</code>, for example, typing <code>step</code> in the Pdb prompt will not display the value of <code>step</code>, but will instead step through the code.
To avoid this, the Spyder 4.2 debugger will give precedence to Python expressions over Pdb commands; prefixing an expression with an exclamation mark will explicitly run it as a Pdb command.
This matches how the IPython Console handles clashes between magic functions and Python expressions, and contrasts with the previous behavior, where Pdb commands took precedence.
You can toggle this under <code>IPython Console &gt; Debugger &gt; Debug</code> in Spyder’s preferences.`,T,H,Ye,X,Q,tt="Here, you can see I can have a variable named <code>step</code>, and use it just as I would in the IPython console!",ne,oe,nt=`While debugging, the context changes constantly, which can be annoying if you need to use a certain module in each frame.
To address this, Spyder 4.2 will allow you to execute a snippet of code before any Pdb command.
I personally use <code>import matplotlib.pyplot as plt</code> so I can use Matplotlib anywhere with no extra commands!
You’ll be able to set this up for yourself under <code>Preferences</code> &gt; <code>IPython Console</code> &gt; <code>Debugger</code> &gt; <code>Run code while debugging</code>.`,Ge,me,ot,qe,fe,lt="Matplotlib support",J,le,it=`Speaking of using Matplotlib, two improvements will make your plotting life much easier while in the debugger.
First, if you use the <code>inline</code> backend, the <code>Process execute events while debugging</code> option in <code>Preferences &gt; IPython console &gt; Debugger</code> (on by defaults) enables plotting after each command.`,Oe,ve,at,Ue,be,st=`If you would rather use an interactive backend, Spyder 4.2 will allow you to do that too!
The event loop will be running while waiting for a Pdb input, which will bring Matplotlib figures to life!`,W,se,rt,v,L,pt="For example, interactive figures are great to zoom and pan.",Xe,De,ht="Spyder Editor integration",et,Fe,ut=`By clicking next to the line number in the Editor, you can set a breakpoint to stop the debugger upon reaching that line.
With a Shift-click, you can set a conditional breakpoint that will only pause execution if an expression you write evaluates to <code>True</code>.
This is very useful if you are debugging a loop and want to go to a specific iteration, for example!
While debugging, the Editor will show you the line on which execution is stopped.
If you move around in the Editor, you can always go back to the current line by using the Pdb <code>(w)here</code> command.`,g,z,ct,dt,Ne,ft=`Here, you can see the Spyder debugger is stopped at the breakpoint on line 385, which is highlighted.
The next line has a conditional breakpoint.`,R,ce,yt="Other Spyder panes",y,w,Ae=`Several other Spyder panes are useful while debugging.
Breakpoints gives you a list of all the breakpoints you have set throughout your code.`,vt,Ct,qt,B,Me,Rt="The Variable Explorer pane allows you to browse and modify the local namespace wherever the debugger is stopped.",Lt,Et,Nt,jt,At,Bt="The future",$t,Dt,V=`I’m excited for the new Frames Explorer pane, which is currently almost ready for Spyder 5.
Usually while debugging, it can be hard to tell from where the current function was invoked, and one must often step up a long chain of calls to figure it out.
With the Frames Explorer, you have direct access to all the relevant call information, and you can jump around the stack easily!`,Se,zt,Jt,Wt,Ft,K="I can see where the current function was called from!",je,Ot,Zt=`The next challenge I will be tackling is to enable the debugger to stop in threads.
This is a bit difficult to implement because if two threads reach a breakpoint at the same time, only one of them can take control of the shell, leading to skipped breakpoints.
This might be okay, but I’m still figuring that out.`,Qt,Ut,tn="Try out the new improvements in the Spyder debugger and let us know if they make your debugging easier!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.textContent=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("img"),j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.textContent=Le,I=i(),x=o("img"),ye=i(),A=o("p"),A.innerHTML=Ee,ue=i(),Z=o("p"),Z.innerHTML=We,te=i(),F=o("img"),Y=i(),G=o("h2"),G.textContent=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("img"),Ce=i(),ae=o("p"),ae.innerHTML=Je,T=i(),H=o("img"),X=i(),Q=o("p"),Q.innerHTML=tt,ne=i(),oe=o("p"),oe.innerHTML=nt,Ge=i(),me=o("img"),qe=i(),fe=o("h2"),fe.textContent=lt,J=i(),le=o("p"),le.innerHTML=it,Oe=i(),ve=o("img"),Ue=i(),be=o("p"),be.textContent=st,W=i(),se=o("img"),v=i(),L=o("p"),L.textContent=pt,Xe=i(),De=o("h2"),De.textContent=ht,et=i(),Fe=o("p"),Fe.innerHTML=ut,g=i(),z=o("img"),dt=i(),Ne=o("p"),Ne.textContent=ft,R=i(),ce=o("h2"),ce.textContent=yt,y=i(),w=o("p"),w.textContent=Ae,vt=i(),Ct=o("img"),B=i(),Me=o("p"),Me.textContent=Rt,Lt=i(),Et=o("img"),jt=i(),At=o("h2"),At.textContent=Bt,$t=i(),Dt=o("p"),Dt.textContent=V,Se=i(),zt=o("img"),Wt=i(),Ft=o("p"),Ft.textContent=K,je=i(),Ot=o("p"),Ot.textContent=Zt,Qt=i(),Ut=o("p"),Ut.textContent=tn,this.h()},l(D){n=l(D,"P",{"data-svelte-h":!0}),r(n)!=="svelte-eq6djb"&&(n.innerHTML=f),p=a(D),h=l(D,"P",{"data-svelte-h":!0}),r(h)!=="svelte-14iqtkk"&&(h.textContent=s),u=a(D),c=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-1hhjgz9"&&(c.textContent=he),O=a(D),b=l(D,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1kytrz5"&&(b.textContent=xe),U=a(D),k=l(D,"IMG",{src:!0,alt:!0}),j=a(D),_=l(D,"P",{"data-svelte-h":!0}),r(_)!=="svelte-17zug5m"&&(_.textContent=pe),ee=a(D),P=l(D,"P",{"data-svelte-h":!0}),r(P)!=="svelte-y5a8wy"&&(P.innerHTML=ge),q=a(D),C=l(D,"IMG",{src:!0,alt:!0}),E=a(D),S=l(D,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1mhhocy"&&(S.textContent=He),N=a(D),M=l(D,"P",{"data-svelte-h":!0}),r(M)!=="svelte-u84fw"&&(M.textContent=Le),I=a(D),x=l(D,"IMG",{src:!0,alt:!0}),ye=a(D),A=l(D,"P",{"data-svelte-h":!0}),r(A)!=="svelte-hcqh6c"&&(A.innerHTML=Ee),ue=a(D),Z=l(D,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-xkeuem"&&(Z.innerHTML=We),te=a(D),F=l(D,"IMG",{src:!0,alt:!0}),Y=a(D),G=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-1glm3mm"&&(G.textContent=Be),ke=a(D),re=l(D,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1wye7ed"&&(re.innerHTML=Ve),_e=a(D),ie=l(D,"IMG",{src:!0,alt:!0}),Ce=a(D),ae=l(D,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-1jix07i"&&(ae.innerHTML=Je),T=a(D),H=l(D,"IMG",{src:!0,alt:!0}),X=a(D),Q=l(D,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1ycdd4o"&&(Q.innerHTML=tt),ne=a(D),oe=l(D,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1bo8rlr"&&(oe.innerHTML=nt),Ge=a(D),me=l(D,"IMG",{src:!0,alt:!0}),qe=a(D),fe=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(fe)!=="svelte-iagrp5"&&(fe.textContent=lt),J=a(D),le=l(D,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1y3or5c"&&(le.innerHTML=it),Oe=a(D),ve=l(D,"IMG",{src:!0,alt:!0}),Ue=a(D),be=l(D,"P",{"data-svelte-h":!0}),r(be)!=="svelte-za37fn"&&(be.textContent=st),W=a(D),se=l(D,"IMG",{src:!0,alt:!0}),v=a(D),L=l(D,"P",{"data-svelte-h":!0}),r(L)!=="svelte-1ue0ftz"&&(L.textContent=pt),Xe=a(D),De=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(De)!=="svelte-1tog8pa"&&(De.textContent=ht),et=a(D),Fe=l(D,"P",{"data-svelte-h":!0}),r(Fe)!=="svelte-164gu6o"&&(Fe.innerHTML=ut),g=a(D),z=l(D,"IMG",{src:!0,alt:!0}),dt=a(D),Ne=l(D,"P",{"data-svelte-h":!0}),r(Ne)!=="svelte-1qwhc92"&&(Ne.textContent=ft),R=a(D),ce=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(ce)!=="svelte-1x5u0ly"&&(ce.textContent=yt),y=a(D),w=l(D,"P",{"data-svelte-h":!0}),r(w)!=="svelte-9vkyuo"&&(w.textContent=Ae),vt=a(D),Ct=l(D,"IMG",{src:!0,alt:!0}),B=a(D),Me=l(D,"P",{"data-svelte-h":!0}),r(Me)!=="svelte-10y0bh"&&(Me.textContent=Rt),Lt=a(D),Et=l(D,"IMG",{src:!0,alt:!0}),jt=a(D),At=l(D,"H2",{class:!0,"data-svelte-h":!0}),r(At)!=="svelte-1wpdo9o"&&(At.textContent=Bt),$t=a(D),Dt=l(D,"P",{"data-svelte-h":!0}),r(Dt)!=="svelte-12unpsb"&&(Dt.textContent=V),Se=a(D),zt=l(D,"IMG",{src:!0,alt:!0}),Wt=a(D),Ft=l(D,"P",{"data-svelte-h":!0}),r(Ft)!=="svelte-146oq1y"&&(Ft.textContent=K),je=a(D),Ot=l(D,"P",{"data-svelte-h":!0}),r(Ot)!=="svelte-e80c8v"&&(Ot.textContent=Zt),Qt=a(D),Ut=l(D,"P",{"data-svelte-h":!0}),r(Ut)!=="svelte-193jkga"&&(Ut.textContent=tn),this.h()},h(){d(c,"class","section"),$e(k.src,we="debugger-ipdb.png")||d(k,"src",we),d(k,"alt","Debugger ipdb"),$e(C.src,de="debugger-autocomplete.png")||d(C,"src",de),d(C,"alt","Debugger-autocomplete"),$e(x.src,Te="debugger-multiline.png")||d(x,"src",Te),d(x,"alt","Debugger-multiline"),$e(F.src,Re="debugger-timeit.png")||d(F,"src",Re),d(F,"alt","Debugger timeit"),d(G,"class","section"),$e(ie.src,Qe="debugger-preferences.png")||d(ie,"src",Qe),d(ie,"alt","Debugger preferences"),$e(H.src,Ye="debugger-step.png")||d(H,"src",Ye),d(H,"alt","Debugger"),$e(me.src,ot="debugger-modules.png")||d(me,"src",ot),d(me,"alt","Debugger modules"),d(fe,"class","section"),$e(ve.src,at="debugger-plots.png")||d(ve,"src",at),d(ve,"alt","Debugger plots"),$e(se.src,rt="debugger-interactive-plots.png")||d(se,"src",rt),d(se,"alt","Debugger interactive plots"),d(De,"class","section"),$e(z.src,ct="editor-breakpoints.png")||d(z,"src",ct),d(z,"alt","Editor breakpoints"),d(ce,"class","section"),$e(Ct.src,qt="debugger-breakpoint.png")||d(Ct,"src",qt),d(Ct,"alt","Debugger breakpoint"),$e(Et.src,Nt="variable-explorer.png")||d(Et,"src",Nt),d(Et,"alt","Variable Explorer"),d(At,"class","section"),$e(zt.src,Jt="frames-explorer.png")||d(zt,"src",Jt),d(zt,"alt","Frames Explorer")},m(D,Pe){t(D,n,Pe),t(D,p,Pe),t(D,h,Pe),t(D,u,Pe),t(D,c,Pe),t(D,O,Pe),t(D,b,Pe),t(D,U,Pe),t(D,k,Pe),t(D,j,Pe),t(D,_,Pe),t(D,ee,Pe),t(D,P,Pe),t(D,q,Pe),t(D,C,Pe),t(D,E,Pe),t(D,S,Pe),t(D,N,Pe),t(D,M,Pe),t(D,I,Pe),t(D,x,Pe),t(D,ye,Pe),t(D,A,Pe),t(D,ue,Pe),t(D,Z,Pe),t(D,te,Pe),t(D,F,Pe),t(D,Y,Pe),t(D,G,Pe),t(D,ke,Pe),t(D,re,Pe),t(D,_e,Pe),t(D,ie,Pe),t(D,Ce,Pe),t(D,ae,Pe),t(D,T,Pe),t(D,H,Pe),t(D,X,Pe),t(D,Q,Pe),t(D,ne,Pe),t(D,oe,Pe),t(D,Ge,Pe),t(D,me,Pe),t(D,qe,Pe),t(D,fe,Pe),t(D,J,Pe),t(D,le,Pe),t(D,Oe,Pe),t(D,ve,Pe),t(D,Ue,Pe),t(D,be,Pe),t(D,W,Pe),t(D,se,Pe),t(D,v,Pe),t(D,L,Pe),t(D,Xe,Pe),t(D,De,Pe),t(D,et,Pe),t(D,Fe,Pe),t(D,g,Pe),t(D,z,Pe),t(D,dt,Pe),t(D,Ne,Pe),t(D,R,Pe),t(D,ce,Pe),t(D,y,Pe),t(D,w,Pe),t(D,vt,Pe),t(D,Ct,Pe),t(D,B,Pe),t(D,Me,Pe),t(D,Lt,Pe),t(D,Et,Pe),t(D,jt,Pe),t(D,At,Pe),t(D,$t,Pe),t(D,Dt,Pe),t(D,Se,Pe),t(D,zt,Pe),t(D,Wt,Pe),t(D,Ft,Pe),t(D,je,Pe),t(D,Ot,Pe),t(D,Qt,Pe),t(D,Ut,Pe)},p:bt,d(D){D&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne),e(R),e(ce),e(y),e(w),e(vt),e(Ct),e(B),e(Me),e(Lt),e(Et),e(jt),e(At),e($t),e(Dt),e(Se),e(zt),e(Wt),e(Ft),e(je),e(Ot),e(Qt),e(Ut))}}}function ti(m){let n,f;const p=[m[0],Pn];let h={$$slots:{default:[ei]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Pn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Pn={title:"New features in Spyder 4's new debugger!",author:"impact27",category:"News",tags:"milestone, team, status-update",pub_date:"2020-11-05T00:00:00.000Z",summary:'IPython is a great improvement over the standard Python interpreter, bringing many enhancements such as autocompletion and "magic" commands. When debugging, however, many of these features become inaccessible. With Spyder, we aim to bring back these capabilities and more for a truly premium debugging experience! (And believe me, I use this debugger a lot, and not only because I write code that might contain bugs :p).'};function ni(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let oi=class extends kt{constructor(n){super(),_t(this,n,ni,ti,xt,{})}};const li=Object.freeze(Object.defineProperty({__proto__:null,default:oi,metadata:Pn},Symbol.toStringTag,{value:"Module"}));function ii(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2019/11/File-management-improvements-in-Spyder4/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s='Version 4.0 of <a href="https://www.spyder-ide.org/" rel="nofollow" class="link">Spyder</a> is almost ready! It has been in the making for well over two years, and it contains lots of interesting new features. We will focus on the Files pane in this post, where we’ve made several improvements to the interface and file management tools.',u,c,he="Simplified interface",O,b,xe="In order to simplify the Files pane’s interface, the columns corresponding to size and kind are hidden by default. To change which columns are shown, use the top-right pane menu or right-click the header directly.",U,k,we,j,_,pe,ee,P,ge="Custom file associations",q,C,de="First, we added the ability to associate different external applications with specific file extensions they can open. Under the File associations tab of the Files preferences pane, you can add file types and set the external program used to open each of them by default.",E,S,He,N,M,Le="Once you’ve set this up, files will automatically launch in the associated application when opened from the Files pane in Spyder. Additionally, when you right-click a file you will find an <code>Open with...</code> option that will show the application associated with this extension.",I,x,Te,ye,A,Ee="Single click open option",ue,Z,We="We’ve added a new option to open files and directories with a single-click instead of a double-click, to suit different user preferences. To enable this option, go to the General tab of the Files preferences pane and check the option <code>Single click to open files</code>. With this setting, only a single click is needed to open a file in the Files pane either externally or in Spyder.",te,F,Re,Y,G,Be="Bear in mind that changing this configuration option will also affect the behaviour of the Project Explorer pane.",ke,re,Ve="Open files externally",_e,ie,Qe="We added the option to open files with the operating system’s default program for the file type to the Files pane’s context menu. To use this feature, right-click any file in the Files pane and click <code>Open externally</code>",Ce,ae,Je,T,H,Ye=`Moreover, it is now possible to select more than one file on which to perform a context menu action, thanks to the Files pane’s new multi-select functionality. For this, press <code>Ctrl</code> (<code>Cmd</code> on macOS) or <code>Shift</code> while clicking on the files to select, just as you would in your operating system’s file manager (Windows Explorer, macOS Finder, etc). As you’d expect, <code>Ctrl</code> (<code>Cmd</code>) selects individual files one by one, while <code>Shift</code> selects all the files between the one you click and the one previously selected.
Once you’ve selected multiple files, it is now possible to execute many of the actions available in the context menu on all the selected files, including delete, rename, move, copy and open externally.`,X,Q,tt,ne,oe,nt="Absolute and relative path handling",Ge,me,ot="Spyder 4 now allows you to easily copy the absolute or relative paths of one or more files in the <code>Files</code> pane and pasting them as well-formatted text anywhere else in Spyder. Just right-clicking any file or files in the Files or Project panes and select the desired option.",qe,fe,lt,J,le,it="Beyond just copying a single path, when pasting more than one Spyder will intelligently format it into a comma-separated collection of quoted strings, one path per line, that can be pasted directly into a list with no additional formatting needed.",Oe,ve,at,Ue,be,st="The <code>Copy Absolute Path</code> option gets us the complete path of each selected file, starting from the drive root.",W,se,rt,v,L,pt="Alternatively, <code>Copy Relative Path</code> gets us the path of the file relative to the current working (displayed in the top right of the Spyder window).",Xe,De,ht,et,Fe,ut="File type icons",g,z,ct="Finally, files in the <code>Files</code> pane are now displayed with icons depending on their type. There are custom icons for the source files of a variety of common programming languages including C C++, C Sharp, Java, Python, R, and Swift; for media types like JPEG, MP3, and M4A; and for other common extensions such as <code>.txt</code> and <code>.tex</code>. This allows you to identify file types with just a glance and select the appropriate application accordingly.",dt,Ne,ft,R,ce,yt='With these new features and UI options in Spyder’s <code>Files</code> pane, we hope you will enjoy the improved file management experience coming in Spyder 4! We would like to thank Quansight, our donors, and most of all our dedicated users and contributors from around the world for making these features possible. The final version will be released very soon, but if you’d like to try it out now and share your feedback, follow the instructions on our <a href="https://github.com/spyder-ide/spyder/releases" rel="nofollow" class="link">Github</a>. Happy Spydering!';return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("img"),j=i(),_=o("img"),ee=i(),P=o("h2"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("img"),N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("img"),ye=i(),A=o("h2"),A.textContent=Ee,ue=i(),Z=o("p"),Z.innerHTML=We,te=i(),F=o("img"),Y=i(),G=o("p"),G.textContent=Be,ke=i(),re=o("h2"),re.textContent=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("img"),T=i(),H=o("p"),H.innerHTML=Ye,X=i(),Q=o("img"),ne=i(),oe=o("h2"),oe.textContent=nt,Ge=i(),me=o("p"),me.innerHTML=ot,qe=i(),fe=o("img"),J=i(),le=o("p"),le.textContent=it,Oe=i(),ve=o("img"),Ue=i(),be=o("p"),be.innerHTML=st,W=i(),se=o("img"),v=i(),L=o("p"),L.innerHTML=pt,Xe=i(),De=o("img"),et=i(),Fe=o("h2"),Fe.textContent=ut,g=i(),z=o("p"),z.innerHTML=ct,dt=i(),Ne=o("img"),R=i(),ce=o("p"),ce.innerHTML=yt,this.h()},l(y){n=l(y,"P",{"data-svelte-h":!0}),r(n)!=="svelte-azjo9p"&&(n.innerHTML=f),p=a(y),h=l(y,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1vzrev8"&&(h.innerHTML=s),u=a(y),c=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-64n2sn"&&(c.textContent=he),O=a(y),b=l(y,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1qns2hr"&&(b.textContent=xe),U=a(y),k=l(y,"IMG",{src:!0,alt:!0}),j=a(y),_=l(y,"IMG",{src:!0,alt:!0}),ee=a(y),P=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-bw5n4z"&&(P.textContent=ge),q=a(y),C=l(y,"P",{"data-svelte-h":!0}),r(C)!=="svelte-qnj996"&&(C.textContent=de),E=a(y),S=l(y,"IMG",{src:!0,alt:!0}),N=a(y),M=l(y,"P",{"data-svelte-h":!0}),r(M)!=="svelte-sbs8mx"&&(M.innerHTML=Le),I=a(y),x=l(y,"IMG",{src:!0,alt:!0}),ye=a(y),A=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-r9kw23"&&(A.textContent=Ee),ue=a(y),Z=l(y,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1slqqwg"&&(Z.innerHTML=We),te=a(y),F=l(y,"IMG",{src:!0,alt:!0}),Y=a(y),G=l(y,"P",{"data-svelte-h":!0}),r(G)!=="svelte-7e0gg6"&&(G.textContent=Be),ke=a(y),re=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(re)!=="svelte-897z0l"&&(re.textContent=Ve),_e=a(y),ie=l(y,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-14zm4mn"&&(ie.innerHTML=Qe),Ce=a(y),ae=l(y,"IMG",{src:!0,alt:!0}),T=a(y),H=l(y,"P",{"data-svelte-h":!0}),r(H)!=="svelte-bhjge1"&&(H.innerHTML=Ye),X=a(y),Q=l(y,"IMG",{src:!0,alt:!0}),ne=a(y),oe=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(oe)!=="svelte-1em1ffi"&&(oe.textContent=nt),Ge=a(y),me=l(y,"P",{"data-svelte-h":!0}),r(me)!=="svelte-1vpx8f9"&&(me.innerHTML=ot),qe=a(y),fe=l(y,"IMG",{src:!0,alt:!0}),J=a(y),le=l(y,"P",{"data-svelte-h":!0}),r(le)!=="svelte-12somj2"&&(le.textContent=it),Oe=a(y),ve=l(y,"IMG",{src:!0,alt:!0}),Ue=a(y),be=l(y,"P",{"data-svelte-h":!0}),r(be)!=="svelte-1ngtco8"&&(be.innerHTML=st),W=a(y),se=l(y,"IMG",{src:!0,alt:!0}),v=a(y),L=l(y,"P",{"data-svelte-h":!0}),r(L)!=="svelte-d0kivk"&&(L.innerHTML=pt),Xe=a(y),De=l(y,"IMG",{src:!0,alt:!0}),et=a(y),Fe=l(y,"H2",{class:!0,"data-svelte-h":!0}),r(Fe)!=="svelte-1pwpvz6"&&(Fe.textContent=ut),g=a(y),z=l(y,"P",{"data-svelte-h":!0}),r(z)!=="svelte-uw20bn"&&(z.innerHTML=ct),dt=a(y),Ne=l(y,"IMG",{src:!0,alt:!0}),R=a(y),ce=l(y,"P",{"data-svelte-h":!0}),r(ce)!=="svelte-z72452"&&(ce.innerHTML=yt),this.h()},h(){d(c,"class","section"),$e(k.src,we="pane-menu.png")||d(k,"src",we),d(k,"alt","Pane Menu"),$e(_.src,pe="header-menu.png")||d(_,"src",pe),d(_,"alt","Header Menu"),d(P,"class","section"),$e(S.src,He="file-associations.png")||d(S,"src",He),d(S,"alt","File associations"),$e(x.src,Te="open-with.png")||d(x,"src",Te),d(x,"alt","Open With"),d(A,"class","section"),$e(F.src,Re="single-click.png")||d(F,"src",Re),d(F,"alt","Single click"),d(re,"class","section"),$e(ae.src,Je="open-externally.png")||d(ae,"src",Je),d(ae,"alt","Open Externally"),$e(Q.src,tt="select-files.png")||d(Q,"src",tt),d(Q,"alt","Select Files"),d(oe,"class","section"),$e(fe.src,lt="copy-path.png")||d(fe,"src",lt),d(fe,"alt","Copy Path"),$e(ve.src,at="multiple-paths.png")||d(ve,"src",at),d(ve,"alt","Multiple Paths"),$e(se.src,rt="absolute-path.png")||d(se,"src",rt),d(se,"alt","Absolute Path"),$e(De.src,ht="relative-path.png")||d(De,"src",ht),d(De,"alt","Relative Path"),d(Fe,"class","section"),$e(Ne.src,ft="file-extensions.png")||d(Ne,"src",ft),d(Ne,"alt","File Extensions")},m(y,w){t(y,n,w),t(y,p,w),t(y,h,w),t(y,u,w),t(y,c,w),t(y,O,w),t(y,b,w),t(y,U,w),t(y,k,w),t(y,j,w),t(y,_,w),t(y,ee,w),t(y,P,w),t(y,q,w),t(y,C,w),t(y,E,w),t(y,S,w),t(y,N,w),t(y,M,w),t(y,I,w),t(y,x,w),t(y,ye,w),t(y,A,w),t(y,ue,w),t(y,Z,w),t(y,te,w),t(y,F,w),t(y,Y,w),t(y,G,w),t(y,ke,w),t(y,re,w),t(y,_e,w),t(y,ie,w),t(y,Ce,w),t(y,ae,w),t(y,T,w),t(y,H,w),t(y,X,w),t(y,Q,w),t(y,ne,w),t(y,oe,w),t(y,Ge,w),t(y,me,w),t(y,qe,w),t(y,fe,w),t(y,J,w),t(y,le,w),t(y,Oe,w),t(y,ve,w),t(y,Ue,w),t(y,be,w),t(y,W,w),t(y,se,w),t(y,v,w),t(y,L,w),t(y,Xe,w),t(y,De,w),t(y,et,w),t(y,Fe,w),t(y,g,w),t(y,z,w),t(y,dt,w),t(y,Ne,w),t(y,R,w),t(y,ce,w)},p:bt,d(y){y&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne),e(R),e(ce))}}}function ai(m){let n,f;const p=[m[0],Mn];let h={$$slots:{default:[ii]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Mn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Mn={title:"File management improvements in Spyder 4",author:"juanis2112",category:"News",tags:"milestone, team, status-update",pub_date:"2019-11-12T00:00:00.000Z",summary:"Version 4.0 of Spyder is almost ready! It has been in the making for well over three years, and it contains lots of interesting new features. We will focus on the Files pane in this post, where we've made several improvements to the interface and file management tools. Some of this include the simplification of the interface by hiding size and kind columns by default, the possibility to custom file associations and open files externally with specific programs associated from Spyder, the functions to copy the absolute and relative paths of the files from the editor and the incorporation of icons depending on the file type which are displayed along with the file's name."};function si(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let ri=class extends kt{constructor(n){super(),_t(this,n,si,ai,xt,{})}};const ui=Object.freeze(Object.defineProperty({__proto__:null,default:ri,metadata:Mn},Symbol.toStringTag,{value:"Module"}));function di(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2019/08/spyder-40-beta4-kite-integration-is-here/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s='<em>Note</em>: <a href="https://kite.com" rel="nofollow" class="link">Kite</a> is sponsoring the work discussed in this blog post, and in addition supports Spyder 4.0 development through a Quansight Labs <a href="https://labs.quansight.org/blog/2019/05/community-driven-opensource-funded-development/" rel="nofollow" class="link">Community Work Order</a>.',u,c,he='As part of our next release, we are proud to announce an additional completion client for Spyder, Kite. <a href="https://kite.com/" rel="nofollow" class="link">Kite</a> is a novel completion client that uses Machine Learning techniques to find and predict the best autocompletion for a given text. Additionally, it collects improved documentation for compiled packages, e.g. Matplotlib, NumPy and SciPy, that cannot be obtained easily by using traditional code analysis packages such as Jedi. Although Kite is not open source like Spyder, you can download it without charge at the <a href="https://kite.com" rel="nofollow" class="link">Kite website</a>.',O,b,xe,U,k,we="By incorporating Kite into Spyder, we will improve and provide the ultimate autocompletion and signature retrieval experience for most of the scientific Python stack and beyond. For instance, let’s take a look at the following PyTorch completion. While the Language Server Protocol server would not complete some of the functions, e.g. <code>torch.linspace</code>, Kite is able to return it successfully:",j,_,pe,ee,P,ge="Another benefit of using Kite is that of personalized completions, due to incremental ML analysis performed by the analysis engine, which keeps track of the keypresses and text writing style, alongside common usage patterns, this way users will get a personalized experience that improves over time.",q,C,de="We are working in collaboration with the Kite team to improve our autocompletion experience for the upcoming 4.0 release of Spyder. We plan to have all Kite features tested and ready to be used; that includes adding on-the-fly completions and code snippets for autocompletions.",E,S,He="To start using Kite, you just need to install the Kite client from their web page. They offer client packages for Windows, Linux and MacOS that are easy to install. Once Kite is installed on the system, Spyder is able to detect it and start the Kite client automatically.",N,M,Le='Our new Kite client will work alongside the new <a href="https://www.spyder-ide.org/blog/release-spyder-4beta2/" rel="nofollow" class="link">Language Server Protocol</a> and the usual fallback tokenizer for files that cannot be analyzed by either the LSP or Kite. Thus, Spyder will be able to provide an optimal autocompletion experience for Python and other languages. Besides that, it is possible to define the priority between different completion plugins to show a completion source result first over the other completion plugins.',I,x,Te="Last but not least, as part of this novel client, we are introducing a new completion API that enables to write third-party completion clients for Spyder that require integration with the code editor and project manager. We offer calls to perform autocompletion, hover requests, signature hints, among others without any hassle. By leveraging this API, it should be possible to add completions and documentation suitable for domain-specific applications developed using Spyder.",ye,A,Ee="The function calls and constants of the new completion API will be added to the Spyder documentation and should be available in the next release of Spyder. Additionally, we will provide code snippets support for both LSP and Kite for the next release - please stay tuned!",ue,Z,We="We, the Spyder development team, hope that these new improvements accelerate your productivity, and we invite you to beta-test them to improve them even more. As always, we are open to your questions, issue reports and contributions on all of our communication channels and our Github repository.";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("img"),U=i(),k=o("p"),k.innerHTML=we,j=i(),_=o("img"),ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("p"),S.textContent=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("p"),A.textContent=Ee,ue=i(),Z=o("p"),Z.textContent=We,this.h()},l(te){n=l(te,"P",{"data-svelte-h":!0}),r(n)!=="svelte-eotn7j"&&(n.innerHTML=f),p=a(te),h=l(te,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1pywkh7"&&(h.innerHTML=s),u=a(te),c=l(te,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1fbgn4i"&&(c.innerHTML=he),O=a(te),b=l(te,"IMG",{src:!0,alt:!0}),U=a(te),k=l(te,"P",{"data-svelte-h":!0}),r(k)!=="svelte-y2k5fd"&&(k.innerHTML=we),j=a(te),_=l(te,"IMG",{src:!0,alt:!0}),ee=a(te),P=l(te,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1pqgtfu"&&(P.textContent=ge),q=a(te),C=l(te,"P",{"data-svelte-h":!0}),r(C)!=="svelte-f9uqef"&&(C.textContent=de),E=a(te),S=l(te,"P",{"data-svelte-h":!0}),r(S)!=="svelte-lthd3c"&&(S.textContent=He),N=a(te),M=l(te,"P",{"data-svelte-h":!0}),r(M)!=="svelte-1rbdp3d"&&(M.innerHTML=Le),I=a(te),x=l(te,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1jtibkh"&&(x.textContent=Te),ye=a(te),A=l(te,"P",{"data-svelte-h":!0}),r(A)!=="svelte-1duftot"&&(A.textContent=Ee),ue=a(te),Z=l(te,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-6g4d07"&&(Z.textContent=We),this.h()},h(){$e(b.src,xe="spyder-kite-hover.png")||d(b,"src",xe),d(b,"alt","Completions with Kite"),$e(_.src,pe="spyder-kite-completions.gif")||d(_,"src",pe),d(_,"alt","Completions with Kite")},m(te,F){t(te,n,F),t(te,p,F),t(te,h,F),t(te,u,F),t(te,c,F),t(te,O,F),t(te,b,F),t(te,U,F),t(te,k,F),t(te,j,F),t(te,_,F),t(te,ee,F),t(te,P,F),t(te,q,F),t(te,C,F),t(te,E,F),t(te,S,F),t(te,N,F),t(te,M,F),t(te,I,F),t(te,x,F),t(te,ye,F),t(te,A,F),t(te,ue,F),t(te,Z,F)},p:bt,d(te){te&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z))}}}function hi(m){let n,f;const p=[m[0],Hn];let h={$$slots:{default:[di]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Hn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Hn={title:"Spyder 4.0: Kite integration is here",pub_date:"2019-08-16T00:00:00.000Z",tags:"milestone, team, status-update",category:"News",author:"andfoy",summary:"As part of our next release, we are proud to announce an additional completion client for Spyder, Kite. Kite is a novel completion client that uses Machine Learning techniques to find and predict the best autocompletion for a given text. Additionally, it collects improved documentation for compiled packages, e.g. Matplotlib, NumPy and SciPy, that cannot be obtained easily by using traditional code analysis packages such as Jedi."};function pi(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let ci=class extends kt{constructor(n){super(),_t(this,n,pi,hi,xt,{})}};const fi=Object.freeze(Object.defineProperty({__proto__:null,default:ci,metadata:Hn},Symbol.toStringTag,{value:"Module"}));function mi(m){let n,f=`For the last couple of months, the Spyder team has been working on defining a new roadmap and submitting grant proposals to fund more features and improvements.
We are pleased to announce our roadmap for the rest of 2022, and that two proposals were funded!`,p,h,s="The roadmap",u,c,he=`Considering the importance of sharing a clear perspective of where the Spyder project is going and where we will be focusing our efforts over the coming months, the team has created <a href="https://github.com/spyder-ide/spyder/wiki/Roadmap" rel="nofollow" class="link">an initial roadmap for the rest of 2022</a>.
We prioritized the highlighted features and enhancements based on input from issues, face-to-face and virtual discussions, Stack Overflow, social media and other feedback, to try to best capture the interests of our users and community.`,O,b,xe="The proposals",U,k,we=`To help make our roadmap achievable, we wrote and submitted proposals to several different venues and organizations in the last couple of months.
While we have yet to hear back from some of them, two have already been funded!`,j,_,pe=`The first was for the <a href="https://developers.google.com/season-of-docs/docs" rel="nofollow" class="link">Google Season of Docs (GSoD) 2022)</a>.
This grant will be focused mainly on improving and updating our user documentation for Spyder 5’s Editor features.
It also will help enhance our developer documentation and add tutorials and detailed information covering our new plugin API.
For more details, check out the <a href="https://github.com/spyder-ide/spyder/wiki/GSoD-2022-Project-Proposal" rel="nofollow" class="link">Spyder wiki page for the proposal</a>.`,ee,P,ge=`The second proposal accepted was a <a href="https://numfocus.org/programs/small-development-grants" rel="nofollow" class="link">Small Development Grant from NumFOCUS</a>.
For this grant, we will be working on improving the installation experience for Windows users by making the standalone installers auto-updatable and providing a simpler way to install custom packages not bundled with the installers.
With this grant, we were able to hire a new developer—Juan Sebastian Bautista, a recent graduate in systems and computing engineering from Universidad de los Andes in Bogotá, Colombia—who will implement these features over the next six months.
For more details, see the <a href="https://github.com/spyder-ide/spyder/wiki/NumFOCUS-Small-Development-Grant-2022" rel="nofollow" class="link">Spyder wiki page for the proposal</a>.`,q,C,de="Next steps",E,S,He=`We will be focusing our efforts as a project on moving forward with the accepted proposals and submitting new ones.
On top of that, we will gather more feedback about what volunteers, users and the community at large want to see for Spyder 6, and share the progress of the proposals in the relaunched <a href="https://github.com/spyder-ide/community#spyder-communitycalls" rel="nofollow" class="link">Spyder Community calls</a>.`,N,M,Le="We would like to thank NumFOCUS and Google Season of Docs for granting us the funds to be able to work on these projects and making our roadmap possible!";return{c(){n=o("p"),n.textContent=f,p=i(),h=o("h2"),h.textContent=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("h2"),b.textContent=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("h2"),C.textContent=de,E=i(),S=o("p"),S.innerHTML=He,N=i(),M=o("p"),M.textContent=Le,this.h()},l(I){n=l(I,"P",{"data-svelte-h":!0}),r(n)!=="svelte-176zl42"&&(n.textContent=f),p=a(I),h=l(I,"H2",{class:!0,"data-svelte-h":!0}),r(h)!=="svelte-4fbp7v"&&(h.textContent=s),u=a(I),c=l(I,"P",{"data-svelte-h":!0}),r(c)!=="svelte-z5sir4"&&(c.innerHTML=he),O=a(I),b=l(I,"H2",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-go9hhu"&&(b.textContent=xe),U=a(I),k=l(I,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1v42iy0"&&(k.textContent=we),j=a(I),_=l(I,"P",{"data-svelte-h":!0}),r(_)!=="svelte-blo2qp"&&(_.innerHTML=pe),ee=a(I),P=l(I,"P",{"data-svelte-h":!0}),r(P)!=="svelte-3yzhgt"&&(P.innerHTML=ge),q=a(I),C=l(I,"H2",{class:!0,"data-svelte-h":!0}),r(C)!=="svelte-18hazx0"&&(C.textContent=de),E=a(I),S=l(I,"P",{"data-svelte-h":!0}),r(S)!=="svelte-ryn14r"&&(S.innerHTML=He),N=a(I),M=l(I,"P",{"data-svelte-h":!0}),r(M)!=="svelte-tw6p7q"&&(M.textContent=Le),this.h()},h(){d(h,"class","section"),d(b,"class","section"),d(C,"class","section")},m(I,x){t(I,n,x),t(I,p,x),t(I,h,x),t(I,u,x),t(I,c,x),t(I,O,x),t(I,b,x),t(I,U,x),t(I,k,x),t(I,j,x),t(I,_,x),t(I,ee,x),t(I,P,x),t(I,q,x),t(I,C,x),t(I,E,x),t(I,S,x),t(I,N,x),t(I,M,x)},p:bt,d(I){I&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M))}}}function yi(m){let n,f;const p=[m[0],In];let h={$$slots:{default:[mi]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(In)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const In={title:"New 2022 roadmap and grant funding",author:"dalthviz",category:"News",tags:"milestone, team, status-update",pub_date:"2022-07-25T00:00:00.000Z",summary:"We'd like to share our brand new roadmap for the rest of 2022, powered by the feedback of users like you. We're also excited to announce two new grants we've been awarded, which fund significant improvements to Spyder's Windows installers and user/developer documentation."};function wi(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let gi=class extends kt{constructor(n){super(),_t(this,n,wi,yi,xt,{})}};const vi=Object.freeze(Object.defineProperty({__proto__:null,default:gi,metadata:In},Symbol.toStringTag,{value:"Module"}));function bi(m){let n,f=`As we approach some major development milestones, now is as good a time as ever to share with you some perspective on where we’ve been, what’s happening now, and where we’re going in the world of Spyder.
In this post, part one of a three part series, we’ll take a look back over the past six months at some of the key events, accomplishments and challenges for Spyder and its community, and how that all leads up to where we are now.`,p,h,s=`Stay tuned right here, since part two will share several exciting announcements that affect the project (in a good way, we promise!) and its immediate future.
Even better, part three will formally announce the next Spyder 3 release and—what I’m sure you are all looking forward to—the plan for the first official Spyder 4 beta, plus our schedule and feature roadmap for Spyder 4 and beyond!`,u,c,he="A Call Answered",O,b,xe=`Starting off, as we announced back in mid-November, our funding from Anaconda, Inc was discontinued, leaving Spyder without formal institutional financial support.
As Spyder was, is and always will be a community-developed and supported IDE, this was far from a mortal blow to the project, but it did impact the pace and breadth of development.
Developer effort previously spent on our Spyder plugins, like <a href="https://github.com/spyder-ide/spyder-notebook" rel="nofollow" class="link">spyder-notebook</a>, <a href="https://github.com/spyder-ide/spyder-reports" rel="nofollow" class="link">spyder-reports</a>, and <a href="https://github.com/spyder-ide/spyder-terminal" rel="nofollow" class="link">spyder-terminal</a>, among others, was refocused on the Spyder core, and the development and release of Spyder 4 was put mostly on hold.
To help make up for the loss of funding, we appealed to the community for support, asking users who found Spyder valuable to back our project on <a href="https://opencollective.com/spyder" rel="nofollow" class="link">OpenCollective</a>, in order to accelerate development and fund more features for Spyder 4.`,U,k,we,j,_,pe=`To our unending gratitude, you responded! In the few months since then, we’ve gone from zero to a budget of well over $4500 per year and rising at an increasing pace, thanks to the continuing contributions of over 80 (and counting!) individual and institutional backers.
We also had several new core team members and community contributors pitch in to help carry the load, and we’ve got some more great news in the very next post on the funding front.
While we’ve got a ways to go to match the level of funding we’ve received under Anaconda, your support has helped make possible several of the new features we’ve planned for Spyder 4, and allow us to commit to releasing it much sooner than we would be able to otherwise.
Your generous donations go directly toward funding the Spyder community’s most-requested new and improved features for Spyder 4, so keep them coming!
Stay tuned; we are considering rolling out new donation tiers and rewards at some point soon so you won’t want to miss that.`,ee,P,ge="Development by the Numbers",q,C,de=`On the development side of the project, while our overall pace is modestly lower than its peak under our Anaconda funding, we’ve been quite active fixing bugs and adding new features and enhancements over the past six months.
By the numbers, since mid-November, we’ve pushed approximately 1200 commits to <code>master</code> (Spyder 4), comprising over 37 000 lines added and 16 000 removed, and 900 commits to <code>3.x</code> (Spyder 3), with over 16 500 additions and 10 000 deletions.
Users have opened over 1375 issues (bugs, feature requests and other feedback), of which we’ve managed to resolve more than 1330, or nearly 97%.`,E,S,He,N,M,Le=`Further, over 250 pull requests from almost two dozen unique contributors, some old, some new, have been submitted since that time—fixing bugs, adding new or enhanced functionality, or making other improvements—of which 226 have been merged to the main Spyder codebase.
This work has coalesced into four separate official releases during that period, with another only days away.
Finally, we’ve recently blown past the 3000 Github stars milestone a few weeks ago (we’re now at more than 3200), with almost 700 unique forks to date.`,I,x,Te="Key Spyder Improvements",ye,A,Ee=`All those numbers are nice, but what matters most are the tangible improvements that you all get to use every day in your favorite IDE.
Over those same past six months, alongside hundreds of bugfixes and minor enhancements, we’ve made multiple significant improvements to the Spyder 3 Editor, IPython Console, Variable Explorer, and Find in Files tool, along with a number of others under the hood and to the application as a whole.
Even better, the majority of these were suggested by you, our users, and some of you even pitched in to help implement them.`,ue,Z,We=`Especially since you will probably be spending most of your time in it, we added a several new commands and functions to the <strong>Editor</strong> that will hopefully make your life easier, each with corresponding customizable shortcuts for easier access.
You can now insert a new line below the current one regardless of the cursor’s current position with <code>Ctrl-Shift-Enter</code>, and you can now use <code>Shift-Delete</code> to cut selected text, and <code>Shift-Insert</code> to paste it.
<code>Ctrl-PageUp</code>, <code>Ctrl-PageDown</code>, and <code>Ctrl-Tab</code> shortcuts are all now fully configurable.
Finally, you can now easily <code>Tab</code> from the <code>Find</code> to the <code>Replace</code> box when open, and better yet your <code>Find</code> text is automatically copied to the <code>Replace</code> box to make modifications easier.`,te,F,Re=`Second only to the Editor in terms of them most critical Spyder components, the <strong>IPython Console</strong> also got a lot of love in recent releases.
We’ve made several improvements to significantly improve the startup time, and added an optional feature to show the elapsed time each kernel has been running.
You can now remove all user-defined variables with a GUI command, and changes in <code>import</code>ed modules now take effect instantly and automatically in the console, without even a re-<code>import</code> needed.
<code>Cloudpickle</code> is now used to serialize objects from the Console to the Variable Explorer, greatly improving the latter’s capabilities (as discussed below).
Finally, Cython files are now automatically run in dedicated Cython consoles, and you can now use the edit magic command from the Console to open any file right inside Spyder’s Editor.`,Y,G,Be,ke,re,Ve=`The <strong>Variable Explorer</strong>, which many of you cite as Spyder’s “killer feature”, has greatly improved as well.
Most notably, thanks to the aforementioned <code>cloudpickle</code> change, you now have access to rich, deep exploration of nearly any object, builtin or custom, and can traverse, view, and when possible even edit complex hierarchies of nested types with ease.
The Variable Explorer now fully supports <code>Timedelta</code> objects, both built-in and <code>Pandas</code> variants, allowing you to easily view and edit them just like <code>datetime</code> and <code>Timestamp</code>.
It also now uses a “pretty”, more human-readable format for dates, times, timedeltas and the like, and also now supports displaying a much wider range of <code>Numpy</code> array types.
As a quality of life change, it has much better handling of immutable types, like <code>tuples</code>, clearly showing they can’t be edited upfront and avoiding bothersome errors when trying to do so.`,_e,ie,Qe=`Rounding out the major changes, the <strong>Find in Files</strong> tool now allows you to remove items from the <code>Search In</code> list by hovering over them and pressing <code>Delete</code>, and there’s also a new option to clear all recent directories.
Under the hood, we’ve made <code>PyQt5</code> a dependency for easier, one-command installation and added many more tests and better project infrastructure to help catch errors.
To make things easier on you if something does go wrong, we’ve greatly improved the error reporting system, the UI/UX and the explanatory text to be more up to date, informative, and user friendly.`,Ce,ae,Je,T,H,Ye=`All of the mentioned additions are included in the latest released version of Spyder, 3.2.8, which you can update to with <code>conda update spyder</code> (if using Anaconda), with your package manager/distribution (if installed that way) or with <code>pip update spyder</code> (otherwise).
Even more are already implemented for our next release, due out in a week’s time, and we’ll have a preview of what to expect right here on the blog even sooner.`,X,Q,tt="Affiliated Project Progress",ne,oe,nt=`Outside the core Spyder IDE, while most plugins have been paused until the Spyder 4 release, work on other affiliated projects has continued. The new <a href="https://github.com/spyder-ide/spyder-unittest" rel="nofollow" class="link">spyder-unittest</a> plugin has seen particularly active development, and lead developer and Spyder team member <a href="http://www1.maths.leeds.ac.uk/~jitse/" rel="nofollow" class="link">Jitse Niesen</a> recently published a <a href="https://www.spyder-ide.org/blog/introducing-unittest-plugin/" rel="nofollow" class="link">tutorial on its use</a>.
Since November, it has gotten improved <code>pytest</code> support with realtime test results and click-to-open, better UI/UX, a robust communications backend (ZeroMQ), and numerous bug fixes and minor improvements.
<a href="https://github.com/spyder-ide/qtpy" rel="nofollow" class="link">QtPy</a>, another affiliated project which Spyder uses as its Qt GUI abstraction layer, has had three releases including one major, with new Qt classes, early support for <code>PySide2</code>, better performance, and a number of bugfixes.`,Ge,me,ot,qe,fe,lt=`Other projects under the Spyder umbrella are also making major progress. The <a href="https://github.com/spyder-ide/pywinpty" rel="nofollow" class="link">pywinpty</a> pseudo-terminal library has seen six official releases (three major), with a new rich high level interface to create and track processes, new process wrappers, Python 2.7 support, major performance, stability and security improvements, and many bug fixes.
Most importantly, we are proud to report that since this January Jupyter Notebook (in 5.3.0) and JupyterLab have both adopted it to create and manage system terminals on Windows!
The <a href="https://github.com/spyder-ide/qtsass" rel="nofollow" class="link">qtsass</a> SASS to Qt stylesheet compiler has a new maintainer, with development including new dev infrastructure, refactoring work, a PyPI release, and new features, with more on the way.
Finally, our <a href="https://github.com/spyder-ide/loghub" rel="nofollow" class="link">loghub</a> automatic changelog generator has seen significant internal and external developer interest, as well as three releases, bug fixes, additional examples, and the ability to group issues and PRs together if desired.
The common thread between all five of these projects has been a substantially increased development pace in recent weeks, so expect to see even more good news soon if that trend continues.`,J,le,it="Beyond the Code",Oe,ve,at=`The team has made progress on a number of fronts outside core program development.
We’ve been joined by several new team members from around the world, who have each contributed new skillsets to the project.
Further, we’ve created, developed and deployed a brand new, modern and responsive website and blog, to provide an accessible, central source for Spyder news and information for both newcomers and old hands alike, as you might have noticed :)`,Ue,be,st=`Our new, comprehensive <a href="https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ" rel="nofollow" class="link">Troubleshooting Guide and FAQ</a> will help users easily resolve common issues without having to wait for a response from us, and we’ve revised and improved our Github issue tracking workflow to do an even better job at quickly responding to users’ needs.
On top of that, our Readme, contributing guide, install docs, and developer wiki have all been thoroughly overhauled to make them more up to date, informative and accessible.
Finally, we’ve deepened our relationship with <a href="https://www.numfocus.org/" rel="nofollow" class="link">NumFOCUS</a>, integrating us more closely with the broader PyData community, as well as leading to some exciting news…but that will have to wait for our next post!`,W,se,rt="Until then, thanks for all you do for us and the community, and happy Spydering!";return{c(){n=o("p"),n.textContent=f,p=i(),h=o("p"),h.textContent=s,u=i(),c=o("h2"),c.textContent=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("img"),j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("h2"),P.textContent=ge,q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("img"),N=i(),M=o("p"),M.textContent=Le,I=i(),x=o("h2"),x.textContent=Te,ye=i(),A=o("p"),A.textContent=Ee,ue=i(),Z=o("p"),Z.innerHTML=We,te=i(),F=o("p"),F.innerHTML=Re,Y=i(),G=o("img"),ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("img"),T=i(),H=o("p"),H.innerHTML=Ye,X=i(),Q=o("h2"),Q.textContent=tt,ne=i(),oe=o("p"),oe.innerHTML=nt,Ge=i(),me=o("img"),qe=i(),fe=o("p"),fe.innerHTML=lt,J=i(),le=o("h2"),le.textContent=it,Oe=i(),ve=o("p"),ve.textContent=at,Ue=i(),be=o("p"),be.innerHTML=st,W=i(),se=o("p"),se.textContent=rt,this.h()},l(v){n=l(v,"P",{"data-svelte-h":!0}),r(n)!=="svelte-pz772z"&&(n.textContent=f),p=a(v),h=l(v,"P",{"data-svelte-h":!0}),r(h)!=="svelte-181muck"&&(h.textContent=s),u=a(v),c=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(c)!=="svelte-1725v2a"&&(c.textContent=he),O=a(v),b=l(v,"P",{"data-svelte-h":!0}),r(b)!=="svelte-c9xudx"&&(b.innerHTML=xe),U=a(v),k=l(v,"IMG",{src:!0,alt:!0}),j=a(v),_=l(v,"P",{"data-svelte-h":!0}),r(_)!=="svelte-47g8gm"&&(_.textContent=pe),ee=a(v),P=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-1iyzcs1"&&(P.textContent=ge),q=a(v),C=l(v,"P",{"data-svelte-h":!0}),r(C)!=="svelte-8k5uw4"&&(C.innerHTML=de),E=a(v),S=l(v,"IMG",{src:!0,alt:!0}),N=a(v),M=l(v,"P",{"data-svelte-h":!0}),r(M)!=="svelte-ryx303"&&(M.textContent=Le),I=a(v),x=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(x)!=="svelte-phh6l5"&&(x.textContent=Te),ye=a(v),A=l(v,"P",{"data-svelte-h":!0}),r(A)!=="svelte-raeu8r"&&(A.textContent=Ee),ue=a(v),Z=l(v,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1pzgygh"&&(Z.innerHTML=We),te=a(v),F=l(v,"P",{"data-svelte-h":!0}),r(F)!=="svelte-mdkheq"&&(F.innerHTML=Re),Y=a(v),G=l(v,"IMG",{src:!0,alt:!0}),ke=a(v),re=l(v,"P",{"data-svelte-h":!0}),r(re)!=="svelte-179t22p"&&(re.innerHTML=Ve),_e=a(v),ie=l(v,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-1i3k1yp"&&(ie.innerHTML=Qe),Ce=a(v),ae=l(v,"IMG",{src:!0,alt:!0}),T=a(v),H=l(v,"P",{"data-svelte-h":!0}),r(H)!=="svelte-599c63"&&(H.innerHTML=Ye),X=a(v),Q=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(Q)!=="svelte-19sfrxz"&&(Q.textContent=tt),ne=a(v),oe=l(v,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1wt5kgk"&&(oe.innerHTML=nt),Ge=a(v),me=l(v,"IMG",{src:!0,alt:!0}),qe=a(v),fe=l(v,"P",{"data-svelte-h":!0}),r(fe)!=="svelte-159zybe"&&(fe.innerHTML=lt),J=a(v),le=l(v,"H2",{class:!0,"data-svelte-h":!0}),r(le)!=="svelte-1o8ccqd"&&(le.textContent=it),Oe=a(v),ve=l(v,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-1m7652o"&&(ve.textContent=at),Ue=a(v),be=l(v,"P",{"data-svelte-h":!0}),r(be)!=="svelte-4w5n7c"&&(be.innerHTML=st),W=a(v),se=l(v,"P",{"data-svelte-h":!0}),r(se)!=="svelte-ia2mbp"&&(se.textContent=rt),this.h()},h(){d(c,"class","section"),$e(k.src,we="spyder_opencollective.png")||d(k,"src",we),d(k,"alt","Spyder OpenCollective, showing many donations and backers"),d(P,"class","section"),$e(S.src,He="github_commit_history.png")||d(S,"src",He),d(S,"alt","Github commit timeseries for Spyder, with high activity over the past few years"),d(x,"class","section"),$e(G.src,Be="varexp_array_display.png")||d(G,"src",Be),d(G,"alt","Variable Explorer, with a variety of array types displayed"),$e(ae.src,Je="error_report_dialog.png")||d(ae,"src",Je),d(ae,"alt","New Spyder error report dialog, with more helpful UI text"),d(Q,"class","section"),$e(me.src,ot="spyder_unittest.png")||d(me,"src",ot),d(me,"alt","Spyder-unittest dialog, displaying test results"),d(le,"class","section")},m(v,L){t(v,n,L),t(v,p,L),t(v,h,L),t(v,u,L),t(v,c,L),t(v,O,L),t(v,b,L),t(v,U,L),t(v,k,L),t(v,j,L),t(v,_,L),t(v,ee,L),t(v,P,L),t(v,q,L),t(v,C,L),t(v,E,L),t(v,S,L),t(v,N,L),t(v,M,L),t(v,I,L),t(v,x,L),t(v,ye,L),t(v,A,L),t(v,ue,L),t(v,Z,L),t(v,te,L),t(v,F,L),t(v,Y,L),t(v,G,L),t(v,ke,L),t(v,re,L),t(v,_e,L),t(v,ie,L),t(v,Ce,L),t(v,ae,L),t(v,T,L),t(v,H,L),t(v,X,L),t(v,Q,L),t(v,ne,L),t(v,oe,L),t(v,Ge,L),t(v,me,L),t(v,qe,L),t(v,fe,L),t(v,J,L),t(v,le,L),t(v,Oe,L),t(v,ve,L),t(v,Ue,L),t(v,be,L),t(v,W,L),t(v,se,L)},p:bt,d(v){v&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se))}}}function xi(m){let n,f;const p=[m[0],Ln];let h={$$slots:{default:[bi]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Ln)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Ln={title:"State of the Spyder, Part 1: Looking back",pub_date:"2018-05-06T00:00:00.000Z",tags:"development, status-update, milestone",category:"Status",author:"camgerlach",summary:"In the first of a three part series, we look back at the major events, project changes, milestones, and progress over the past six months since our previous funding ended. We'll also go over funding and development stats and status up to the present."};function ki(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let _i=class extends kt{constructor(n){super(),_t(this,n,ki,xi,xt,{})}};const Ci=Object.freeze(Object.defineProperty({__proto__:null,default:_i,metadata:Ln},Symbol.toStringTag,{value:"Module"}));function Si(m){let n,f=`After sharing some major milestones, development progress, and other tidbits from the past six months in <a href="https://www.spyder-ide.org/blog/spyder-status-2018-past/" rel="nofollow" class="link">Part 1</a> of this series (check that one out first if you haven’t already), we now have some amazing news to share with you all here in Part 2, along with other status updates.
That’s not all, though—Part 3 will look ahead toward Spyder 4 and beyond, unveiling and explaining our full roadmap and going over the future possibilities even further afield.`,p,h,s="Spyder Wins NumFOCUS Development Grant",u,c,he=`First up, we’re thrilled to announce a major part of what’s making that plan possible (along with your support, of course!).
This May, Spyder was awarded a $3000 development grant from <a href="https://www.numfocus.org/" rel="nofollow" class="link">NumFOCUS</a>, an organization promoting better science through open code, to help with finishing Spyder 4!
NumFOCUS is a nonprofit dedicated to supporting <a href="https://www.numfocus.org/sponsored-projects" rel="nofollow" class="link">key scientific computing projects</a>; <a href="https://www.numfocus.org/programs/sustainability" rel="nofollow" class="link">promoting sustainability</a> in the open source ecosystem; educating the next generation of scientists, engineers, developers and data analysts through their flagship <a href="https://www.numfocus.org/programs/pydata" rel="nofollow" class="link">PyData</a> program; and enabling and inspiring the next generation through their <a href="https://www.numfocus.org/programs/grants-sponsored-events" rel="nofollow" class="link">grants, scholarships</a> and <a href="https://www.numfocus.org/programs/john-hunter-technology-fellowship" rel="nofollow" class="link">fellowships</a>, <a href="https://www.numfocus.org/programs/diversity-inclusion" rel="nofollow" class="link">diversity and inclusion program</a>, and involvement in the <a href="https://www.numfocus.org/programs/google-summer-code" rel="nofollow" class="link">Google Summer of Code</a>.`,O,b,xe=`We applied for the funding back in March of this year, along with many other scientific Python projects, and were one of the fortunate projects selected after the review process.
The award runs from May through this November, and will enable multiple betas with new features to be released throughout 2018, with the first feature-complete release candidate of Spyder 4 planned by the year’s end (we’ll have more detail on all that in Part 3).
Check out our bio and the other projects that were funded over on the <a href="https://www.numfocus.org/blog/numfocus-awards-development-grants-to-open-source-projects-spring-2018" rel="nofollow" class="link">NumFOCUS announcement</a>, and make sure to thank and support them if you get the chance.`,U,k,we="Quansight Hires Spyder Maintainer; Helps Fund Development",j,_,pe=`Equally exciting, Spyder’s maintainer, <a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Cordoba</a>, was recently hired by <a href="https://www.quansight.com/" rel="nofollow" class="link">Quansight</a>, the brand-new company headed by scientific Python luminary <a href="https://twitter.com/teoliphant?lang=en" rel="nofollow" class="link">Travis Oliphant</a>!
The father of much of the modern PyData ecosystem including NumPy, SciPy and Numba, Travis has been instrumental in the dramatic growth of open-source data analysis with Python through founding or helping lead Enthought, Continuum/Anaconda, NumFOCUS, and more.
Quansight, Travis’ newest venture, focuses on scaling up the PyData ecosystem to solve even larger and more integrated problems, connecting companies with the open-source tools that can benefit their business, and helping build a more robust ecosystem for open-source scientific development.`,ee,P,ge=`As part of that mission, Carlos was hired through at least the end of 2018 to help make several open-source projects more sustainable in the long run, and I’m sure you all will be happy to hear that one of them will be our very own Spyder!
After previously helping support the project over at Anaconda, Travis and Quansight will fund Carlos to work part-time on Spyder development, helping the project continue to grow and evolve, and keeping Spyder 4 moving along at a faster pace.
Congratulations Carlos, and thanks to Travis and Quansight!`,q,C,de=`Aside from those two, we also have several other potential long-term funding opportunities in the pipeline.
Stay tuned to hear more about those in the coming months.`,E,S,He="Spyder 3.3.0 Ready to Go",N,M,Le=`Meanwhile, on the development side of things, we’ve just finished the rollout of the next update in the stable Spyder 3 line, 3.3.0, and will have a full post shortly going over the changes and enhancements in detail.
In brief, it has some significant under the hood revisions, cleaning house of some old end of life dependencies and legacy support (Python 3.3 and PyQt4 below 5.5), and separates the IPython Console kernel code into a new <code>spyder-kernels</code> package to make it easier for you to work with different Python environments and remote sessions, and easier for us to add exciting new features down the road.
Additionally, it adds new preferences options for console plotting and autocompletion, improves the usability and performance of Variable Explorer object viewers, includes a new, fully automated error reporting feature to make submitting reports faster, easier and more helpful, and contains a number of other minor improvements and usability enhancements, along with numerous bug fixes.`,I,x,Te,ye,A,Ee="Spyder 4 Public Beta 1 on Deck",ue,Z,We=`We’ll also be releasing the first public beta of Spyder 4 in the very near future, to allow users and developers to get their hands on the next generation of the IDE and start using and testing it as soon as possible.
There are far too many significant new features to list here, and they are more than worthy of their own full-length post, as there are many substantial changes to the Editor, Console, Variable Explorer, File Explorer, Outline Explorer, API and more.`,te,F,Re,Y,G,Be=`Some of the major highlights in the Editor include code folding, indentation guides, multiple line length indicators, a live class/method/function panel (<em>a la</em> Visual Studio), many more shortcut commands, better comment/uncomment, and more.
The IPython Console gains the ability to start specialized Pylab, SymPy, and Cython consoles, and the Variable Explorer gets MultiIndex support, now natively handles all Pandas indexers, and can display sets in a dedicated GUI editor.
Meanwhile, the File Explorer now has multi-select functionality and can open any file with the user’s OS-configured external default program, while the outline explorer can now group items by cell, and in multiple levels.
Finally, Spyder 4 exposes a public API for external plugins, offers more language translations, features several global UI improvements and has numerous under the hood and refactoring changes, and countless other enhancements big and small.
It’s the future of Spyder, so if you’d like to get a taste of the cutting edge,  we’d love for you to try it when it drops and let us know what you think!`,ke,re,Ve="Spyder Documentation, Reborn",_e,ie,Qe=`Aside from Spyder 3 and 4, we’ve got another big ticket item for you all in the next few days: our brand new docs!
We’ve been working on a major overhaul of our documentation, which will saw its first official release with Spyder 3.3.0.
Our <a href="https://pythonhosted.org/spyder/" rel="nofollow" class="link">old docs</a> were hosted on PyPI/PythonHosted and, with the freezing of that service, couldn’t be updated.
Therefore, we’ve now moved to maintain them in a <a href="https://github.com/spyder-ide/spyder-docs" rel="nofollow" class="link">new dedicated repo</a>, build, deploy and host them ourselves with <a href="https://www.sphinx-doc.org/en/master/" rel="nofollow" class="link">Sphinx</a>, <a href="https://drdoctr.github.io/doctr/" rel="nofollow" class="link">doctr</a> and <a href="https://pages.github.com/" rel="nofollow" class="link">Github Pages</a> on a subdomain of our new site making them more convenient, responsive and accessible.`,Ce,ae,Je,T,H,Ye=`Furthermore, we’ve taken the opportunity to perform a comprehensive overhaul from top to bottom, dramatically improving their usefulness to users.
We’ve greatly expanded many pages and sections and adding new ones, updated outdated references, performed an exhaustive copyedit over nearly every line of the text, developed and implemented a consistent style guide, transitioned to a modern theme with our own custom CSS extensions, added or replaced many  dozens of high-resolution screenshots, modified the source code and infrastructure to be easier to develop, build and maintain, and much more.
Even better, you can expect even more improvements in the coming months, as we further expand them toward the standard you’d expect for a feature-rich, multifaceted application like Spyder.
If you find an issue with them, see a section that could use expansion or improvement or even just have general actionable feedback feel free to open an <a href="https://github.com/spyder-ide/spyder-docs/issues" rel="nofollow" class="link">issue</a> or send us a <a href="https://github.com/spyder-ide/spyder-docs/pulls" rel="nofollow" class="link">pull request</a> on our <a href="https://github.com/spyder-ide/spyder-docs" rel="nofollow" class="link">new repo</a>.
We’ll have more information about what’s new and our future plans when we officially release them shortly.`,X,Q,tt="More News and Notes",ne,oe,nt="Finally, we want to make sure you all can stay better informed of Spyder-related happenings going forward, as well as get the chance to interact directly with the Spyder team.",Ge,me,ot=`We’re planning on much more frequent announcements, status reports, news, and tutorials right here on our blog, as well as more timely updates on our social media, including our <a href="https://www.facebook.com/SpyderIDE/notifications/" rel="nofollow" class="link">Facebook page</a> and <a href="https://twitter.com/Spyder_IDE" rel="nofollow" class="link">Twitter account</a>.
Make sure to subscribe/follow if you’d like to stay up to date or want to get in touch; we only post important happenings, so we won’t inundate your feeds with trivialities.
You can also reach us on our <a href="https://groups.google.com/forum/#!forum/spyderlib" rel="nofollow" class="link">Google Groups discussion board</a>, our <a href="https://gitter.im/spyder-ide/public" rel="nofollow" class="link">Gitter live chat</a>, or post a comment right here below this post.`,qe,fe,lt=`Thanks again for all you do to make Spyder possible, and keep a look out for the next post in this series on the future of Spyder, along with our three major releases (3.3.0, 4.0b1, and the new docs) over the next few weeks.
Happy Spydering!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("h2"),h.textContent=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("h2"),k.textContent=we,j=i(),_=o("p"),_.innerHTML=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("h2"),S.textContent=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("img"),ye=i(),A=o("h2"),A.textContent=Ee,ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("img"),Y=i(),G=o("p"),G.innerHTML=Be,ke=i(),re=o("h2"),re.textContent=Ve,_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("img"),T=i(),H=o("p"),H.innerHTML=Ye,X=i(),Q=o("h2"),Q.textContent=tt,ne=i(),oe=o("p"),oe.textContent=nt,Ge=i(),me=o("p"),me.innerHTML=ot,qe=i(),fe=o("p"),fe.textContent=lt,this.h()},l(J){n=l(J,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1hxqb5i"&&(n.innerHTML=f),p=a(J),h=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(h)!=="svelte-19bcwx5"&&(h.textContent=s),u=a(J),c=l(J,"P",{"data-svelte-h":!0}),r(c)!=="svelte-1vujq9i"&&(c.innerHTML=he),O=a(J),b=l(J,"P",{"data-svelte-h":!0}),r(b)!=="svelte-12ox8lz"&&(b.innerHTML=xe),U=a(J),k=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-1nbjcvl"&&(k.textContent=we),j=a(J),_=l(J,"P",{"data-svelte-h":!0}),r(_)!=="svelte-100rehe"&&(_.innerHTML=pe),ee=a(J),P=l(J,"P",{"data-svelte-h":!0}),r(P)!=="svelte-gxtm8m"&&(P.textContent=ge),q=a(J),C=l(J,"P",{"data-svelte-h":!0}),r(C)!=="svelte-12rmlke"&&(C.textContent=de),E=a(J),S=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(S)!=="svelte-1r0pzr9"&&(S.textContent=He),N=a(J),M=l(J,"P",{"data-svelte-h":!0}),r(M)!=="svelte-aswwh3"&&(M.innerHTML=Le),I=a(J),x=l(J,"IMG",{src:!0,alt:!0}),ye=a(J),A=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(A)!=="svelte-1n46y8r"&&(A.textContent=Ee),ue=a(J),Z=l(J,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1vjcv3q"&&(Z.textContent=We),te=a(J),F=l(J,"IMG",{src:!0,alt:!0}),Y=a(J),G=l(J,"P",{"data-svelte-h":!0}),r(G)!=="svelte-14d4ii3"&&(G.innerHTML=Be),ke=a(J),re=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(re)!=="svelte-14w6993"&&(re.textContent=Ve),_e=a(J),ie=l(J,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-n233qz"&&(ie.innerHTML=Qe),Ce=a(J),ae=l(J,"IMG",{src:!0,alt:!0}),T=a(J),H=l(J,"P",{"data-svelte-h":!0}),r(H)!=="svelte-15wekgt"&&(H.innerHTML=Ye),X=a(J),Q=l(J,"H2",{class:!0,"data-svelte-h":!0}),r(Q)!=="svelte-1bc20bm"&&(Q.textContent=tt),ne=a(J),oe=l(J,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-1xq67kh"&&(oe.textContent=nt),Ge=a(J),me=l(J,"P",{"data-svelte-h":!0}),r(me)!=="svelte-1o5j99t"&&(me.innerHTML=ot),qe=a(J),fe=l(J,"P",{"data-svelte-h":!0}),r(fe)!=="svelte-1mo5pro"&&(fe.textContent=lt),this.h()},h(){d(h,"class","section"),d(k,"class","section"),d(S,"class","section"),$e(x.src,Te="spyder-remote-kernel.png")||d(x,"src",Te),d(x,"alt","A remote kernel running in a system console alongside Spyder's connect to kernel dialog"),d(A,"class","section"),$e(F.src,Re="spyder-4b1-preview-editor.png")||d(F,"src",Re),d(F,"alt","Preview of the new Spyder 4 Editor, showing several of the mentioned features"),d(re,"class","section"),$e(ae.src,Je="spyder-docs-preview.png")||d(ae,"src",Je),d(ae,"alt","Preview of new Spyder documentation website, displaying a modern theme/layout and better screenshots"),d(Q,"class","section")},m(J,le){t(J,n,le),t(J,p,le),t(J,h,le),t(J,u,le),t(J,c,le),t(J,O,le),t(J,b,le),t(J,U,le),t(J,k,le),t(J,j,le),t(J,_,le),t(J,ee,le),t(J,P,le),t(J,q,le),t(J,C,le),t(J,E,le),t(J,S,le),t(J,N,le),t(J,M,le),t(J,I,le),t(J,x,le),t(J,ye,le),t(J,A,le),t(J,ue,le),t(J,Z,le),t(J,te,le),t(J,F,le),t(J,Y,le),t(J,G,le),t(J,ke,le),t(J,re,le),t(J,_e,le),t(J,ie,le),t(J,Ce,le),t(J,ae,le),t(J,T,le),t(J,H,le),t(J,X,le),t(J,Q,le),t(J,ne,le),t(J,oe,le),t(J,Ge,le),t(J,me,le),t(J,qe,le),t(J,fe,le)},p:bt,d(J){J&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe))}}}function Ti(m){let n,f;const p=[m[0],jn];let h={$$slots:{default:[Si]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(jn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const jn={title:"State of the Spyder, Part 2: Looking up",pub_date:"2018-07-23T00:00:00.000Z",tags:"development, status-update, team, award",category:"Status",author:"camgerlach",summary:"In the second of a three part series, we've got some exciting announcements to make about Spyder and its continued development, and we'll review the project's current status and some major upcoming releases."};function Pi(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Mi=class extends kt{constructor(n){super(),_t(this,n,Pi,Ti,xt,{})}};const Hi=Object.freeze(Object.defineProperty({__proto__:null,default:Mi,metadata:jn},Symbol.toStringTag,{value:"Module"}));function Ii(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2020/02/creating-the-ultimate-terminal-experience-in-Spyder-4-with-Spyder-Terminal/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s='The <a href="https://github.com/spyder-ide/spyder-terminal" rel="nofollow" class="link">Spyder-Terminal</a> project is revitalized! The new 0.3.0 version adds numerous features that improve the user experience, and enhances compatibility with the latest Spyder 4 release, in part thanks to the improvements made in the <a href="https://github.com/xtermjs/xterm.js" rel="nofollow" class="link">xterm.js</a> project.',u,c,he,O,b,xe="Upgrade to ES6/JSX syntax",U,k,we="First, we were able to update all the old JavaScript files to use ES6/JSX syntax and the tests for the client terminal. This change simplified the code base and maintenance and allows us to easily extend the project to new functionalities that the xterm.js API offers. In order to compile this code and run it inside Spyder, we migrated our deployment to Webpack.",j,_,pe="Multiple shells per operating system",ee,P,ge="In the new release, you now have the ability to configure which shell to use in the terminal. On Linux and UNIX systems, <code>bash</code>, <code>sh</code>, <code>ksh</code>, <code>zsh</code>, <code>csh</code>, <code>pwsh</code>, <code>tcsh</code>, <code>screen</code>, <code>tmux</code>, <code>dash</code> and <code>rbash</code> are supported, while <code>cmd</code> and <code>powershell</code> are the available options on Windows. To select your preferred command processor, simply choose it from the menu in the <code>Terminal</code> pane of Spyder’s preferences and restart the IDE.",q,C,de,E,S,He="This is a great feature because it allows the user to determine their shell interpreter among the ones that are installed in their systems. In this way, Spyder-Terminal can be configured with any of the existing shells as long as it is available on their machine.",N,M,Le="Theme support and new UI options",I,x,Te="Another big change in the new version is built-in support for all Spyder’s light and dark themes. When you change your Spyder theme or display options, the Terminal automatically adapt its UI, colors and fonts accordingly.",ye,A,Ee,ue,Z,We="Building on the look and feel of the plugin, we also added configurable options for the terminal sounds and the cursor style. In this way, you can choose whether the terminal uses a bell sound and can select from one of three cursors.",te,F,Re,Y,G,Be="Shortcut configuration",ke,re,Ve="Lastly, the shortcuts on the terminal are configurable within the keyboard shortcuts in Spyder 4. The terminal’s shortcuts for <code>Copy</code>, <code>Paste</code>, <code>Clean</code> and <code>New terminal</code> are now no longer hardcoded.",_e,ie,Qe,Ce,ae,Je='We’re excited for you to try out Spyder-Terminal 0.3.0 and experiment with the new features available; we’d like to thank <a href="https://numfocus.org/" rel="nofollow" class="link">NumFOCUS</a> and Quansight for providing the funding and support that made all this work possible. Check back soon for more Spyder updates, and until then, happy coding!';return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("img"),O=i(),b=o("h2"),b.textContent=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("h2"),_.textContent=pe,ee=i(),P=o("p"),P.innerHTML=ge,q=i(),C=o("img"),E=i(),S=o("p"),S.textContent=He,N=i(),M=o("h2"),M.textContent=Le,I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("img"),ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("img"),Y=i(),G=o("h2"),G.textContent=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("img"),Ce=i(),ae=o("p"),ae.innerHTML=Je,this.h()},l(T){n=l(T,"P",{"data-svelte-h":!0}),r(n)!=="svelte-aa2x2f"&&(n.innerHTML=f),p=a(T),h=l(T,"P",{"data-svelte-h":!0}),r(h)!=="svelte-cihbgh"&&(h.innerHTML=s),u=a(T),c=l(T,"IMG",{src:!0,alt:!0}),O=a(T),b=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-1hn7hbe"&&(b.textContent=xe),U=a(T),k=l(T,"P",{"data-svelte-h":!0}),r(k)!=="svelte-7hqbeh"&&(k.textContent=we),j=a(T),_=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(_)!=="svelte-1npuvda"&&(_.textContent=pe),ee=a(T),P=l(T,"P",{"data-svelte-h":!0}),r(P)!=="svelte-qibysk"&&(P.innerHTML=ge),q=a(T),C=l(T,"IMG",{src:!0,alt:!0}),E=a(T),S=l(T,"P",{"data-svelte-h":!0}),r(S)!=="svelte-np7xai"&&(S.textContent=He),N=a(T),M=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-go4upt"&&(M.textContent=Le),I=a(T),x=l(T,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1skopxh"&&(x.textContent=Te),ye=a(T),A=l(T,"IMG",{src:!0,alt:!0}),ue=a(T),Z=l(T,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1togysm"&&(Z.textContent=We),te=a(T),F=l(T,"IMG",{src:!0,alt:!0}),Y=a(T),G=l(T,"H2",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-h3anlu"&&(G.textContent=Be),ke=a(T),re=l(T,"P",{"data-svelte-h":!0}),r(re)!=="svelte-syy71z"&&(re.innerHTML=Ve),_e=a(T),ie=l(T,"IMG",{src:!0,alt:!0}),Ce=a(T),ae=l(T,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-1vjlw91"&&(ae.innerHTML=Je),this.h()},h(){$e(c.src,he="terminal.png")||d(c,"src",he),d(c,"alt","Screenshot of the new spyder-terminal"),d(b,"class","section"),d(_,"class","section"),$e(C.src,de="shells.png")||d(C,"src",de),d(C,"alt","UNIX shell options for starting the terminal"),d(M,"class","section"),$e(A.src,Ee="terminal-colors.gif")||d(A,"src",Ee),d(A,"alt","Spyder-Terminal new themes"),$e(F.src,Re="cursor-style.png")||d(F,"src",Re),d(F,"alt","Cursor options for Spyder-Terminal"),d(G,"class","section"),$e(ie.src,Qe="shortcuts.png")||d(ie,"src",Qe),d(ie,"alt","Configurable shortcuts for the Terminal inside Spyder 4")},m(T,H){t(T,n,H),t(T,p,H),t(T,h,H),t(T,u,H),t(T,c,H),t(T,O,H),t(T,b,H),t(T,U,H),t(T,k,H),t(T,j,H),t(T,_,H),t(T,ee,H),t(T,P,H),t(T,q,H),t(T,C,H),t(T,E,H),t(T,S,H),t(T,N,H),t(T,M,H),t(T,I,H),t(T,x,H),t(T,ye,H),t(T,A,H),t(T,ue,H),t(T,Z,H),t(T,te,H),t(T,F,H),t(T,Y,H),t(T,G,H),t(T,ke,H),t(T,re,H),t(T,_e,H),t(T,ie,H),t(T,Ce,H),t(T,ae,H)},p:bt,d(T){T&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae))}}}function Li(m){let n,f;const p=[m[0],$n];let h={$$slots:{default:[Ii]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze($n)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const $n={title:"Creating the ultimate terminal experience in Spyder 4 with Spyder-Terminal",author:"steff456",category:"News",tags:"milestone, team, status-update",pub_date:"2020-04-22T00:00:00.000Z",summary:"The Spyder-Terminal project is revitalized! The new 0.3.0 version adds numerous features that improve the user experience, and enhances compatibility with the latest Spyder 4 release, in part thanks to the improvements made in the xterm.js project."};function ji(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let $i=class extends kt{constructor(n){super(),_t(this,n,ji,Li,xt,{})}};const Ei=Object.freeze(Object.defineProperty({__proto__:null,default:$i,metadata:$n},Symbol.toStringTag,{value:"Module"}));function Ai(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2019/11/variable-explorer-improvements-in-Spyder-4/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s='<a href="https://www.spyder-ide.org/" rel="nofollow" class="link">Spyder</a> 4 will be released very soon with lots of interesting new features that you’ll want to check out, reflecting years of effort by the team to improve the user experience. In this post, we will be talking about the improvements made to the Variable Explorer.',u,c,he="These include the brand new Object Explorer for inspecting arbitrary Python variables, full support for MultiIndex dataframes with multiple dimensions, and the ability to filter and search for variables by name and type, and much more.",O,b,xe='It is important to mention that several of the above improvements were made possible through integrating the work of two other projects. Code from <a href="https://github.com/TabViewer/gtabview" rel="nofollow" class="link">gtabview</a> was used to implement the multi-dimensional Pandas indexes, while <a href="https://github.com/titusjan/objbrowser" rel="nofollow" class="link">objbrowser</a> was the foundation of the new Object Explorer.',U,k,we="New viewer for arbitrary Python objects",j,_,pe="For Spyder 4 we added a long-requested feature: full support for inspecting any kind of Python object through the Variable Explorer. For many years, Spyder has been able to view and edit a small subset of Python variables: NumPy arrays, Pandas DataFrames and Series, and builtin collections (lists, dictionaries and tuples). Other objects were displayed as dictionaries of their attributes, inspecting any of which required showing a new table. This made it rather cumbersome to use this functionality, and was the reason arbitrary Python objects were hidden by default from the Variable Explorer view.",ee,P,ge,q,C,de='For the forthcoming Spyder release, we’ve integrated the excellent <a href="https://github.com/titusjan/objbrowser" rel="nofollow" class="link">objbrowser</a> project by Pepijn Kenter (<a href="https://github.com/titusjan" rel="nofollow" class="link">@titusjan</a>), which provides a tree-like view of Python objects, to offer a much simpler and more user-friendly way to inspect them.',E,S,He,N,M,Le=`As can be seen above, this viewer will also allow users to browse extra metadata about the inspected object, such as its documentation, source code and the file that holds it.
It is very important to note that this work was accomplished thanks to the generosity of Pepijn, who kindly changed the license of <a href="https://github.com/titusjan/objbrowser" rel="nofollow" class="link">objbrowser</a> to allow us to integrate it with Spyder.
To expose this new functionality, we decided to set the option to hide arbitrary Python objects in the Variable Explorer to disabled by default, and introduced a new one called <code>Exclude callables and modules</code>. With this enabled by default, Spyder will now display a much larger fraction of objects that can be inspected, while still excluding most “uninteresting” variables.`,I,x,Te,ye,A,Ee="Finally, we added a context-menu action to open any object using the new Object Explorer even if they already have a builtin viewer (DataFrames, arrays, etc), allowing for deeper inspection of the inner workings of these datatypes.",ue,Z,We,te,F,Re="Multi-index support in the dataframe viewer",Y,G,Be="One of the first features we added to the Variable Explorer in Spyder 4 was MultiIndex support in its DataFrame inspector, including for multi-level and multi-dimensional indices. Spyder 3 had basic support for such, but it was very rudimentary, making inspecting such DataFrames a less than user-friendly experience.",ke,re,Ve,_e,ie,Qe='For Spyder 4, we took advantage of the work done by Scott Hansen (<a href="https://github.com/firecat53" rel="nofollow" class="link">@firecat53</a>) and Yuri D’Elia (<a href="https://github.com/wavexx" rel="nofollow" class="link">@wavexx</a>) in their <a href="https://github.com/TabViewer/gtabview" rel="nofollow" class="link">gtabview</a> project, particularly its improved management of column and table headings, which allows the new version of Spyder to display the index shown above in a much nicer way.',Ce,ae,Je,T,H,Ye="Fuzzy filtering of variables",X,Q,tt=`Spyder 4 also includes the ability to filter the variables shown down to only those of interest. This employs fuzzy matching between the text entered in the search field and the name and type of all available variables.
To access this functionality, click the search icon in the Variable Explorer toolbar, or press <code>Ctrl+F</code> (<code>Cmd-F</code> on macOS) when the Variable Explorer has focus.`,ne,oe,nt,Ge,me,ot="To remove the current filter, simply click the search icon again, or press <code>Esc</code> or <code>Ctrl+F</code> (<code>Cmd-F</code>) while the Variable Explorer is focused.",qe,fe,lt="Refresh while code is running",J,le,it='We added back the ability to refresh the Variable Explorer while code is running in the console. This feature was dropped in Spyder 3.2, when we removed the old and unmaintained Python console. However, this functionality will return in Spyder 4, thanks to the fantastic work done by Quentin Peter (<a href="https://github.com/impact27" rel="nofollow" class="link">@impact27</a>) to completely re-architect the way Spyder talks to the Jupyter kernels that run the code in our IPython console, integrating support for <a href="https://jupyter-client.readthedocs.io/en/stable/messaging.html#custom-messages" rel="nofollow" class="link">Jupyter Comms</a>.',Oe,ve,at,Ue,be,st="To trigger a refresh, simply click the reload button on the Variable Explorer toolbar, or press the shortcut <code>Ctrl+R</code> (<code>Cmd-R</code>) when it has focus.",W,se,rt="Full support for sets",v,L,pt="In Spyder 3, the Variable Explorer could only show builtin Python sets as arbitrary objects, making it very difficult for users to browse and interact with them. In Spyder 4, you can now view sets just like lists, as well as perform various operations on them.",Xe,De,ht,et,Fe,ut="UI enhancements and more",g,z,ct="Finally, beyond the headline features, we’ve added numerous smaller improvements to make the Variable Explorer easier and more efficient to use. These include support for custom index names, better and more efficient automatic resizing of column widths, support for displaying Pandas Indices, tooltips for truncated column headers, and more.",dt,Ne,ft='Spyder’s Variable Explorer is what many of you consider to be one of its standout features, so we can’t wait for you all to get your hands on the even better version in Spyder 4. Thanks again to Quansight, our generous community donors, and as always all of you! Spyder 4.0.0 final is planned to be released within approximately one more week, but if you’d like to test it out immediately, follow the instructions on our <a href="https://github.com/spyder-ide/spyder/releases" rel="nofollow" class="link">GitHub</a> to install the pre-release version (which won’t touch your existing Spyder install or settings). As always, happy Spydering!';return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("p"),b.innerHTML=xe,U=i(),k=o("h2"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("img"),q=i(),C=o("p"),C.innerHTML=de,E=i(),S=o("img"),N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("img"),ye=i(),A=o("p"),A.textContent=Ee,ue=i(),Z=o("img"),te=i(),F=o("h2"),F.textContent=Re,Y=i(),G=o("p"),G.textContent=Be,ke=i(),re=o("img"),_e=i(),ie=o("p"),ie.innerHTML=Qe,Ce=i(),ae=o("img"),T=i(),H=o("h2"),H.textContent=Ye,X=i(),Q=o("p"),Q.innerHTML=tt,ne=i(),oe=o("img"),Ge=i(),me=o("p"),me.innerHTML=ot,qe=i(),fe=o("h2"),fe.textContent=lt,J=i(),le=o("p"),le.innerHTML=it,Oe=i(),ve=o("img"),Ue=i(),be=o("p"),be.innerHTML=st,W=i(),se=o("h2"),se.textContent=rt,v=i(),L=o("p"),L.textContent=pt,Xe=i(),De=o("img"),et=i(),Fe=o("h2"),Fe.textContent=ut,g=i(),z=o("p"),z.textContent=ct,dt=i(),Ne=o("p"),Ne.innerHTML=ft,this.h()},l(R){n=l(R,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1pjt8pm"&&(n.innerHTML=f),p=a(R),h=l(R,"P",{"data-svelte-h":!0}),r(h)!=="svelte-zhmrie"&&(h.innerHTML=s),u=a(R),c=l(R,"P",{"data-svelte-h":!0}),r(c)!=="svelte-lb2uj8"&&(c.textContent=he),O=a(R),b=l(R,"P",{"data-svelte-h":!0}),r(b)!=="svelte-5six4x"&&(b.innerHTML=xe),U=a(R),k=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-ol1fod"&&(k.textContent=we),j=a(R),_=l(R,"P",{"data-svelte-h":!0}),r(_)!=="svelte-1bmrtq0"&&(_.textContent=pe),ee=a(R),P=l(R,"IMG",{src:!0,alt:!0}),q=a(R),C=l(R,"P",{"data-svelte-h":!0}),r(C)!=="svelte-yih7m7"&&(C.innerHTML=de),E=a(R),S=l(R,"IMG",{src:!0,alt:!0}),N=a(R),M=l(R,"P",{"data-svelte-h":!0}),r(M)!=="svelte-fqkl9c"&&(M.innerHTML=Le),I=a(R),x=l(R,"IMG",{src:!0,alt:!0}),ye=a(R),A=l(R,"P",{"data-svelte-h":!0}),r(A)!=="svelte-qhf1bg"&&(A.textContent=Ee),ue=a(R),Z=l(R,"IMG",{src:!0,alt:!0}),te=a(R),F=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(F)!=="svelte-11ey9cw"&&(F.textContent=Re),Y=a(R),G=l(R,"P",{"data-svelte-h":!0}),r(G)!=="svelte-ode07s"&&(G.textContent=Be),ke=a(R),re=l(R,"IMG",{src:!0,alt:!0}),_e=a(R),ie=l(R,"P",{"data-svelte-h":!0}),r(ie)!=="svelte-wh7ow1"&&(ie.innerHTML=Qe),Ce=a(R),ae=l(R,"IMG",{src:!0,alt:!0}),T=a(R),H=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-kawc40"&&(H.textContent=Ye),X=a(R),Q=l(R,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1odmreo"&&(Q.innerHTML=tt),ne=a(R),oe=l(R,"IMG",{src:!0,alt:!0}),Ge=a(R),me=l(R,"P",{"data-svelte-h":!0}),r(me)!=="svelte-1ymg8ko"&&(me.innerHTML=ot),qe=a(R),fe=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(fe)!=="svelte-yoz7vc"&&(fe.textContent=lt),J=a(R),le=l(R,"P",{"data-svelte-h":!0}),r(le)!=="svelte-1et6vii"&&(le.innerHTML=it),Oe=a(R),ve=l(R,"IMG",{src:!0,alt:!0}),Ue=a(R),be=l(R,"P",{"data-svelte-h":!0}),r(be)!=="svelte-xrhmm5"&&(be.innerHTML=st),W=a(R),se=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(se)!=="svelte-6yqknk"&&(se.textContent=rt),v=a(R),L=l(R,"P",{"data-svelte-h":!0}),r(L)!=="svelte-1tntgzw"&&(L.textContent=pt),Xe=a(R),De=l(R,"IMG",{src:!0,alt:!0}),et=a(R),Fe=l(R,"H2",{class:!0,"data-svelte-h":!0}),r(Fe)!=="svelte-wy0pt7"&&(Fe.textContent=ut),g=a(R),z=l(R,"P",{"data-svelte-h":!0}),r(z)!=="svelte-wc8yz6"&&(z.textContent=ct),dt=a(R),Ne=l(R,"P",{"data-svelte-h":!0}),r(Ne)!=="svelte-v5m03a"&&(Ne.innerHTML=ft),this.h()},h(){d(k,"class","section"),$e(P.src,ge="python-viewer.png")||d(P,"src",ge),d(P,"alt","Python Viewer"),$e(S.src,He="python-viewer-metadata.png")||d(S,"src",He),d(S,"alt","Python Viewer Metadata"),$e(x.src,Te="exclude-callables-modules.png")||d(x,"src",Te),d(x,"alt","Exclude callables modules"),$e(Z.src,We="view-object-explorer.png")||d(Z,"src",We),d(Z,"alt","View object explorer"),d(F,"class","section"),$e(re.src,Ve="multi-index-support.png")||d(re,"src",Ve),d(re,"alt","Multi-index support"),$e(ae.src,Je="table-headings.png")||d(ae,"src",Je),d(ae,"alt","Table headings"),d(H,"class","section"),$e(oe.src,nt="filter-variables.png")||d(oe,"src",nt),d(oe,"alt","Filter variables"),d(fe,"class","section"),$e(ve.src,at="refresh.png")||d(ve,"src",at),d(ve,"alt","Refresh"),d(se,"class","section"),$e(De.src,ht="set-support.png")||d(De,"src",ht),d(De,"alt","Screenshot of Spyder Variable Explorer UI, showing a Python set displayed in a native viewer"),d(Fe,"class","section")},m(R,ce){t(R,n,ce),t(R,p,ce),t(R,h,ce),t(R,u,ce),t(R,c,ce),t(R,O,ce),t(R,b,ce),t(R,U,ce),t(R,k,ce),t(R,j,ce),t(R,_,ce),t(R,ee,ce),t(R,P,ce),t(R,q,ce),t(R,C,ce),t(R,E,ce),t(R,S,ce),t(R,N,ce),t(R,M,ce),t(R,I,ce),t(R,x,ce),t(R,ye,ce),t(R,A,ce),t(R,ue,ce),t(R,Z,ce),t(R,te,ce),t(R,F,ce),t(R,Y,ce),t(R,G,ce),t(R,ke,ce),t(R,re,ce),t(R,_e,ce),t(R,ie,ce),t(R,Ce,ce),t(R,ae,ce),t(R,T,ce),t(R,H,ce),t(R,X,ce),t(R,Q,ce),t(R,ne,ce),t(R,oe,ce),t(R,Ge,ce),t(R,me,ce),t(R,qe,ce),t(R,fe,ce),t(R,J,ce),t(R,le,ce),t(R,Oe,ce),t(R,ve,ce),t(R,Ue,ce),t(R,be,ce),t(R,W,ce),t(R,se,ce),t(R,v,ce),t(R,L,ce),t(R,Xe,ce),t(R,De,ce),t(R,et,ce),t(R,Fe,ce),t(R,g,ce),t(R,z,ce),t(R,dt,ce),t(R,Ne,ce)},p:bt,d(R){R&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe),e(g),e(z),e(dt),e(Ne))}}}function zi(m){let n,f;const p=[m[0],En];let h={$$slots:{default:[Ai]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(En)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const En={title:"Variable Explorer improvements in Spyder 4",author:"dalthviz",category:"News",tags:"milestone, team, status-update",pub_date:"2019-11-28T00:00:00.000Z",summary:"Spyder 4 will be released very soon with lots of interesting new features that you'll want to check out, reflecting years of effort by the team to improve the user experience. In this post, we will be talking about the improvements made to the Variable Explorer."};function Di(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Fi=class extends kt{constructor(n){super(),_t(this,n,Di,zi,xt,{})}};const Gi=Object.freeze(Object.defineProperty({__proto__:null,default:Fi,metadata:En},Symbol.toStringTag,{value:"Module"}));function qi(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/" rel="nofollow" class="link">Quansight Labs website</a></em>',p,h,s=`TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs.
This will enable the development of some features that have been requested by
our users, as well as new features that will help TDK develop custom Spyder
plugins in order to complement their Automatic Test Equipment (ATE’s) in the
development of their Application Specific Integrated Circuits (ASIC’s).`,u,c,he=`At this point it may be useful to clarify the relationship the role of
Quansight Labs in Spyder’s development and the relationship with TDK. To quote
Ralf Gommers (director of Quansight Labs):`,O,b,xe=`<p>“We’re an R&amp;D lab for open source development of core technologies around data
science and scientific computing in Python. And focused on growing communities
around those technologies. That’s how I see it for Spyder as well: Quansight
Labs enables developers to be employed to work on Spyder, and helps with
connecting them to developers of other projects in similar situations. Labs
should be an enabler to let the Spyder project, its community and individual
developers grow. And Labs provides mechanisms to attract and coordinate
funding. Of course the project is still independent. If there are other
funding sources, e.g. donations from individuals to Spyder via OpenCollective,
all the better.”</p>`,U,k,we="Multiple Projects aka Workspaces",j,_,pe=`In its current state Spyder can only handle one active project at a time.
Although in the past we had basic support for workspaces, it was never a fully
functional feature, so to ease development and simplify the user experience,
we decided to remove it in the 3.x series.`,ee,P,ge=`For TDK-Micronas, as well as for a large part of the Spyder user base, the use
of multiple simultaneous projects is a common pattern, so this enhancement
will:`,q,C,de=`<li>Move from a single to a multiple active projects concept</li> <li>Change the name <code>Project Explorer</code> to <code>WorkSpace Explorer</code>.</li> <li>Copying from one project to another is done in the ‘Explorer’ by means of
context menus.</li>`,E,S,He=`It is worth mentioning that projects are considered an “advanced feature”,
so it will not be forced on users that just want to get some work done.
Projects usage is, and will remain, an optional feature.`,N,M,Le="Project Types",I,x,Te=`Since the revamp of Spyder Projects with the 3.x series, the new dialog hinted
at the possibility of creating different types of projects. Currently Spyder
provides an “empty project” project type.`,ye,A,Ee,ue,Z,We="This feature will:",te,F,Re=`<li>Expand the (current) Project Explorer API to handle Project Types.</li> <li>Define and implement the minimal aspects that should be extensible by a
Project Type</li>`,Y,G,Be="File Associations",ke,re,Ve=`Spyder currently supports opening files on the Project and File Explorer
using the (default) Operating System defined applications. We will enhance
this by adding <strong>Global</strong> file associations as part of the <strong>Preferences</strong>
and Project Specific associations as part of the <strong>Project Preferences</strong>.
This will give users more power to select the tool or set of tools that they
prefer to use for specific projects and tasks directly on the File and Project
Explorer pane.`,_e,ie,Qe="URL Awareness",Ce,ae,Je=`Working with projects requires access to documentation, located within the
computer as other files or links located over the internet. We will now
include integration for URI detection within the editor so users can
<code>Ctrl+Click</code> on these items. This will work similarly as module
inspection works, but generalized to external and internal links.`,T,H,Ye="Git version control enhancements",X,Q,tt=`The revision system of choice by our user base, including TDK, is Git.
The purpose of this enhancement is to enable basic Git integration from
within the File and Project Explorer and to extend the current plugin
API so context menus can be customized with specific Git features and
commands.`,ne,oe,nt=`Initial work has already started to display Git relevant information
on the status bar`,Ge,me,ot,qe,fe,lt="Git status is now displayed in the status bar (on the left)",J,le,it="Editor alternative views",Oe,ve,at=`There are many circumstances where a user would like to edit a file that might
be rendered using a parsing tool into another type of view. One example of
this is Markdown, the markup language in which this blog post is written and
that can be rendered to HTML. At the moment the only way to achieve this within
Spyder is via the use of a dedicated plugin that would create a new type of
Pane. An example of such a plugin is <a href="https://github.com/spyder-ide/spyder-reports" rel="nofollow" class="link">spyder-reports</a>
(See image below and the Reports pane). The reason why plugins are developed
this way is because the Editor Plugin on Spyder can only contain Code Editor
widgets, which prevents us and other developers to use the Editor to hold
these alternate views of a given file.`,Ue,be,st,W,se,rt=`The new alternative views feature will remove this limitation and enable the
inclusion of generic widgets (views) of different types of files and provide
an API for plugin extensions.`,v,L,pt="Closing Remarks",Xe,De,ht=`I would like to thank TDK-Micronas and Quansight for the opportunity to
work in open source development on an awesome product such as Spyder.`,et,Fe,ut=`I would also like to thank the users,
<a href="https://github.com/spyder-ide/spyder/graphs/contributors" rel="nofollow" class="link">contributors</a>
and <a href="https://github.com/orgs/spyder-ide/people" rel="nofollow" class="link">core developers</a> for helping
make Spyder an awesome tool!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.textContent=s,u=i(),c=o("p"),c.textContent=he,O=i(),b=o("blockquote"),b.innerHTML=xe,U=i(),k=o("h2"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("ul"),C.innerHTML=de,E=i(),S=o("p"),S.textContent=He,N=i(),M=o("h2"),M.textContent=Le,I=i(),x=o("p"),x.textContent=Te,ye=i(),A=o("img"),ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("ul"),F.innerHTML=Re,Y=i(),G=o("h2"),G.textContent=Be,ke=i(),re=o("p"),re.innerHTML=Ve,_e=i(),ie=o("h2"),ie.textContent=Qe,Ce=i(),ae=o("p"),ae.innerHTML=Je,T=i(),H=o("h2"),H.textContent=Ye,X=i(),Q=o("p"),Q.textContent=tt,ne=i(),oe=o("p"),oe.textContent=nt,Ge=i(),me=o("img"),qe=i(),fe=o("small"),fe.textContent=lt,J=i(),le=o("h2"),le.textContent=it,Oe=i(),ve=o("p"),ve.innerHTML=at,Ue=i(),be=o("img"),W=i(),se=o("p"),se.textContent=rt,v=i(),L=o("h2"),L.textContent=pt,Xe=i(),De=o("p"),De.textContent=ht,et=i(),Fe=o("p"),Fe.innerHTML=ut,this.h()},l(g){n=l(g,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1wz2w3n"&&(n.innerHTML=f),p=a(g),h=l(g,"P",{"data-svelte-h":!0}),r(h)!=="svelte-89nr4s"&&(h.textContent=s),u=a(g),c=l(g,"P",{"data-svelte-h":!0}),r(c)!=="svelte-hirzgk"&&(c.textContent=he),O=a(g),b=l(g,"BLOCKQUOTE",{"data-svelte-h":!0}),r(b)!=="svelte-194ra0z"&&(b.innerHTML=xe),U=a(g),k=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(k)!=="svelte-39xyj3"&&(k.textContent=we),j=a(g),_=l(g,"P",{"data-svelte-h":!0}),r(_)!=="svelte-vy7895"&&(_.textContent=pe),ee=a(g),P=l(g,"P",{"data-svelte-h":!0}),r(P)!=="svelte-7p7tjc"&&(P.textContent=ge),q=a(g),C=l(g,"UL",{"data-svelte-h":!0}),r(C)!=="svelte-1w77dxh"&&(C.innerHTML=de),E=a(g),S=l(g,"P",{"data-svelte-h":!0}),r(S)!=="svelte-1dm11il"&&(S.textContent=He),N=a(g),M=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-tffyri"&&(M.textContent=Le),I=a(g),x=l(g,"P",{"data-svelte-h":!0}),r(x)!=="svelte-d46gag"&&(x.textContent=Te),ye=a(g),A=l(g,"IMG",{src:!0,alt:!0}),ue=a(g),Z=l(g,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1jp4yz4"&&(Z.textContent=We),te=a(g),F=l(g,"UL",{"data-svelte-h":!0}),r(F)!=="svelte-bodz6j"&&(F.innerHTML=Re),Y=a(g),G=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-a5agc"&&(G.textContent=Be),ke=a(g),re=l(g,"P",{"data-svelte-h":!0}),r(re)!=="svelte-r42ead"&&(re.innerHTML=Ve),_e=a(g),ie=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(ie)!=="svelte-1wpheau"&&(ie.textContent=Qe),Ce=a(g),ae=l(g,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-pnkj4r"&&(ae.innerHTML=Je),T=a(g),H=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(H)!=="svelte-c0fzzy"&&(H.textContent=Ye),X=a(g),Q=l(g,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1vxpn4r"&&(Q.textContent=tt),ne=a(g),oe=l(g,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-11f51nv"&&(oe.textContent=nt),Ge=a(g),me=l(g,"IMG",{src:!0,alt:!0}),qe=a(g),fe=l(g,"SMALL",{"data-svelte-h":!0}),r(fe)!=="svelte-1d84hxu"&&(fe.textContent=lt),J=a(g),le=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(le)!=="svelte-121xd8m"&&(le.textContent=it),Oe=a(g),ve=l(g,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-1w1g9e1"&&(ve.innerHTML=at),Ue=a(g),be=l(g,"IMG",{src:!0,alt:!0}),W=a(g),se=l(g,"P",{"data-svelte-h":!0}),r(se)!=="svelte-zs1sj3"&&(se.textContent=rt),v=a(g),L=l(g,"H2",{class:!0,"data-svelte-h":!0}),r(L)!=="svelte-19du5tw"&&(L.textContent=pt),Xe=a(g),De=l(g,"P",{"data-svelte-h":!0}),r(De)!=="svelte-1xw2w4l"&&(De.textContent=ht),et=a(g),Fe=l(g,"P",{"data-svelte-h":!0}),r(Fe)!=="svelte-19xo1zm"&&(Fe.innerHTML=ut),this.h()},h(){d(k,"class","section"),d(M,"class","section"),$e(A.src,Ee="spyder-project-creation.png")||d(A,"src",Ee),d(A,"alt","Project creation"),d(G,"class","section"),d(ie,"class","section"),d(H,"class","section"),$e(me.src,ot="spyder-git-status.png")||d(me,"src",ot),d(me,"alt","Status bar git"),d(le,"class","section"),$e(be.src,st="spyder-reports.png")||d(be,"src",st),d(be,"alt","Spyder Reports"),d(L,"class","section")},m(g,z){t(g,n,z),t(g,p,z),t(g,h,z),t(g,u,z),t(g,c,z),t(g,O,z),t(g,b,z),t(g,U,z),t(g,k,z),t(g,j,z),t(g,_,z),t(g,ee,z),t(g,P,z),t(g,q,z),t(g,C,z),t(g,E,z),t(g,S,z),t(g,N,z),t(g,M,z),t(g,I,z),t(g,x,z),t(g,ye,z),t(g,A,z),t(g,ue,z),t(g,Z,z),t(g,te,z),t(g,F,z),t(g,Y,z),t(g,G,z),t(g,ke,z),t(g,re,z),t(g,_e,z),t(g,ie,z),t(g,Ce,z),t(g,ae,z),t(g,T,z),t(g,H,z),t(g,X,z),t(g,Q,z),t(g,ne,z),t(g,oe,z),t(g,Ge,z),t(g,me,z),t(g,qe,z),t(g,fe,z),t(g,J,z),t(g,le,z),t(g,Oe,z),t(g,ve,z),t(g,Ue,z),t(g,be,z),t(g,W,z),t(g,se,z),t(g,v,z),t(g,L,z),t(g,Xe,z),t(g,De,z),t(g,et,z),t(g,Fe,z)},p:bt,d(g){g&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F),e(Y),e(G),e(ke),e(re),e(_e),e(ie),e(Ce),e(ae),e(T),e(H),e(X),e(Q),e(ne),e(oe),e(Ge),e(me),e(qe),e(fe),e(J),e(le),e(Oe),e(ve),e(Ue),e(be),e(W),e(se),e(v),e(L),e(Xe),e(De),e(et),e(Fe))}}}function Oi(m){let n,f;const p=[m[0],An];let h={$$slots:{default:[qi]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(An)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const An={title:"TDK-Micronas partners with Quansight to sponsor Spyder",author:"goanpeca",category:"News",tags:"milestone, team, status-update",pub_date:"2019-06-02T00:00:00.000Z",summary:"TDK-Micronas is sponsoring Spyder development efforts through Quansight Labs. This will enable the development of some features that have been requested by our users, as well as new features that will help TDK develop custom Spyder plugins in order to complement their Automatic Test Equipment (ATE’s) in the development of their Application Specific Integrated Circuits (ASIC’s)."};function Ui(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Wi=class extends kt{constructor(n){super(),_t(this,n,Ui,Oi,xt,{})}};const Ri=Object.freeze(Object.defineProperty({__proto__:null,default:Wi,metadata:An},Symbol.toStringTag,{value:"Module"}));function Ni(m){let n,f='<em>This blogpost was originally published on the <a href="https://labs.quansight.org/blog/2020/07/writing-docs-is-not-just-writing-docs/" rel="nofollow" class="link">Quansight Labs website</a></em>.',p,h,s=`I joined the Spyder team almost two years ago, and I never thought I was going to end up working on docs.
Six months ago I started a project with <a href="https://github.com/CAM-Gerlach" rel="nofollow" class="link">CAM Gerlach</a> and <a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Cordoba</a> to improve Spyder’s documentation.
At first, I didn’t actually understand how important docs are for software, especially for open source projects.
However, during all this time I’ve learned how documentation has a huge impact on the open-source community and I’ve been thankful to have been able to do this.
But, from the beginning, I asked myself “why am I the ‘right person’ for this?”`,u,c,he=`Improving Spyder’s documentation started as part of a NumFOCUS Small Development Grant awarded at the end of last year.
The goal of the project was not only to <a href="https://docs.spyder-ide.org/develop/" rel="nofollow" class="link">update the documentation</a> for Spyder 4, but also to make it more user-friendly, so users can understand Spyder’s key concepts and get started with it more easily.`,O,b,xe="One of the main ideas for this project was to create a series of short video tutorials, explaining the basic functionality of Spyder and its most important panes, allowing users to learn how to use Spyder faster and easier.",U,k,we="Carlos Cordoba, our lead maintainer, thought I was the perfect person for this project because of my “good communication and organization skills”, my “clear and fluent English” (his words) and my previous experience at video editing and recording, which I actually gained by recording singing videos during my “YouTuber” phase.",j,_,pe=`I’ve always been interested in education and worked as a tutor for several years learning different tools, gaining experience on how to teach and questioning the effectiveness of current educational methods.
This was the first reason why I got interested in this project.
For me, documentation is just a fancy way of saying “educating people on using software”.
The challenge here was not recording and editing the videos (which was actually a pretty arduous task), or planning the content for them; the real challenge was to make an impact in such a way that users could find documentation actually useful.`,ee,P,ge=`When users start to use a new IDE, or any new software, they usually refer to its documentation, which sometimes doesn’t give enough tools for them to start from zero.
This was, then, the whole purpose of the tutorial videos.
Spyder’s documentation was already very complete in terms of explaining all the features and cool things you can do with each of its panes.
However, if I’m a completely new user and I don’t even know how to open it, where do I start?`,q,C,de=`I planned these videos as a series of progressive steps that can get users from zero experience to actually working with Spyder.
Hence, I divided the videos into three sections, “First Steps with Spyder”, “Working with Spyder”, and “Building Projects with Spyder”.
Each section builds on the one before in a way that they are clear enough so that users can find their way through Spyder without knowing anything about it.`,E,S,He=`The <a href="https://www.youtube.com/playlist?list=PLPonohdiDqg9epClEcXoAPUiK0pN5eRoc" rel="nofollow" class="link">“First Steps with Spyder”</a> section, live now on our YouTube channel, has three videos that provide a starting point for new users before they even open Spyder for the first time.
The <a href="https://youtu.be/E2Dap5SfXkI" rel="nofollow" class="link">first tutorial</a> covers different ways of opening Spyder, the basics of using its interface and an introduction to its four main panes, along with a quick look at the others so that users can get familiar with how Spyder is organized.`,N,M,Le=`In the <a href="https://youtu.be/WV9bm4ey7Cg" rel="nofollow" class="link">second video</a>, users can learn the basics of using Spyder’s four main panes.
The goal is that after this video, users are able to open and edit a file in the Editor, run a script and find the output in Spyder’s IPython Console and execute basic Python commands.
They should be able to interact with the Variable Explorer to browse and edit the objects in the console, and use the Help pane to get documentation in two different ways.`,I,x,Te=`The <a href="https://youtu.be/-dARZBUDk_s" rel="nofollow" class="link">third video</a> is meant to show users how to customize Spyder’s interface to start working with it in the way they feel more comfortable according to their preferences.
It teaches users how to change the font and the theme of Spyder and rearrange its panes to display only the ones that they want such that it is easier for them to work.`,ye,A,Ee=`After these three videos, I learned that one of the most important things for writing documentation, more than having a lot of experience with the software, is empathy.
Usually being a developer makes it hard to put yourself in the position of a user and understand exactly what a user needs.
Now, I realize that this is what actually makes me the “perfect person” for the project.
As a junior developer, without as much experience with Spyder, I was able to think more like new users and develop content in a way that they feel closer to us developers.
In the end, as Melissa said in her <a href="https://labs.quansight.org/blog/2020/03/documentation-as-a-way-to-build-community/" rel="nofollow" class="link">blog post</a>, I learned writing documentation is also a way of building community.`,ue,Z,We="I hope these videos are really useful, and I look forward to continue finding ways of making the open source community better.",te,F,Re="Happy Spydering!";return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("p"),b.textContent=xe,U=i(),k=o("p"),k.textContent=we,j=i(),_=o("p"),_.textContent=pe,ee=i(),P=o("p"),P.textContent=ge,q=i(),C=o("p"),C.textContent=de,E=i(),S=o("p"),S.innerHTML=He,N=i(),M=o("p"),M.innerHTML=Le,I=i(),x=o("p"),x.innerHTML=Te,ye=i(),A=o("p"),A.innerHTML=Ee,ue=i(),Z=o("p"),Z.textContent=We,te=i(),F=o("p"),F.textContent=Re},l(Y){n=l(Y,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1c3xat3"&&(n.innerHTML=f),p=a(Y),h=l(Y,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1ekmroj"&&(h.innerHTML=s),u=a(Y),c=l(Y,"P",{"data-svelte-h":!0}),r(c)!=="svelte-3uobbg"&&(c.innerHTML=he),O=a(Y),b=l(Y,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1nsl4ig"&&(b.textContent=xe),U=a(Y),k=l(Y,"P",{"data-svelte-h":!0}),r(k)!=="svelte-13wakb2"&&(k.textContent=we),j=a(Y),_=l(Y,"P",{"data-svelte-h":!0}),r(_)!=="svelte-8i2tyt"&&(_.textContent=pe),ee=a(Y),P=l(Y,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1taoegn"&&(P.textContent=ge),q=a(Y),C=l(Y,"P",{"data-svelte-h":!0}),r(C)!=="svelte-ovfvik"&&(C.textContent=de),E=a(Y),S=l(Y,"P",{"data-svelte-h":!0}),r(S)!=="svelte-uwjnw4"&&(S.innerHTML=He),N=a(Y),M=l(Y,"P",{"data-svelte-h":!0}),r(M)!=="svelte-q2p4uz"&&(M.innerHTML=Le),I=a(Y),x=l(Y,"P",{"data-svelte-h":!0}),r(x)!=="svelte-4qc8rx"&&(x.innerHTML=Te),ye=a(Y),A=l(Y,"P",{"data-svelte-h":!0}),r(A)!=="svelte-ixkqq3"&&(A.innerHTML=Ee),ue=a(Y),Z=l(Y,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-aq4wil"&&(Z.textContent=We),te=a(Y),F=l(Y,"P",{"data-svelte-h":!0}),r(F)!=="svelte-11fpu20"&&(F.textContent=Re)},m(Y,G){t(Y,n,G),t(Y,p,G),t(Y,h,G),t(Y,u,G),t(Y,c,G),t(Y,O,G),t(Y,b,G),t(Y,U,G),t(Y,k,G),t(Y,j,G),t(Y,_,G),t(Y,ee,G),t(Y,P,G),t(Y,q,G),t(Y,C,G),t(Y,E,G),t(Y,S,G),t(Y,N,G),t(Y,M,G),t(Y,I,G),t(Y,x,G),t(Y,ye,G),t(Y,A,G),t(Y,ue,G),t(Y,Z,G),t(Y,te,G),t(Y,F,G)},p:bt,d(Y){Y&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k),e(j),e(_),e(ee),e(P),e(q),e(C),e(E),e(S),e(N),e(M),e(I),e(x),e(ye),e(A),e(ue),e(Z),e(te),e(F))}}}function Bi(m){let n,f;const p=[m[0],zn];let h={$$slots:{default:[Ni]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(zn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const zn={title:"Writing docs is not just writing docs",author:"juanis2112",tags:"Spyder4, docs",category:"Documentation",pub_date:"2020-07-08T00:00:00.000Z",summary:"I joined the Spyder team almost two years ago, and I never thought I was going to end up working on docs. Six months ago I started a project with CAM Gerlach and Carlos Cordoba to improve Spyder’s documentation. At first, I didn’t actually understand how important docs are for software, especially for open source projects. However, during all this time I’ve learned how documentation has a huge impact on the open-source community and I’ve been thankful to have been able to do this. But, from the beginning, I asked myself “why am I the ‘right person’ for this?”"};function Qi(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}let Ji=class extends kt{constructor(n){super(),_t(this,n,Qi,Bi,xt,{})}};const Vi=Object.freeze(Object.defineProperty({__proto__:null,default:Ji,metadata:zn},Symbol.toStringTag,{value:"Module"}));function Ki(m){let n,f=`<a href="https://www.quansight.com/" rel="nofollow" class="link">Quansight</a>, the company recently founded by NumPy, SciPy and Anaconda creator Travis Oliphant to help connect companies with open source communities built around data science and machine learning, just released Episode 1 of its live webcast series, and it was all about Spyder!
Spyder maintainer <a href="https://github.com/ccordoba12" rel="nofollow" class="link">Carlos Córdoba</a>, recently hired by Quansight and funded part-time to work on Spyder development <a href="https://www.spyder-ide.org/blog/spyder-status-2018-present/" rel="nofollow" class="link">as we announced a few weeks ago</a>, was the featured guest on the show.`,p,h,s=`Carlos first shared his perspective on some of the key moments in Spyder’s nearly 10-year development history, from its original creation by Pierre Raybaut and Carlos’ initial involvement in the project to its <a href="https://www.spyder-ide.org/blog/spyder-status-2018-past/" rel="nofollow" class="link">more recent challenges and successes</a>.
He also demonstrated basic usage of Spyder, as well as some of its standout features, in a live on-screen demo.
Carlos then went on to outline the current roadmap for Spyder 4 in the near future, and explained some of the key new features planned for it.
Finally, he took the time to answer a variety of Spyder-related questions asked live by viewers, ranging from specific current and planned Spyder features to suggestions on keeping a good work-life balance.
While technical difficulties (since identified and resolved) interrupted some of his commentary, particularly in the roadmap section, a full account of the latter will be published here shortly.`,u,c,he=`If you missed the webcast, Quansight recorded it and uploaded it to their <a href="https://www.youtube.com/channel/UChdlbCpQ_Wep04V9o0sGLWQ" rel="nofollow" class="link">new Youtube channel</a>, so you can watch it on-demand right here if you’re curious about any of the above.
Give it a like if you enjoy it to show Quansight some love for helping support Spyder’s further development!`,O,b,xe,U,k,we=`We’ll have a new post on the release of Spyder 3.3.1 (and 3.3.0) in a few days time, plus articles on our new docs, Spyder 4 beta 1, and our full roadmap all in the next week or so; there’s plenty going on that you won’t want to miss.
Keep it right here to catch all that—and in the meantime, happy Spydering!`;return{c(){n=o("p"),n.innerHTML=f,p=i(),h=o("p"),h.innerHTML=s,u=i(),c=o("p"),c.innerHTML=he,O=i(),b=o("iframe"),U=i(),k=o("p"),k.textContent=we,this.h()},l(j){n=l(j,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1ekiaxh"&&(n.innerHTML=f),p=a(j),h=l(j,"P",{"data-svelte-h":!0}),r(h)!=="svelte-4osmhr"&&(h.innerHTML=s),u=a(j),c=l(j,"P",{"data-svelte-h":!0}),r(c)!=="svelte-8641gl"&&(c.innerHTML=he),O=a(j),b=l(j,"IFRAME",{title:!0,width:!0,height:!0,src:!0,frameborder:!0,allow:!0}),Gt(b).forEach(e),U=a(j),k=l(j,"P",{"data-svelte-h":!0}),r(k)!=="svelte-319fyz"&&(k.textContent=we),this.h()},h(){d(b,"title","Episode 1"),d(b,"width","640"),d(b,"height","360"),$e(b.src,xe="https://www.youtube-nocookie.com/embed/vtLdH4VbACA")||d(b,"src",xe),d(b,"frameborder","0"),d(b,"allow","autoplay; encrypted-media"),b.allowFullscreen=!0},m(j,_){t(j,n,_),t(j,p,_),t(j,h,_),t(j,u,_),t(j,c,_),t(j,O,_),t(j,b,_),t(j,U,_),t(j,k,_)},p:bt,d(j){j&&(e(n),e(p),e(h),e(u),e(c),e(O),e(b),e(U),e(k))}}}function Zi(m){let n,f;const p=[m[0],Dn];let h={$$slots:{default:[Ki]},$$scope:{ctx:m}};for(let s=0;s<p.length;s+=1)h=ze(h,p[s]);return n=new It({props:h}),{c(){St(n.$$.fragment)},l(s){Tt(n.$$.fragment,s)},m(s,u){Pt(n,s,u),f=!0},p(s,[u]){const c=u&1?Ht(p,[u&1&&Ze(s[0]),u&0&&Ze(Dn)]):{};u&2&&(c.$$scope={dirty:u,ctx:s}),n.$set(c)},i(s){f||(gt(n.$$.fragment,s),f=!0)},o(s){wt(n.$$.fragment,s),f=!1},d(s){Mt(n,s)}}}const Dn={title:"Spyder featured on Episode 1 of Open Source Directions web show",pub_date:"2018-08-13T00:00:00.000Z",tags:"development, media",category:"News",author:"camgerlach",summary:"Watch maintainer Carlos Córdoba explain Spyder's history, demo some of the IDE's current functionality, and reveal some of the key features planned for the project's immediate future on Episode 1 of Quansight's Open Source Directions broadcast. Carlos also answers a number of user-submitted questions covering a range of Spyder-related topics."};function Xi(m,n,f){return m.$$set=p=>{f(0,n=ze(ze({},n),Ke(p)))},n=Ke(n),[n]}class Yi extends kt{constructor(n){super(),_t(this,n,Xi,Zi,xt,{})}}const ea=Object.freeze(Object.defineProperty({__proto__:null,default:Yi,metadata:Dn},Symbol.toStringTag,{value:"Module"})),Vn=m=>m!=null,ts=async(m,n)=>{const p=Object.entries(Object.assign({"/src/routes/blog/STX-interview/+page.md":Po,"/src/routes/blog/cbi-installers/+page.md":jo,"/src/routes/blog/czi-grant/+page.md":Do,"/src/routes/blog/ide-ux-bof-scipy-2024/+page.md":Uo,"/src/routes/blog/installer-improvements/+page.md":Qo,"/src/routes/blog/introducing-unittest-plugin/+page.md":Xo,"/src/routes/blog/introducing-watchlist-plugin/+page.md":ol,"/src/routes/blog/release-qtconsole-440/+page.md":rl,"/src/routes/blog/release-spyder-330/+page.md":cl,"/src/routes/blog/release-spyder-4/+page.md":gl,"/src/routes/blog/release-spyder-4beta2/+page.md":_l,"/src/routes/blog/release-spyder-6.0.0/+page.md":Ml,"/src/routes/blog/reusable-research-bof-scipy-2023-part-2/+page.md":$l,"/src/routes/blog/reusable-research-bof-scipy-2023/+page.md":Fl,"/src/routes/blog/spyder-6-carlos/+page.md":Wl,"/src/routes/blog/spyder-6-daniel/+page.md":Jl,"/src/routes/blog/spyder-6-remote-development/+page.md":Yl,"/src/routes/blog/spyder-debugger/+page.md":li,"/src/routes/blog/spyder-files-improvements/+page.md":ui,"/src/routes/blog/spyder-kite-funding/+page.md":fi,"/src/routes/blog/spyder-roadmap-proposals-2022/+page.md":vi,"/src/routes/blog/spyder-status-2018-past/+page.md":Ci,"/src/routes/blog/spyder-status-2018-present/+page.md":Hi,"/src/routes/blog/spyder-terminal-030/+page.md":Ei,"/src/routes/blog/spyder-variable-explorer/+page.md":Gi,"/src/routes/blog/tdk-micronas-partners-with-quansight-labs/+page.md":Ri,"/src/routes/blog/tutorial-docs/+page.md":Vi,"/src/routes/blog/webcast-quansight-ep1/+page.md":ea})).map(([O,b])=>{const{metadata:xe}=b,U=O.split("/");U.pop();const k=U.slice(-1).join("/");return{meta:xe,path:k}}),h=oa(p);if(!Vn(m)||!Vn(n))return h;const s=(m-1)*n,u=s+n,c=h.slice(s,u),he=Math.ceil(h.length/n);return{posts:c,pageNum:m,totalPages:he}};function Kn(m){const n={year:"numeric",month:"long",day:"numeric"};return new Date(m).toLocaleDateString("en-US",n)}async function ta(m,n){try{const f=await(n||fetch)(`/assets/authors/${m}/metadata.json`);if(!f.ok)throw new Error("Failed to load author metadata");const p=await f.json();return{src:`/assets/authors/${m}/${p.image}`,name:p.name}}catch(f){return console.error("Failed to load author metadata:",f),null}}async function na(m){return!m||!Array.isArray(m)?(console.error("Invalid authors data:",m),[]):await Promise.all(m.map(f=>ta(f)))}const oa=m=>m.sort((n,f)=>new Date(f.meta.pub_date)-new Date(n.meta.pub_date)),ns=m=>Math.random().toString(24).replace(/[^a-z]+/g,""),la=()=>{if(typeof window<"u"){const m=navigator.userAgent.toLowerCase(),n={mac:["mac"],windows:["win"],linux:["linux"]};for(const f in n)if(n[f].some(p=>m.includes(p)))return f}},ia=(m,n)=>{let f=[{}],p="";return n==="windows"?p="for Windows 10+":n==="linux"?p="for Linux":n==="mac"&&(p="for macOS",f=[{highlight:!0,icon:`${n}`,text:`Download ${p} 14.0+ (M1)`,href:`${m}/download?os=${n}&arch=arm64`},{highlight:!0,icon:`${n}`,text:`Download ${p} 12.0+ (Intel)`,href:`${m}/download?os=${n}&arch=x64`}]),(n==="windows"||n==="linux")&&(f=[{highlight:!0,icon:`${n}`,text:`Download ${p}`,href:`${m}/download?os=${n}&arch=x64`}]),f};async function os(m){try{return(await ro(()=>import("./index.D7Jwt5yH.js"),[],import.meta.url))[m]}catch(n){return console.error(`Failed to load icon: ${m}`,n),null}}const aa=localStorage.getItem("colourScheme")||"light",sa=Fn(aa);sa.subscribe(m=>{localStorage.setItem("colourScheme",m),console.log("Colour scheme set to",m)});function ra(){const{subscribe:m,set:n,update:f}=Fn({title:"",description:"",keywords:"",author:"",url:"",image:"",site:""});return{subscribe:m,setMetadata:p=>n(p),reset:()=>n({title:"",description:"",keywords:"",author:"",url:"",image:"",site:""})}}const Xn=ra(),ua=Fn({loading:!0});setTimeout(()=>{const m=la(),n=ia(Xt,m);ua.set({loading:!1,os:m,osButtons:n})},0);export{_i as $,os as A,ns as B,Ze as C,ya as D,ma as E,Lo as F,zo as G,Oo as H,Bo as I,Zo as J,nl as K,sl as L,bo as M,pl as N,wl as O,To as P,kl as Q,Pl as R,Dl as S,jl as T,Ul as U,Ql as V,Xl as W,oi as X,ri as Y,ci as Z,gi as _,xa as a,Mi as a0,$i as a1,Fi as a2,Wi as a3,Ji as a4,Yi as a5,ba as b,wa as c,fo as d,ga as e,ts as f,Ht as g,Rn as h,la as i,wo as j,va as k,na as l,Xn as m,Kn as n,yo as o,sa as p,ka as q,Ta as r,an as s,ho as t,Pa as u,po as v,Ca as w,ua as x,Sa as y,_a as z};
